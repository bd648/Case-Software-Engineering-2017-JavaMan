[
    {
        "name": "AbstractAction",
        "constructors": [
            {
                "name": "AbstractAction()",
                "description": "Creates an Action."
            },
            {
                "name": "AbstractAction(String name)",
                "description": "Creates an Action with the specified name."
            },
            {
                "name": "AbstractAction(String name,\n              Icon icon)",
                "description": "Creates an Action with the specified name and small icon."
            }
        ],
        "methods": [
            {
                "name": "addPropertyChangeListener(PropertyChangeListener listener)",
                "description": "Adds a PropertyChangeListener to the listener list.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Clones the abstract action.",
                "modAndType": "protected Object"
            },
            {
                "name": "firePropertyChange(String propertyName,\n                  Object oldValue,\n                  Object newValue)",
                "description": "Supports reporting bound property changes.",
                "modAndType": "protected void"
            },
            {
                "name": "getKeys()",
                "description": "Returns an array of Objects which are keys for\n which values have been set for this AbstractAction,\n or null if no keys have values set.",
                "modAndType": "Object[]"
            },
            {
                "name": "getPropertyChangeListeners()",
                "description": "Returns an array of all the PropertyChangeListeners added\n to this AbstractAction with addPropertyChangeListener().",
                "modAndType": "PropertyChangeListener[]"
            },
            {
                "name": "getValue(String key)",
                "description": "Gets the Object associated with the specified key.",
                "modAndType": "Object"
            },
            {
                "name": "isEnabled()",
                "description": "Returns true if the action is enabled.",
                "modAndType": "boolean"
            },
            {
                "name": "putValue(String key,\n        Object newValue)",
                "description": "Sets the Value associated with the specified key.",
                "modAndType": "void"
            },
            {
                "name": "removePropertyChangeListener(PropertyChangeListener listener)",
                "description": "Removes a PropertyChangeListener from the listener list.",
                "modAndType": "void"
            },
            {
                "name": "setEnabled(boolean newValue)",
                "description": "Sets whether the Action is enabled.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/AbstractAction.html"
    },
    {
        "name": "AbstractAnnotationValueVisitor6",
        "constructors": [
            {
                "name": "protected AbstractAnnotationValueVisitor6()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [
            {
                "name": "visit(AnnotationValue av)",
                "description": "Visits an annotation value as if by passing itself to that\n value's accept method passing\n null for the additional parameter.",
                "modAndType": "R"
            },
            {
                "name": "visit(AnnotationValue av,\n     P p)",
                "description": "Visits an annotation value as if by passing itself to that\n value's accept.",
                "modAndType": "R"
            },
            {
                "name": "visitUnknown(AnnotationValue av,\n            P p)",
                "description": "Visits an unknown kind of annotation value.",
                "modAndType": "R"
            }
        ],
        "href": "javax/lang/model/util/AbstractAnnotationValueVisitor6.html"
    },
    {
        "name": "AbstractAnnotationValueVisitor7",
        "constructors": [
            {
                "name": "protected AbstractAnnotationValueVisitor7()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [],
        "href": "javax/lang/model/util/AbstractAnnotationValueVisitor7.html"
    },
    {
        "name": "AbstractAnnotationValueVisitor8",
        "constructors": [
            {
                "name": "protected AbstractAnnotationValueVisitor8()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [],
        "href": "javax/lang/model/util/AbstractAnnotationValueVisitor8.html"
    },
    {
        "name": "AbstractBorder",
        "constructors": [
            {
                "name": "AbstractBorder()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBaseline(Component c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(Component c)",
                "description": "Returns an enum indicating how the baseline of a component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getBorderInsets(Component c)",
                "description": "This default implementation returns a new Insets object\n that is initialized by the getBorderInsets(Component,Insets)\n method.",
                "modAndType": "Insets"
            },
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "getInteriorRectangle(Component c,\n                    Border b,\n                    int x,\n                    int y,\n                    int width,\n                    int height)",
                "description": "Returns a rectangle using the arguments minus the\n insets of the border.",
                "modAndType": "static Rectangle"
            },
            {
                "name": "getInteriorRectangle(Component c,\n                    int x,\n                    int y,\n                    int width,\n                    int height)",
                "description": "This convenience method calls the static method.",
                "modAndType": "Rectangle"
            },
            {
                "name": "isBorderOpaque()",
                "description": "This default implementation returns false.",
                "modAndType": "boolean"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/border/AbstractBorder.html"
    },
    {
        "name": "AbstractButton",
        "constructors": [
            {
                "name": "AbstractButton()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "actionPropertyChanged(Action action,\n                     String propertyName)",
                "description": "Updates the button's state in response to property changes in the\n associated action.",
                "modAndType": "protected void"
            },
            {
                "name": "addActionListener(ActionListener l)",
                "description": "Adds an ActionListener to the button.",
                "modAndType": "void"
            },
            {
                "name": "addChangeListener(ChangeListener l)",
                "description": "Adds a ChangeListener to the button.",
                "modAndType": "void"
            },
            {
                "name": "addImpl(Component comp,\n       Object constraints,\n       int index)",
                "description": "Adds the specified component to this container at the specified\n index, refer to\n Container.addImpl(Component, Object, int)\n for a complete description of this method.",
                "modAndType": "protected void"
            },
            {
                "name": "addItemListener(ItemListener l)",
                "description": "Adds an ItemListener to the checkbox.",
                "modAndType": "void"
            },
            {
                "name": "checkHorizontalKey(int key,\n                  String exception)",
                "description": "Verify that the key argument is a legal value for the\n horizontalAlignment and horizontalTextPosition\n properties.",
                "modAndType": "protected int"
            },
            {
                "name": "checkVerticalKey(int key,\n                String exception)",
                "description": "Verify that the key argument is a legal value for the\n vertical properties.",
                "modAndType": "protected int"
            },
            {
                "name": "configurePropertiesFromAction(Action a)",
                "description": "Sets the properties on this button to match those in the specified\n Action.",
                "modAndType": "protected void"
            },
            {
                "name": "createActionListener()",
                "description": "",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createActionPropertyChangeListener(Action a)",
                "description": "Creates and returns a PropertyChangeListener that is\n responsible for listening for changes from the specified\n Action and updating the appropriate properties.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createChangeListener()",
                "description": "Subclasses that want to handle ChangeEvents differently\n can override this to return another ChangeListener\n implementation.",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createItemListener()",
                "description": "",
                "modAndType": "protected ItemListener"
            },
            {
                "name": "doClick()",
                "description": "Programmatically perform a \"click\".",
                "modAndType": "void"
            },
            {
                "name": "doClick(int pressTime)",
                "description": "Programmatically perform a \"click\".",
                "modAndType": "void"
            },
            {
                "name": "fireActionPerformed(ActionEvent event)",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "fireItemStateChanged(ItemEvent event)",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "fireStateChanged()",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "getAction()",
                "description": "Returns the currently set Action for this\n ActionEvent source, or null\n if no Action is set.",
                "modAndType": "Action"
            },
            {
                "name": "getActionCommand()",
                "description": "Returns the action command for this button.",
                "modAndType": "String"
            },
            {
                "name": "getActionListeners()",
                "description": "Returns an array of all the ActionListeners added\n to this AbstractButton with addActionListener().",
                "modAndType": "ActionListener[]"
            },
            {
                "name": "getChangeListeners()",
                "description": "Returns an array of all the ChangeListeners added\n to this AbstractButton with addChangeListener().",
                "modAndType": "ChangeListener[]"
            },
            {
                "name": "getDisabledIcon()",
                "description": "Returns the icon used by the button when it's disabled.",
                "modAndType": "Icon"
            },
            {
                "name": "getDisabledSelectedIcon()",
                "description": "Returns the icon used by the button when it's disabled and selected.",
                "modAndType": "Icon"
            },
            {
                "name": "getDisplayedMnemonicIndex()",
                "description": "Returns the character, as an index, that the look and feel should\n provide decoration for as representing the mnemonic character.",
                "modAndType": "int"
            },
            {
                "name": "getHideActionText()",
                "description": "Returns the value of the hideActionText property, which\n determines whether the button displays text from the\n Action.",
                "modAndType": "boolean"
            },
            {
                "name": "getHorizontalAlignment()",
                "description": "Returns the horizontal alignment of the icon and text.",
                "modAndType": "int"
            },
            {
                "name": "getHorizontalTextPosition()",
                "description": "Returns the horizontal position of the text relative to the icon.",
                "modAndType": "int"
            },
            {
                "name": "getIcon()",
                "description": "Returns the default icon.",
                "modAndType": "Icon"
            },
            {
                "name": "getIconTextGap()",
                "description": "Returns the amount of space between the text and the icon\n displayed in this button.",
                "modAndType": "int"
            },
            {
                "name": "getItemListeners()",
                "description": "Returns an array of all the ItemListeners added\n to this AbstractButton with addItemListener().",
                "modAndType": "ItemListener[]"
            },
            {
                "name": "getLabel()",
                "description": "Deprecated. \n- Replaced by getText\n",
                "modAndType": "String"
            },
            {
                "name": "getMargin()",
                "description": "Returns the margin between the button's border and\n the label.",
                "modAndType": "Insets"
            },
            {
                "name": "getMnemonic()",
                "description": "Returns the keyboard mnemonic from the the current model.",
                "modAndType": "int"
            },
            {
                "name": "getModel()",
                "description": "Returns the model that this button represents.",
                "modAndType": "ButtonModel"
            },
            {
                "name": "getMultiClickThreshhold()",
                "description": "Gets the amount of time (in milliseconds) required between\n mouse press events for the button to generate the corresponding\n action events.",
                "modAndType": "long"
            },
            {
                "name": "getPressedIcon()",
                "description": "Returns the pressed icon for the button.",
                "modAndType": "Icon"
            },
            {
                "name": "getRolloverIcon()",
                "description": "Returns the rollover icon for the button.",
                "modAndType": "Icon"
            },
            {
                "name": "getRolloverSelectedIcon()",
                "description": "Returns the rollover selection icon for the button.",
                "modAndType": "Icon"
            },
            {
                "name": "getSelectedIcon()",
                "description": "Returns the selected icon for the button.",
                "modAndType": "Icon"
            },
            {
                "name": "getSelectedObjects()",
                "description": "Returns an array (length 1) containing the label or\n null if the button is not selected.",
                "modAndType": "Object[]"
            },
            {
                "name": "getText()",
                "description": "Returns the button's text.",
                "modAndType": "String"
            },
            {
                "name": "getUI()",
                "description": "Returns the L&F object that renders this component.",
                "modAndType": "ButtonUI"
            },
            {
                "name": "getVerticalAlignment()",
                "description": "Returns the vertical alignment of the text and icon.",
                "modAndType": "int"
            },
            {
                "name": "getVerticalTextPosition()",
                "description": "Returns the vertical position of the text relative to the icon.",
                "modAndType": "int"
            },
            {
                "name": "imageUpdate(Image img,\n           int infoflags,\n           int x,\n           int y,\n           int w,\n           int h)",
                "description": "This is overridden to return false if the current Icon's\n Image is not equal to the\n passed in Image img.",
                "modAndType": "boolean"
            },
            {
                "name": "init(String text,\n    Icon icon)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "isBorderPainted()",
                "description": "Gets the borderPainted property.",
                "modAndType": "boolean"
            },
            {
                "name": "isContentAreaFilled()",
                "description": "Gets the contentAreaFilled property.",
                "modAndType": "boolean"
            },
            {
                "name": "isFocusPainted()",
                "description": "Gets the paintFocus property.",
                "modAndType": "boolean"
            },
            {
                "name": "isRolloverEnabled()",
                "description": "Gets the rolloverEnabled property.",
                "modAndType": "boolean"
            },
            {
                "name": "isSelected()",
                "description": "Returns the state of the button.",
                "modAndType": "boolean"
            },
            {
                "name": "paintBorder(Graphics g)",
                "description": "Paint the button's border if BorderPainted\n property is true and the button has a border.",
                "modAndType": "protected void"
            },
            {
                "name": "paramString()",
                "description": "Returns a string representation of this AbstractButton.",
                "modAndType": "protected String"
            },
            {
                "name": "removeActionListener(ActionListener l)",
                "description": "Removes an ActionListener from the button.",
                "modAndType": "void"
            },
            {
                "name": "removeChangeListener(ChangeListener l)",
                "description": "Removes a ChangeListener from the button.",
                "modAndType": "void"
            },
            {
                "name": "removeItemListener(ItemListener l)",
                "description": "Removes an ItemListener from the button.",
                "modAndType": "void"
            },
            {
                "name": "removeNotify()",
                "description": "Notifies this component that it no longer has a parent component.",
                "modAndType": "void"
            },
            {
                "name": "setAction(Action a)",
                "description": "Sets the Action.",
                "modAndType": "void"
            },
            {
                "name": "setActionCommand(String actionCommand)",
                "description": "Sets the action command for this button.",
                "modAndType": "void"
            },
            {
                "name": "setBorderPainted(boolean b)",
                "description": "Sets the borderPainted property.",
                "modAndType": "void"
            },
            {
                "name": "setContentAreaFilled(boolean b)",
                "description": "Sets the contentAreaFilled property.",
                "modAndType": "void"
            },
            {
                "name": "setDisabledIcon(Icon disabledIcon)",
                "description": "Sets the disabled icon for the button.",
                "modAndType": "void"
            },
            {
                "name": "setDisabledSelectedIcon(Icon disabledSelectedIcon)",
                "description": "Sets the disabled selection icon for the button.",
                "modAndType": "void"
            },
            {
                "name": "setDisplayedMnemonicIndex(int index)",
                "description": "Provides a hint to the look and feel as to which character in the\n text should be decorated to represent the mnemonic.",
                "modAndType": "void"
            },
            {
                "name": "setEnabled(boolean b)",
                "description": "Enables (or disables) the button.",
                "modAndType": "void"
            },
            {
                "name": "setFocusPainted(boolean b)",
                "description": "Sets the paintFocus property, which must\n be true for the focus state to be painted.",
                "modAndType": "void"
            },
            {
                "name": "setHideActionText(boolean hideActionText)",
                "description": "Sets the hideActionText property, which determines\n whether the button displays text from the Action.",
                "modAndType": "void"
            },
            {
                "name": "setHorizontalAlignment(int alignment)",
                "description": "Sets the horizontal alignment of the icon and text.",
                "modAndType": "void"
            },
            {
                "name": "setHorizontalTextPosition(int textPosition)",
                "description": "Sets the horizontal position of the text relative to the icon.",
                "modAndType": "void"
            },
            {
                "name": "setIcon(Icon defaultIcon)",
                "description": "Sets the button's default icon.",
                "modAndType": "void"
            },
            {
                "name": "setIconTextGap(int iconTextGap)",
                "description": "If both the icon and text properties are set, this property\n defines the space between them.",
                "modAndType": "void"
            },
            {
                "name": "setLabel(String label)",
                "description": "Deprecated. \n- Replaced by setText(text)\n",
                "modAndType": "void"
            },
            {
                "name": "setLayout(LayoutManager mgr)",
                "description": "Sets the layout manager for this container, refer to\n Container.setLayout(LayoutManager)\n for a complete description of this method.",
                "modAndType": "void"
            },
            {
                "name": "setMargin(Insets m)",
                "description": "Sets space for margin between the button's border and\n the label.",
                "modAndType": "void"
            },
            {
                "name": "setMnemonic(char mnemonic)",
                "description": "This method is now obsolete, please use setMnemonic(int)\n to set the mnemonic for a button.",
                "modAndType": "void"
            },
            {
                "name": "setMnemonic(int mnemonic)",
                "description": "Sets the keyboard mnemonic on the current model.",
                "modAndType": "void"
            },
            {
                "name": "setModel(ButtonModel newModel)",
                "description": "Sets the model that this button represents.",
                "modAndType": "void"
            },
            {
                "name": "setMultiClickThreshhold(long threshhold)",
                "description": "Sets the amount of time (in milliseconds) required between\n mouse press events for the button to generate the corresponding\n action events.",
                "modAndType": "void"
            },
            {
                "name": "setPressedIcon(Icon pressedIcon)",
                "description": "Sets the pressed icon for the button.",
                "modAndType": "void"
            },
            {
                "name": "setRolloverEnabled(boolean b)",
                "description": "Sets the rolloverEnabled property, which\n must be true for rollover effects to occur.",
                "modAndType": "void"
            },
            {
                "name": "setRolloverIcon(Icon rolloverIcon)",
                "description": "Sets the rollover icon for the button.",
                "modAndType": "void"
            },
            {
                "name": "setRolloverSelectedIcon(Icon rolloverSelectedIcon)",
                "description": "Sets the rollover selected icon for the button.",
                "modAndType": "void"
            },
            {
                "name": "setSelected(boolean b)",
                "description": "Sets the state of the button.",
                "modAndType": "void"
            },
            {
                "name": "setSelectedIcon(Icon selectedIcon)",
                "description": "Sets the selected icon for the button.",
                "modAndType": "void"
            },
            {
                "name": "setText(String text)",
                "description": "Sets the button's text.",
                "modAndType": "void"
            },
            {
                "name": "setUI(ButtonUI ui)",
                "description": "Sets the L&F object that renders this component.",
                "modAndType": "void"
            },
            {
                "name": "setVerticalAlignment(int alignment)",
                "description": "Sets the vertical alignment of the icon and text.",
                "modAndType": "void"
            },
            {
                "name": "setVerticalTextPosition(int textPosition)",
                "description": "Sets the vertical position of the text relative to the icon.",
                "modAndType": "void"
            },
            {
                "name": "updateUI()",
                "description": "Resets the UI property to a value from the current look\n and feel.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/AbstractButton.html"
    },
    {
        "name": "AbstractCellEditor",
        "constructors": [
            {
                "name": "AbstractCellEditor()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addCellEditorListener(CellEditorListener l)",
                "description": "Adds a CellEditorListener to the listener list.",
                "modAndType": "void"
            },
            {
                "name": "cancelCellEditing()",
                "description": "Calls fireEditingCanceled.",
                "modAndType": "void"
            },
            {
                "name": "fireEditingCanceled()",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "fireEditingStopped()",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "getCellEditorListeners()",
                "description": "Returns an array of all the CellEditorListeners added\n to this AbstractCellEditor with addCellEditorListener().",
                "modAndType": "CellEditorListener[]"
            },
            {
                "name": "isCellEditable(EventObject e)",
                "description": "Returns true.",
                "modAndType": "boolean"
            },
            {
                "name": "removeCellEditorListener(CellEditorListener l)",
                "description": "Removes a CellEditorListener from the listener list.",
                "modAndType": "void"
            },
            {
                "name": "shouldSelectCell(EventObject anEvent)",
                "description": "Returns true.",
                "modAndType": "boolean"
            },
            {
                "name": "stopCellEditing()",
                "description": "Calls fireEditingStopped and returns true.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/swing/AbstractCellEditor.html"
    },
    {
        "name": "AbstractChronology",
        "constructors": [
            {
                "name": "protected AbstractChronology()",
                "description": "Creates an instance."
            }
        ],
        "methods": [
            {
                "name": "compareTo(Chronology other)",
                "description": "Compares this chronology to another chronology.",
                "modAndType": "int"
            },
            {
                "name": "equals(Object obj)",
                "description": "Checks if this chronology is equal to another chronology.",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "A hash code for this chronology.",
                "modAndType": "int"
            },
            {
                "name": "resolveDate(Map<TemporalField,Long> fieldValues,\n           ResolverStyle resolverStyle)",
                "description": "Resolves parsed ChronoField values into a date during parsing.",
                "modAndType": "ChronoLocalDate"
            },
            {
                "name": "toString()",
                "description": "Outputs this chronology as a String, using the chronology ID.",
                "modAndType": "String"
            }
        ],
        "href": "java/time/chrono/AbstractChronology.html"
    },
    {
        "name": "AbstractCollection",
        "constructors": [
            {
                "name": "protected AbstractCollection()",
                "description": "Sole constructor."
            }
        ],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Ensures that this collection contains the specified element (optional\n operation).",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(Collection<? extends E> c)",
                "description": "Adds all of the elements in the specified collection to this collection\n (optional operation).",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all of the elements from this collection (optional operation).",
                "modAndType": "void"
            },
            {
                "name": "contains(Object o)",
                "description": "Returns true if this collection contains the specified element.",
                "modAndType": "boolean"
            },
            {
                "name": "containsAll(Collection<?> c)",
                "description": "Returns true if this collection contains all of the elements\n in the specified collection.",
                "modAndType": "boolean"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this collection contains no elements.",
                "modAndType": "boolean"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements contained in this collection.",
                "modAndType": "abstract Iterator<E>"
            },
            {
                "name": "remove(Object o)",
                "description": "Removes a single instance of the specified element from this\n collection, if it is present (optional operation).",
                "modAndType": "boolean"
            },
            {
                "name": "removeAll(Collection<?> c)",
                "description": "Removes all of this collection's elements that are also contained in the\n specified collection (optional operation).",
                "modAndType": "boolean"
            },
            {
                "name": "retainAll(Collection<?> c)",
                "description": "Retains only the elements in this collection that are contained in the\n specified collection (optional operation).",
                "modAndType": "boolean"
            },
            {
                "name": "size()",
                "description": "Returns the number of elements in this collection.",
                "modAndType": "abstract int"
            },
            {
                "name": "toArray()",
                "description": "Returns an array containing all of the elements in this collection.",
                "modAndType": "Object[]"
            },
            {
                "name": "toArray(T[] a)",
                "description": "Returns an array containing all of the elements in this collection;\n the runtime type of the returned array is that of the specified array.",
                "modAndType": "<T> T[]"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this collection.",
                "modAndType": "String"
            }
        ],
        "href": "java/util/AbstractCollection.html"
    },
    {
        "name": "AbstractColorChooserPanel",
        "constructors": [
            {
                "name": "AbstractColorChooserPanel()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "buildChooser()",
                "description": "Builds a new chooser panel.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "getColorFromModel()",
                "description": "Returns the color that is currently selected.",
                "modAndType": "protected Color"
            },
            {
                "name": "getColorSelectionModel()",
                "description": "Returns the model that the chooser panel is editing.",
                "modAndType": "ColorSelectionModel"
            },
            {
                "name": "getDisplayedMnemonicIndex()",
                "description": "Provides a hint to the look and feel as to the index of the character in\n getDisplayName that should be visually identified as the\n mnemonic.",
                "modAndType": "int"
            },
            {
                "name": "getDisplayName()",
                "description": "Returns a string containing the display name of the panel.",
                "modAndType": "abstract String"
            },
            {
                "name": "getLargeDisplayIcon()",
                "description": "Returns the large display icon for the panel.",
                "modAndType": "abstract Icon"
            },
            {
                "name": "getMnemonic()",
                "description": "Provides a hint to the look and feel as to the\n KeyEvent.VK constant that can be used as a mnemonic to\n access the panel.",
                "modAndType": "int"
            },
            {
                "name": "getSmallDisplayIcon()",
                "description": "Returns the small display icon for the panel.",
                "modAndType": "abstract Icon"
            },
            {
                "name": "installChooserPanel(JColorChooser enclosingChooser)",
                "description": "Invoked when the panel is added to the chooser.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g)",
                "description": "Draws the panel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallChooserPanel(JColorChooser enclosingChooser)",
                "description": "Invoked when the panel is removed from the chooser.",
                "modAndType": "void"
            },
            {
                "name": "updateChooser()",
                "description": "Invoked automatically when the model's state changes.",
                "modAndType": "abstract void"
            }
        ],
        "href": "javax/swing/colorchooser/AbstractColorChooserPanel.html"
    },
    {
        "name": "AbstractDocument",
        "constructors": [
            {
                "name": "protected AbstractDocument(AbstractDocument.Content data)",
                "description": "Constructs a new AbstractDocument, wrapped around some\n specified content storage mechanism."
            },
            {
                "name": "protected AbstractDocument(AbstractDocument.Content data,\n                AbstractDocument.AttributeContext context)",
                "description": "Constructs a new AbstractDocument, wrapped around some\n specified content storage mechanism."
            }
        ],
        "methods": [
            {
                "name": "addDocumentListener(DocumentListener listener)",
                "description": "Adds a document listener for notification of any changes.",
                "modAndType": "void"
            },
            {
                "name": "addUndoableEditListener(UndoableEditListener listener)",
                "description": "Adds an undo listener for notification of any changes.",
                "modAndType": "void"
            },
            {
                "name": "createBranchElement(Element parent,\n                   AttributeSet a)",
                "description": "Creates a document branch element, that can contain other elements.",
                "modAndType": "protected Element"
            },
            {
                "name": "createLeafElement(Element parent,\n                 AttributeSet a,\n                 int p0,\n                 int p1)",
                "description": "Creates a document leaf element.",
                "modAndType": "protected Element"
            },
            {
                "name": "createPosition(int offs)",
                "description": "Returns a position that will track change as the document\n is altered.",
                "modAndType": "Position"
            },
            {
                "name": "dump(PrintStream out)",
                "description": "Gives a diagnostic dump.",
                "modAndType": "void"
            },
            {
                "name": "fireChangedUpdate(DocumentEvent e)",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "fireInsertUpdate(DocumentEvent e)",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "fireRemoveUpdate(DocumentEvent e)",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "fireUndoableEditUpdate(UndoableEditEvent e)",
                "description": "Notifies all listeners that have registered interest for\n notification on this event type.",
                "modAndType": "protected void"
            },
            {
                "name": "getAsynchronousLoadPriority()",
                "description": "Gets the asynchronous loading priority.",
                "modAndType": "int"
            },
            {
                "name": "getAttributeContext()",
                "description": "Fetches the context for managing attributes.",
                "modAndType": "protected AbstractDocument.AttributeContext"
            },
            {
                "name": "getBidiRootElement()",
                "description": "Returns the root element of the bidirectional structure for this\n document.",
                "modAndType": "Element"
            },
            {
                "name": "getContent()",
                "description": "Gets the content for the document.",
                "modAndType": "protected AbstractDocument.Content"
            },
            {
                "name": "getCurrentWriter()",
                "description": "Fetches the current writing thread if there is one.",
                "modAndType": "protected Thread"
            },
            {
                "name": "getDefaultRootElement()",
                "description": "Returns the root element that views should be based upon\n unless some other mechanism for assigning views to element\n structures is provided.",
                "modAndType": "abstract Element"
            },
            {
                "name": "getDocumentFilter()",
                "description": "Returns the DocumentFilter that is responsible for\n filtering of insertion/removal.",
                "modAndType": "DocumentFilter"
            },
            {
                "name": "getDocumentListeners()",
                "description": "Returns an array of all the document listeners\n registered on this document.",
                "modAndType": "DocumentListener[]"
            },
            {
                "name": "getDocumentProperties()",
                "description": "Supports managing a set of properties.",
                "modAndType": "Dictionary<Object,Object>"
            },
            {
                "name": "getEndPosition()",
                "description": "Returns a position that represents the end of the document.",
                "modAndType": "Position"
            },
            {
                "name": "getLength()",
                "description": "Returns the length of the data.",
                "modAndType": "int"
            },
            {
                "name": "getListeners(Class<T> listenerType)",
                "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this document.",
                "modAndType": "<T extends EventListener>T[]"
            },
            {
                "name": "getParagraphElement(int pos)",
                "description": "Get the paragraph element containing the given position.",
                "modAndType": "abstract Element"
            },
            {
                "name": "getProperty(Object key)",
                "description": "A convenience method for looking up a property value.",
                "modAndType": "Object"
            },
            {
                "name": "getRootElements()",
                "description": "Gets all root elements defined.",
                "modAndType": "Element[]"
            },
            {
                "name": "getStartPosition()",
                "description": "Returns a position that represents the start of the document.",
                "modAndType": "Position"
            },
            {
                "name": "getText(int offset,\n       int length)",
                "description": "Gets a sequence of text from the document.",
                "modAndType": "String"
            },
            {
                "name": "getText(int offset,\n       int length,\n       Segment txt)",
                "description": "Fetches the text contained within the given portion\n of the document.",
                "modAndType": "void"
            },
            {
                "name": "getUndoableEditListeners()",
                "description": "Returns an array of all the undoable edit listeners\n registered on this document.",
                "modAndType": "UndoableEditListener[]"
            },
            {
                "name": "insertString(int offs,\n            String str,\n            AttributeSet a)",
                "description": "Inserts some content into the document.",
                "modAndType": "void"
            },
            {
                "name": "insertUpdate(AbstractDocument.DefaultDocumentEvent chng,\n            AttributeSet attr)",
                "description": "Updates document structure as a result of text insertion.",
                "modAndType": "protected void"
            },
            {
                "name": "postRemoveUpdate(AbstractDocument.DefaultDocumentEvent chng)",
                "description": "Updates any document structure as a result of text removal.",
                "modAndType": "protected void"
            },
            {
                "name": "putProperty(Object key,\n           Object value)",
                "description": "A convenience method for storing up a property value.",
                "modAndType": "void"
            },
            {
                "name": "readLock()",
                "description": "Acquires a lock to begin reading some state from the\n document.",
                "modAndType": "void"
            },
            {
                "name": "readUnlock()",
                "description": "Does a read unlock.",
                "modAndType": "void"
            },
            {
                "name": "remove(int offs,\n      int len)",
                "description": "Removes some content from the document.",
                "modAndType": "void"
            },
            {
                "name": "removeDocumentListener(DocumentListener listener)",
                "description": "Removes a document listener.",
                "modAndType": "void"
            },
            {
                "name": "removeUndoableEditListener(UndoableEditListener listener)",
                "description": "Removes an undo listener.",
                "modAndType": "void"
            },
            {
                "name": "removeUpdate(AbstractDocument.DefaultDocumentEvent chng)",
                "description": "Updates any document structure as a result of text removal.",
                "modAndType": "protected void"
            },
            {
                "name": "render(Runnable r)",
                "description": "This allows the model to be safely rendered in the presence\n of currency, if the model supports being updated asynchronously.",
                "modAndType": "void"
            },
            {
                "name": "replace(int offset,\n       int length,\n       String text,\n       AttributeSet attrs)",
                "description": "Deletes the region of text from offset to\n offset + length, and replaces it with text.",
                "modAndType": "void"
            },
            {
                "name": "setAsynchronousLoadPriority(int p)",
                "description": "Sets the asynchronous loading priority.",
                "modAndType": "void"
            },
            {
                "name": "setDocumentFilter(DocumentFilter filter)",
                "description": "Sets the DocumentFilter.",
                "modAndType": "void"
            },
            {
                "name": "setDocumentProperties(Dictionary<Object,Object> x)",
                "description": "Replaces the document properties dictionary for this document.",
                "modAndType": "void"
            },
            {
                "name": "writeLock()",
                "description": "Acquires a lock to begin mutating the document this lock\n protects.",
                "modAndType": "protected void"
            },
            {
                "name": "writeUnlock()",
                "description": "Releases a write lock previously obtained via writeLock.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/text/AbstractDocument.html"
    },
    {
        "name": "AbstractDocument.AttributeContext",
        "constructors": [],
        "methods": [
            {
                "name": "addAttribute(AttributeSet old,\n            Object name,\n            Object value)",
                "description": "Adds an attribute to the given set, and returns\n the new representative set.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "addAttributes(AttributeSet old,\n             AttributeSet attr)",
                "description": "Adds a set of attributes to the element.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "getEmptySet()",
                "description": "Fetches an empty AttributeSet.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "reclaim(AttributeSet a)",
                "description": "Reclaims an attribute set.",
                "modAndType": "void"
            },
            {
                "name": "removeAttribute(AttributeSet old,\n               Object name)",
                "description": "Removes an attribute from the set.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "removeAttributes(AttributeSet old,\n                AttributeSet attrs)",
                "description": "Removes a set of attributes for the element.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "removeAttributes(AttributeSet old,\n                Enumeration<?> names)",
                "description": "Removes a set of attributes for the element.",
                "modAndType": "AttributeSet"
            }
        ],
        "href": "javax/swing/text/AbstractDocument.AttributeContext.html"
    },
    {
        "name": "AbstractDocument.Content",
        "constructors": [],
        "methods": [
            {
                "name": "createPosition(int offset)",
                "description": "Creates a position within the content that will\n track change as the content is mutated.",
                "modAndType": "Position"
            },
            {
                "name": "getChars(int where,\n        int len,\n        Segment txt)",
                "description": "Gets a sequence of characters and copies them into a Segment.",
                "modAndType": "void"
            },
            {
                "name": "getString(int where,\n         int len)",
                "description": "Fetches a string of characters contained in the sequence.",
                "modAndType": "String"
            },
            {
                "name": "insertString(int where,\n            String str)",
                "description": "Inserts a string of characters into the sequence.",
                "modAndType": "UndoableEdit"
            },
            {
                "name": "length()",
                "description": "Current length of the sequence of character content.",
                "modAndType": "int"
            },
            {
                "name": "remove(int where,\n      int nitems)",
                "description": "Removes some portion of the sequence.",
                "modAndType": "UndoableEdit"
            }
        ],
        "href": "javax/swing/text/AbstractDocument.Content.html"
    },
    {
        "name": "AbstractDocument.ElementEdit",
        "constructors": [
            {
                "name": "ElementEdit(Element e,\n           int index,\n           Element[] removed,\n           Element[] added)",
                "description": "Constructs an edit record."
            }
        ],
        "methods": [
            {
                "name": "getChildrenAdded()",
                "description": "Gets a list of children that were added.",
                "modAndType": "Element[]"
            },
            {
                "name": "getChildrenRemoved()",
                "description": "Gets a list of children that were removed.",
                "modAndType": "Element[]"
            },
            {
                "name": "getElement()",
                "description": "Returns the underlying element.",
                "modAndType": "Element"
            },
            {
                "name": "getIndex()",
                "description": "Returns the index into the list of elements.",
                "modAndType": "int"
            },
            {
                "name": "redo()",
                "description": "Redoes a change.",
                "modAndType": "void"
            },
            {
                "name": "undo()",
                "description": "Undoes a change.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/text/AbstractDocument.ElementEdit.html"
    },
    {
        "name": "AbstractElementVisitor6",
        "constructors": [
            {
                "name": "protected AbstractElementVisitor6()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [
            {
                "name": "visit(Element e)",
                "description": "Visits any program element as if by passing itself to that\n element's accept method and passing\n null for the additional parameter.",
                "modAndType": "R"
            },
            {
                "name": "visit(Element e,\n     P p)",
                "description": "Visits any program element as if by passing itself to that\n element's accept method.",
                "modAndType": "R"
            },
            {
                "name": "visitUnknown(Element e,\n            P p)",
                "description": "Visits an unknown kind of element.",
                "modAndType": "R"
            }
        ],
        "href": "javax/lang/model/util/AbstractElementVisitor6.html"
    },
    {
        "name": "AbstractElementVisitor7",
        "constructors": [
            {
                "name": "protected AbstractElementVisitor7()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [],
        "href": "javax/lang/model/util/AbstractElementVisitor7.html"
    },
    {
        "name": "AbstractElementVisitor8",
        "constructors": [
            {
                "name": "protected AbstractElementVisitor8()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [],
        "href": "javax/lang/model/util/AbstractElementVisitor8.html"
    },
    {
        "name": "AbstractExecutorService",
        "constructors": [
            {
                "name": "AbstractExecutorService()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "invokeAll(Collection<? extends Callable<T>> tasks)",
                "description": "Executes the given tasks, returning a list of Futures holding\n their status and results when all complete.",
                "modAndType": "<T> List<Future<T>>"
            },
            {
                "name": "invokeAll(Collection<? extends Callable<T>> tasks,\n         long timeout,\n         TimeUnit unit)",
                "description": "Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the timeout expires, whichever happens first.",
                "modAndType": "<T> List<Future<T>>"
            },
            {
                "name": "invokeAny(Collection<? extends Callable<T>> tasks)",
                "description": "Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do.",
                "modAndType": "<T> T"
            },
            {
                "name": "invokeAny(Collection<? extends Callable<T>> tasks,\n         long timeout,\n         TimeUnit unit)",
                "description": "Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do before the given timeout elapses.",
                "modAndType": "<T> T"
            },
            {
                "name": "newTaskFor(Callable<T> callable)",
                "description": "Returns a RunnableFuture for the given callable task.",
                "modAndType": "protected <T> RunnableFuture<T>"
            },
            {
                "name": "newTaskFor(Runnable runnable,\n          T value)",
                "description": "Returns a RunnableFuture for the given runnable and default\n value.",
                "modAndType": "protected <T> RunnableFuture<T>"
            },
            {
                "name": "submit(Callable<T> task)",
                "description": "Submits a value-returning task for execution and returns a\n Future representing the pending results of the task.",
                "modAndType": "<T> Future<T>"
            },
            {
                "name": "submit(Runnable task)",
                "description": "Submits a Runnable task for execution and returns a Future\n representing that task.",
                "modAndType": "Future<?>"
            },
            {
                "name": "submit(Runnable task,\n      T result)",
                "description": "Submits a Runnable task for execution and returns a Future\n representing that task.",
                "modAndType": "<T> Future<T>"
            }
        ],
        "href": "java/util/concurrent/AbstractExecutorService.html"
    },
    {
        "name": "AbstractInterruptibleChannel",
        "constructors": [
            {
                "name": "protected AbstractInterruptibleChannel()",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "begin()",
                "description": "Marks the beginning of an I/O operation that might block indefinitely.",
                "modAndType": "protected void"
            },
            {
                "name": "close()",
                "description": "Closes this channel.",
                "modAndType": "void"
            },
            {
                "name": "end(boolean completed)",
                "description": "Marks the end of an I/O operation that might block indefinitely.",
                "modAndType": "protected void"
            },
            {
                "name": "implCloseChannel()",
                "description": "Closes this channel.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "isOpen()",
                "description": "Tells whether or not this channel is open.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/nio/channels/spi/AbstractInterruptibleChannel.html"
    },
    {
        "name": "AbstractLayoutCache",
        "constructors": [
            {
                "name": "AbstractLayoutCache()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBounds(TreePath path,\n         Rectangle placeIn)",
                "description": "Returns a rectangle giving the bounds needed to draw path.",
                "modAndType": "abstract Rectangle"
            },
            {
                "name": "getExpandedState(TreePath path)",
                "description": "Returns true if the path is expanded, and visible.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "getModel()",
                "description": "Returns the TreeModel that is providing the data.",
                "modAndType": "TreeModel"
            },
            {
                "name": "getNodeDimensions()",
                "description": "Returns the object that renders nodes in the tree, and which is\n responsible for calculating the dimensions of individual nodes.",
                "modAndType": "AbstractLayoutCache.NodeDimensions"
            },
            {
                "name": "getNodeDimensions(Object value,\n                 int row,\n                 int depth,\n                 boolean expanded,\n                 Rectangle placeIn)",
                "description": "Returns, by reference in placeIn,\n the size needed to represent value.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "getPathClosestTo(int x,\n                int y)",
                "description": "Returns the path to the node that is closest to x,y.",
                "modAndType": "abstract TreePath"
            },
            {
                "name": "getPathForRow(int row)",
                "description": "Returns the path for passed in row.",
                "modAndType": "abstract TreePath"
            },
            {
                "name": "getPreferredHeight()",
                "description": "Returns the preferred height.",
                "modAndType": "int"
            },
            {
                "name": "getPreferredWidth(Rectangle bounds)",
                "description": "Returns the preferred width for the passed in region.",
                "modAndType": "int"
            },
            {
                "name": "getRowCount()",
                "description": "Number of rows being displayed.",
                "modAndType": "abstract int"
            },
            {
                "name": "getRowForPath(TreePath path)",
                "description": "Returns the row that the last item identified in path is visible\n at.",
                "modAndType": "abstract int"
            },
            {
                "name": "getRowHeight()",
                "description": "Returns the height of each row.",
                "modAndType": "int"
            },
            {
                "name": "getRowsForPaths(TreePath[] paths)",
                "description": "Returns the rows that the TreePath instances in\n path are being displayed at.",
                "modAndType": "int[]"
            },
            {
                "name": "getSelectionModel()",
                "description": "Returns the model used to maintain the selection.",
                "modAndType": "TreeSelectionModel"
            },
            {
                "name": "getVisibleChildCount(TreePath path)",
                "description": "Returns the number of visible children for row.",
                "modAndType": "abstract int"
            },
            {
                "name": "getVisiblePathsFrom(TreePath path)",
                "description": "Returns an Enumerator that increments over the visible\n paths starting at the passed in location.",
                "modAndType": "abstract Enumeration<TreePath>"
            },
            {
                "name": "invalidatePathBounds(TreePath path)",
                "description": "Instructs the LayoutCache that the bounds for\n path are invalid, and need to be updated.",
                "modAndType": "abstract void"
            },
            {
                "name": "invalidateSizes()",
                "description": "Informs the TreeState that it needs to recalculate\n all the sizes it is referencing.",
                "modAndType": "abstract void"
            },
            {
                "name": "isExpanded(TreePath path)",
                "description": "Returns true if the value identified by row is currently expanded.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "isFixedRowHeight()",
                "description": "Returns true if the height of each row is a fixed size.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isRootVisible()",
                "description": "Returns true if the root node of the tree is displayed.",
                "modAndType": "boolean"
            },
            {
                "name": "setExpandedState(TreePath path,\n                boolean isExpanded)",
                "description": "Marks the path path expanded state to\n isExpanded.",
                "modAndType": "abstract void"
            },
            {
                "name": "setModel(TreeModel newModel)",
                "description": "Sets the TreeModel that will provide the data.",
                "modAndType": "void"
            },
            {
                "name": "setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)",
                "description": "Sets the renderer that is responsible for drawing nodes in the tree\n and which is therefore responsible for calculating the dimensions of\n individual nodes.",
                "modAndType": "void"
            },
            {
                "name": "setRootVisible(boolean rootVisible)",
                "description": "Determines whether or not the root node from\n the TreeModel is visible.",
                "modAndType": "void"
            },
            {
                "name": "setRowHeight(int rowHeight)",
                "description": "Sets the height of each cell.",
                "modAndType": "void"
            },
            {
                "name": "setSelectionModel(TreeSelectionModel newLSM)",
                "description": "Sets the TreeSelectionModel used to manage the\n selection to new LSM.",
                "modAndType": "void"
            },
            {
                "name": "treeNodesChanged(TreeModelEvent e)",
                "description": "\n Invoked after a node (or a set of siblings) has changed in some\n way.",
                "modAndType": "abstract void"
            },
            {
                "name": "treeNodesInserted(TreeModelEvent e)",
                "description": "Invoked after nodes have been inserted into the tree.",
                "modAndType": "abstract void"
            },
            {
                "name": "treeNodesRemoved(TreeModelEvent e)",
                "description": "Invoked after nodes have been removed from the tree.",
                "modAndType": "abstract void"
            },
            {
                "name": "treeStructureChanged(TreeModelEvent e)",
                "description": "Invoked after the tree has drastically changed structure from a\n given node down.",
                "modAndType": "abstract void"
            }
        ],
        "href": "javax/swing/tree/AbstractLayoutCache.html"
    },
    {
        "name": "AbstractLayoutCache.NodeDimensions",
        "constructors": [
            {
                "name": "NodeDimensions()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getNodeDimensions(Object value,\n                 int row,\n                 int depth,\n                 boolean expanded,\n                 Rectangle bounds)",
                "description": "Returns, by reference in bounds, the size and x origin to\n place value at.",
                "modAndType": "abstract Rectangle"
            }
        ],
        "href": "javax/swing/tree/AbstractLayoutCache.NodeDimensions.html"
    },
    {
        "name": "AbstractList",
        "constructors": [
            {
                "name": "protected AbstractList()",
                "description": "Sole constructor."
            }
        ],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Appends the specified element to the end of this list (optional\n operation).",
                "modAndType": "boolean"
            },
            {
                "name": "add(int index,\n   E element)",
                "description": "Inserts the specified element at the specified position in this list\n (optional operation).",
                "modAndType": "void"
            },
            {
                "name": "addAll(int index,\n      Collection<? extends E> c)",
                "description": "Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all of the elements from this list (optional operation).",
                "modAndType": "void"
            },
            {
                "name": "equals(Object o)",
                "description": "Compares the specified object with this list for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "get(int index)",
                "description": "Returns the element at the specified position in this list.",
                "modAndType": "abstract E"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this list.",
                "modAndType": "int"
            },
            {
                "name": "indexOf(Object o)",
                "description": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.",
                "modAndType": "int"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements in this list in proper sequence.",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "lastIndexOf(Object o)",
                "description": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.",
                "modAndType": "int"
            },
            {
                "name": "listIterator()",
                "description": "Returns a list iterator over the elements in this list (in proper\n sequence).",
                "modAndType": "ListIterator<E>"
            },
            {
                "name": "listIterator(int index)",
                "description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.",
                "modAndType": "ListIterator<E>"
            },
            {
                "name": "remove(int index)",
                "description": "Removes the element at the specified position in this list (optional\n operation).",
                "modAndType": "E"
            },
            {
                "name": "removeRange(int fromIndex,\n           int toIndex)",
                "description": "Removes from this list all of the elements whose index is between\n fromIndex, inclusive, and toIndex, exclusive.",
                "modAndType": "protected void"
            },
            {
                "name": "set(int index,\n   E element)",
                "description": "Replaces the element at the specified position in this list with the\n specified element (optional operation).",
                "modAndType": "E"
            },
            {
                "name": "subList(int fromIndex,\n       int toIndex)",
                "description": "Returns a view of the portion of this list between the specified\n fromIndex, inclusive, and toIndex, exclusive.",
                "modAndType": "List<E>"
            }
        ],
        "href": "java/util/AbstractList.html"
    },
    {
        "name": "AbstractListModel",
        "constructors": [
            {
                "name": "AbstractListModel()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addListDataListener(ListDataListener l)",
                "description": "Adds a listener to the list that's notified each time a change\n to the data model occurs.",
                "modAndType": "void"
            },
            {
                "name": "fireContentsChanged(Object source,\n                   int index0,\n                   int index1)",
                "description": "AbstractListModel subclasses must call this method\n after\n one or more elements of the list change.",
                "modAndType": "protected void"
            },
            {
                "name": "fireIntervalAdded(Object source,\n                 int index0,\n                 int index1)",
                "description": "AbstractListModel subclasses must call this method\n after\n one or more elements are added to the model.",
                "modAndType": "protected void"
            },
            {
                "name": "fireIntervalRemoved(Object source,\n                   int index0,\n                   int index1)",
                "description": "AbstractListModel subclasses must call this method\n after one or more elements are removed from the model.",
                "modAndType": "protected void"
            },
            {
                "name": "getListDataListeners()",
                "description": "Returns an array of all the list data listeners\n registered on this AbstractListModel.",
                "modAndType": "ListDataListener[]"
            },
            {
                "name": "getListeners(Class<T> listenerType)",
                "description": "Returns an array of all the objects currently registered as\n FooListeners\n upon this model.",
                "modAndType": "<T extends EventListener>T[]"
            },
            {
                "name": "removeListDataListener(ListDataListener l)",
                "description": "Removes a listener from the list that's notified each time a\n change to the data model occurs.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/AbstractListModel.html"
    },
    {
        "name": "AbstractMap",
        "constructors": [
            {
                "name": "protected AbstractMap()",
                "description": "Sole constructor."
            }
        ],
        "methods": [
            {
                "name": "clear()",
                "description": "Removes all of the mappings from this map (optional operation).",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Returns a shallow copy of this AbstractMap instance: the keys\n and values themselves are not cloned.",
                "modAndType": "protected Object"
            },
            {
                "name": "containsKey(Object key)",
                "description": "Returns true if this map contains a mapping for the specified\n key.",
                "modAndType": "boolean"
            },
            {
                "name": "containsValue(Object value)",
                "description": "Returns true if this map maps one or more keys to the\n specified value.",
                "modAndType": "boolean"
            },
            {
                "name": "entrySet()",
                "description": "Returns a Set view of the mappings contained in this map.",
                "modAndType": "abstract Set<Map.Entry<K,V>>"
            },
            {
                "name": "equals(Object o)",
                "description": "Compares the specified object with this map for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "get(Object key)",
                "description": "Returns the value to which the specified key is mapped,\n or null if this map contains no mapping for the key.",
                "modAndType": "V"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this map.",
                "modAndType": "int"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this map contains no key-value mappings.",
                "modAndType": "boolean"
            },
            {
                "name": "keySet()",
                "description": "Returns a Set view of the keys contained in this map.",
                "modAndType": "Set<K>"
            },
            {
                "name": "put(K key,\n   V value)",
                "description": "Associates the specified value with the specified key in this map\n (optional operation).",
                "modAndType": "V"
            },
            {
                "name": "putAll(Map<? extends K,? extends V> m)",
                "description": "Copies all of the mappings from the specified map to this map\n (optional operation).",
                "modAndType": "void"
            },
            {
                "name": "remove(Object key)",
                "description": "Removes the mapping for a key from this map if it is present\n (optional operation).",
                "modAndType": "V"
            },
            {
                "name": "size()",
                "description": "Returns the number of key-value mappings in this map.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this map.",
                "modAndType": "String"
            },
            {
                "name": "values()",
                "description": "Returns a Collection view of the values contained in this map.",
                "modAndType": "Collection<V>"
            }
        ],
        "href": "java/util/AbstractMap.html"
    },
    {
        "name": "AbstractMap.SimpleEntry",
        "constructors": [
            {
                "name": "SimpleEntry(K key,\n           V value)",
                "description": "Creates an entry representing a mapping from the specified\n key to the specified value."
            },
            {
                "name": "SimpleEntry(Map.Entry<? extends K,? extends V> entry)",
                "description": "Creates an entry representing the same mapping as the\n specified entry."
            }
        ],
        "methods": [
            {
                "name": "equals(Object o)",
                "description": "Compares the specified object with this entry for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getKey()",
                "description": "Returns the key corresponding to this entry.",
                "modAndType": "K"
            },
            {
                "name": "getValue()",
                "description": "Returns the value corresponding to this entry.",
                "modAndType": "V"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this map entry.",
                "modAndType": "int"
            },
            {
                "name": "setValue(V value)",
                "description": "Replaces the value corresponding to this entry with the specified\n value.",
                "modAndType": "V"
            },
            {
                "name": "toString()",
                "description": "Returns a String representation of this map entry.",
                "modAndType": "String"
            }
        ],
        "href": "java/util/AbstractMap.SimpleEntry.html"
    },
    {
        "name": "AbstractMap.SimpleImmutableEntry",
        "constructors": [
            {
                "name": "SimpleImmutableEntry(K key,\n                    V value)",
                "description": "Creates an entry representing a mapping from the specified\n key to the specified value."
            },
            {
                "name": "SimpleImmutableEntry(Map.Entry<? extends K,? extends V> entry)",
                "description": "Creates an entry representing the same mapping as the\n specified entry."
            }
        ],
        "methods": [
            {
                "name": "equals(Object o)",
                "description": "Compares the specified object with this entry for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getKey()",
                "description": "Returns the key corresponding to this entry.",
                "modAndType": "K"
            },
            {
                "name": "getValue()",
                "description": "Returns the value corresponding to this entry.",
                "modAndType": "V"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this map entry.",
                "modAndType": "int"
            },
            {
                "name": "setValue(V value)",
                "description": "Replaces the value corresponding to this entry with the specified\n value (optional operation).",
                "modAndType": "V"
            },
            {
                "name": "toString()",
                "description": "Returns a String representation of this map entry.",
                "modAndType": "String"
            }
        ],
        "href": "java/util/AbstractMap.SimpleImmutableEntry.html"
    },
    {
        "name": "AbstractMarshallerImpl",
        "constructors": [
            {
                "name": "AbstractMarshallerImpl()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getAdapter(Class<A> type)",
                "description": "Gets the adapter associated with the specified type.",
                "modAndType": "<A extends XmlAdapter>A"
            },
            {
                "name": "getAttachmentMarshaller()",
                "description": "",
                "modAndType": "AttachmentMarshaller"
            },
            {
                "name": "getEncoding()",
                "description": "Convenience method for getting the current output encoding.",
                "modAndType": "protected String"
            },
            {
                "name": "getEventHandler()",
                "description": "Return the current event handler or the default event handler if one\n hasn't been set.",
                "modAndType": "ValidationEventHandler"
            },
            {
                "name": "getJavaEncoding(String encoding)",
                "description": "Gets the corresponding Java encoding name from an IANA name.",
                "modAndType": "protected String"
            },
            {
                "name": "getListener()",
                "description": "Return Marshaller.Listener registered with this Marshaller.",
                "modAndType": "Marshaller.Listener"
            },
            {
                "name": "getNode(Object obj)",
                "description": "By default, the getNode method is unsupported and throw\n an UnsupportedOperationException.",
                "modAndType": "Node"
            },
            {
                "name": "getNoNSSchemaLocation()",
                "description": "Convenience method for getting the current noNamespaceSchemaLocation.",
                "modAndType": "protected String"
            },
            {
                "name": "getProperty(String name)",
                "description": "Default implementation of the getProperty method handles\n the four defined properties in Marshaller.",
                "modAndType": "Object"
            },
            {
                "name": "getSchema()",
                "description": "Get the JAXP 1.3 Schema object\n being used to perform marshal-time validation.",
                "modAndType": "Schema"
            },
            {
                "name": "getSchemaLocation()",
                "description": "Convenience method for getting the current schemaLocation.",
                "modAndType": "protected String"
            },
            {
                "name": "isFormattedOutput()",
                "description": "Convenience method for getting the formatted output flag.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isFragment()",
                "description": "Convenience method for getting the fragment flag.",
                "modAndType": "protected boolean"
            },
            {
                "name": "marshal(Object obj,\n       ContentHandler handler)",
                "description": "Marshal the content tree rooted at jaxbElement into SAX2 events.",
                "modAndType": "void"
            },
            {
                "name": "marshal(Object jaxbElement,\n       File output)",
                "description": "Marshal the content tree rooted at jaxbElement into a file.",
                "modAndType": "void"
            },
            {
                "name": "marshal(Object obj,\n       Node node)",
                "description": "Marshal the content tree rooted at jaxbElement into a DOM tree.",
                "modAndType": "void"
            },
            {
                "name": "marshal(Object obj,\n       OutputStream os)",
                "description": "Marshal the content tree rooted at jaxbElement into an output stream.",
                "modAndType": "void"
            },
            {
                "name": "marshal(Object obj,\n       Writer w)",
                "description": "Marshal the content tree rooted at jaxbElement into a Writer.",
                "modAndType": "void"
            },
            {
                "name": "marshal(Object obj,\n       XMLEventWriter writer)",
                "description": "Marshal the content tree rooted at jaxbElement into a\n XMLEventWriter.",
                "modAndType": "void"
            },
            {
                "name": "marshal(Object obj,\n       XMLStreamWriter writer)",
                "description": "Marshal the content tree rooted at jaxbElement into a\n XMLStreamWriter.",
                "modAndType": "void"
            },
            {
                "name": "setAdapter(Class<A> type,\n          A adapter)",
                "description": "Associates a configured instance of XmlAdapter with this marshaller.",
                "modAndType": "<A extends XmlAdapter>void"
            },
            {
                "name": "setAdapter(XmlAdapter adapter)",
                "description": "Associates a configured instance of XmlAdapter with this marshaller.",
                "modAndType": "void"
            },
            {
                "name": "setAttachmentMarshaller(AttachmentMarshaller am)",
                "description": "Associate a context that enables binary data within an XML document\n to be transmitted as XML-binary optimized attachment.",
                "modAndType": "void"
            },
            {
                "name": "setEncoding(String encoding)",
                "description": "Convenience method for setting the output encoding.",
                "modAndType": "protected void"
            },
            {
                "name": "setEventHandler(ValidationEventHandler handler)",
                "description": "Allow an application to register a validation event handler.",
                "modAndType": "void"
            },
            {
                "name": "setFormattedOutput(boolean v)",
                "description": "Convenience method for setting the formatted output flag.",
                "modAndType": "protected void"
            },
            {
                "name": "setFragment(boolean v)",
                "description": "Convenience method for setting the fragment flag.",
                "modAndType": "protected void"
            },
            {
                "name": "setListener(Marshaller.Listener listener)",
                "description": "\n Register marshal event callback Marshaller.Listener with this Marshaller.",
                "modAndType": "void"
            },
            {
                "name": "setNoNSSchemaLocation(String location)",
                "description": "Convenience method for setting the noNamespaceSchemaLocation.",
                "modAndType": "protected void"
            },
            {
                "name": "setProperty(String name,\n           Object value)",
                "description": "Default implementation of the setProperty method handles\n the four defined properties in Marshaller.",
                "modAndType": "void"
            },
            {
                "name": "setSchema(Schema schema)",
                "description": "Specify the JAXP 1.3 Schema\n object that should be used to validate subsequent marshal operations\n against.",
                "modAndType": "void"
            },
            {
                "name": "setSchemaLocation(String location)",
                "description": "Convenience method for setting the schemaLocation.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/xml/bind/helpers/AbstractMarshallerImpl.html"
    },
    {
        "name": "AbstractMethodError",
        "constructors": [
            {
                "name": "AbstractMethodError()",
                "description": "Constructs an AbstractMethodError with no detail  message."
            },
            {
                "name": "AbstractMethodError(String s)",
                "description": "Constructs an AbstractMethodError with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "java/lang/AbstractMethodError.html"
    },
    {
        "name": "AbstractOwnableSynchronizer",
        "constructors": [
            {
                "name": "protected AbstractOwnableSynchronizer()",
                "description": "Empty constructor for use by subclasses."
            }
        ],
        "methods": [
            {
                "name": "getExclusiveOwnerThread()",
                "description": "Returns the thread last set by setExclusiveOwnerThread,\n or null if never set.",
                "modAndType": "protected Thread"
            },
            {
                "name": "setExclusiveOwnerThread(Thread thread)",
                "description": "Sets the thread that currently owns exclusive access.",
                "modAndType": "protected void"
            }
        ],
        "href": "java/util/concurrent/locks/AbstractOwnableSynchronizer.html"
    },
    {
        "name": "AbstractPreferences",
        "constructors": [
            {
                "name": "protected AbstractPreferences(AbstractPreferences parent,\n                   String name)",
                "description": "Creates a preference node with the specified parent and the specified\n name relative to its parent."
            }
        ],
        "methods": [
            {
                "name": "absolutePath()",
                "description": "Implements the absolutePath method as per the specification in\n Preferences.absolutePath().",
                "modAndType": "String"
            },
            {
                "name": "addNodeChangeListener(NodeChangeListener ncl)",
                "description": "Registers the specified listener to receive node change events\n for this node.",
                "modAndType": "void"
            },
            {
                "name": "addPreferenceChangeListener(PreferenceChangeListener pcl)",
                "description": "Registers the specified listener to receive preference change\n events for this preference node.",
                "modAndType": "void"
            },
            {
                "name": "cachedChildren()",
                "description": "Returns all known unremoved children of this node.",
                "modAndType": "protected AbstractPreferences[]"
            },
            {
                "name": "childrenNames()",
                "description": "Implements the children method as per the specification in\n Preferences.childrenNames().",
                "modAndType": "String[]"
            },
            {
                "name": "childrenNamesSpi()",
                "description": "Returns the names of the children of this preference node.",
                "modAndType": "protected abstract String[]"
            },
            {
                "name": "childSpi(String name)",
                "description": "Returns the named child of this preference node, creating it if it does\n not already exist.",
                "modAndType": "protected abstract AbstractPreferences"
            },
            {
                "name": "clear()",
                "description": "Implements the clear method as per the specification in\n Preferences.clear().",
                "modAndType": "void"
            },
            {
                "name": "exportNode(OutputStream os)",
                "description": "Implements the exportNode method as per the specification in\n Preferences.exportNode(OutputStream).",
                "modAndType": "void"
            },
            {
                "name": "exportSubtree(OutputStream os)",
                "description": "Implements the exportSubtree method as per the specification in\n Preferences.exportSubtree(OutputStream).",
                "modAndType": "void"
            },
            {
                "name": "flush()",
                "description": "Implements the flush method as per the specification in\n Preferences.flush().",
                "modAndType": "void"
            },
            {
                "name": "flushSpi()",
                "description": "This method is invoked with this node locked.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "get(String key,\n   String def)",
                "description": "Implements the get method as per the specification in\n Preferences.get(String,String).",
                "modAndType": "String"
            },
            {
                "name": "getBoolean(String key,\n          boolean def)",
                "description": "Implements the getBoolean method as per the specification in\n Preferences.getBoolean(String,boolean).",
                "modAndType": "boolean"
            },
            {
                "name": "getByteArray(String key,\n            byte[] def)",
                "description": "Implements the getByteArray method as per the specification in\n Preferences.getByteArray(String,byte[]).",
                "modAndType": "byte[]"
            },
            {
                "name": "getChild(String nodeName)",
                "description": "Returns the named child if it exists, or null if it does not.",
                "modAndType": "protected AbstractPreferences"
            },
            {
                "name": "getDouble(String key,\n         double def)",
                "description": "Implements the getDouble method as per the specification in\n Preferences.getDouble(String,double).",
                "modAndType": "double"
            },
            {
                "name": "getFloat(String key,\n        float def)",
                "description": "Implements the getFloat method as per the specification in\n Preferences.getFloat(String,float).",
                "modAndType": "float"
            },
            {
                "name": "getInt(String key,\n      int def)",
                "description": "Implements the getInt method as per the specification in\n Preferences.getInt(String,int).",
                "modAndType": "int"
            },
            {
                "name": "getLong(String key,\n       long def)",
                "description": "Implements the getLong method as per the specification in\n Preferences.getLong(String,long).",
                "modAndType": "long"
            },
            {
                "name": "getSpi(String key)",
                "description": "Return the value associated with the specified key at this preference\n node, or null if there is no association for this key, or the\n association cannot be determined at this time.",
                "modAndType": "protected abstract String"
            },
            {
                "name": "isRemoved()",
                "description": "Returns true iff this node (or an ancestor) has been\n removed with the removeNode() method.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isUserNode()",
                "description": "Implements the isUserNode method as per the specification in\n Preferences.isUserNode().",
                "modAndType": "boolean"
            },
            {
                "name": "keys()",
                "description": "Implements the keys method as per the specification in\n Preferences.keys().",
                "modAndType": "String[]"
            },
            {
                "name": "keysSpi()",
                "description": "Returns all of the keys that have an associated value in this\n preference node.",
                "modAndType": "protected abstract String[]"
            },
            {
                "name": "name()",
                "description": "Implements the name method as per the specification in\n Preferences.name().",
                "modAndType": "String"
            },
            {
                "name": "node(String path)",
                "description": "Implements the node method as per the specification in\n Preferences.node(String).",
                "modAndType": "Preferences"
            },
            {
                "name": "nodeExists(String path)",
                "description": "Implements the nodeExists method as per the specification in\n Preferences.nodeExists(String).",
                "modAndType": "boolean"
            },
            {
                "name": "parent()",
                "description": "Implements the parent method as per the specification in\n Preferences.parent().",
                "modAndType": "Preferences"
            },
            {
                "name": "put(String key,\n   String value)",
                "description": "Implements the put method as per the specification in\n Preferences.put(String,String).",
                "modAndType": "void"
            },
            {
                "name": "putBoolean(String key,\n          boolean value)",
                "description": "Implements the putBoolean method as per the specification in\n Preferences.putBoolean(String,boolean).",
                "modAndType": "void"
            },
            {
                "name": "putByteArray(String key,\n            byte[] value)",
                "description": "Implements the putByteArray method as per the specification in\n Preferences.putByteArray(String,byte[]).",
                "modAndType": "void"
            },
            {
                "name": "putDouble(String key,\n         double value)",
                "description": "Implements the putDouble method as per the specification in\n Preferences.putDouble(String,double).",
                "modAndType": "void"
            },
            {
                "name": "putFloat(String key,\n        float value)",
                "description": "Implements the putFloat method as per the specification in\n Preferences.putFloat(String,float).",
                "modAndType": "void"
            },
            {
                "name": "putInt(String key,\n      int value)",
                "description": "Implements the putInt method as per the specification in\n Preferences.putInt(String,int).",
                "modAndType": "void"
            },
            {
                "name": "putLong(String key,\n       long value)",
                "description": "Implements the putLong method as per the specification in\n Preferences.putLong(String,long).",
                "modAndType": "void"
            },
            {
                "name": "putSpi(String key,\n      String value)",
                "description": "Put the given key-value association into this preference node.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "remove(String key)",
                "description": "Implements the remove(String) method as per the specification\n in Preferences.remove(String).",
                "modAndType": "void"
            },
            {
                "name": "removeNode()",
                "description": "Implements the removeNode() method as per the specification in\n Preferences.removeNode().",
                "modAndType": "void"
            },
            {
                "name": "removeNodeChangeListener(NodeChangeListener ncl)",
                "description": "Removes the specified NodeChangeListener, so it no longer\n receives change events.",
                "modAndType": "void"
            },
            {
                "name": "removeNodeSpi()",
                "description": "Removes this preference node, invalidating it and any preferences that\n it contains.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "removePreferenceChangeListener(PreferenceChangeListener pcl)",
                "description": "Removes the specified preference change listener, so it no longer\n receives preference change events.",
                "modAndType": "void"
            },
            {
                "name": "removeSpi(String key)",
                "description": "Remove the association (if any) for the specified key at this\n preference node.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "sync()",
                "description": "Implements the sync method as per the specification in\n Preferences.sync().",
                "modAndType": "void"
            },
            {
                "name": "syncSpi()",
                "description": "This method is invoked with this node locked.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "toString()",
                "description": "Returns the absolute path name of this preferences node.",
                "modAndType": "String"
            }
        ],
        "href": "java/util/prefs/AbstractPreferences.html"
    },
    {
        "name": "AbstractProcessor",
        "constructors": [
            {
                "name": "protected AbstractProcessor()",
                "description": "Constructor for subclasses to call."
            }
        ],
        "methods": [
            {
                "name": "getCompletions(Element element,\n              AnnotationMirror annotation,\n              ExecutableElement member,\n              String userText)",
                "description": "Returns an empty iterable of completions.",
                "modAndType": "Iterable<? extends Completion>"
            },
            {
                "name": "getSupportedAnnotationTypes()",
                "description": "If the processor class is annotated with SupportedAnnotationTypes, return an unmodifiable set with the\n same set of strings as the annotation.",
                "modAndType": "Set<String>"
            },
            {
                "name": "getSupportedOptions()",
                "description": "If the processor class is annotated with SupportedOptions, return an unmodifiable set with the same set\n of strings as the annotation.",
                "modAndType": "Set<String>"
            },
            {
                "name": "getSupportedSourceVersion()",
                "description": "If the processor class is annotated with SupportedSourceVersion, return the source version in the\n annotation.",
                "modAndType": "SourceVersion"
            },
            {
                "name": "init(ProcessingEnvironment processingEnv)",
                "description": "Initializes the processor with the processing environment by\n setting the processingEnv field to the value of the\n processingEnv argument.",
                "modAndType": "void"
            },
            {
                "name": "isInitialized()",
                "description": "Returns true if this object has been initialized, false otherwise.",
                "modAndType": "protected boolean"
            },
            {
                "name": "process(Set<? extends TypeElement> annotations,\n       RoundEnvironment roundEnv)",
                "description": "Processes a set of annotation types on type elements\n originating from the prior round and returns whether or not\n these annotation types are claimed by this processor.",
                "modAndType": "abstract boolean"
            }
        ],
        "href": "javax/annotation/processing/AbstractProcessor.html"
    },
    {
        "name": "AbstractQueue",
        "constructors": [
            {
                "name": "protected AbstractQueue()",
                "description": "Constructor for use by subclasses."
            }
        ],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Inserts the specified element into this queue if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and throwing an IllegalStateException\n if no space is currently available.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(Collection<? extends E> c)",
                "description": "Adds all of the elements in the specified collection to this\n queue.",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all of the elements from this queue.",
                "modAndType": "void"
            },
            {
                "name": "element()",
                "description": "Retrieves, but does not remove, the head of this queue.",
                "modAndType": "E"
            },
            {
                "name": "remove()",
                "description": "Retrieves and removes the head of this queue.",
                "modAndType": "E"
            }
        ],
        "href": "java/util/AbstractQueue.html"
    },
    {
        "name": "AbstractQueuedLongSynchronizer",
        "constructors": [
            {
                "name": "protected AbstractQueuedLongSynchronizer()",
                "description": "Creates a new AbstractQueuedLongSynchronizer instance\n with initial synchronization state of zero."
            }
        ],
        "methods": [
            {
                "name": "acquire(long arg)",
                "description": "Acquires in exclusive mode, ignoring interrupts.",
                "modAndType": "void"
            },
            {
                "name": "acquireInterruptibly(long arg)",
                "description": "Acquires in exclusive mode, aborting if interrupted.",
                "modAndType": "void"
            },
            {
                "name": "acquireShared(long arg)",
                "description": "Acquires in shared mode, ignoring interrupts.",
                "modAndType": "void"
            },
            {
                "name": "acquireSharedInterruptibly(long arg)",
                "description": "Acquires in shared mode, aborting if interrupted.",
                "modAndType": "void"
            },
            {
                "name": "compareAndSetState(long expect,\n                  long update)",
                "description": "Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.",
                "modAndType": "protected boolean"
            },
            {
                "name": "getExclusiveQueuedThreads()",
                "description": "Returns a collection containing threads that may be waiting to\n acquire in exclusive mode.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getFirstQueuedThread()",
                "description": "Returns the first (longest-waiting) thread in the queue, or\n null if no threads are currently queued.",
                "modAndType": "Thread"
            },
            {
                "name": "getQueuedThreads()",
                "description": "Returns a collection containing threads that may be waiting to\n acquire.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getQueueLength()",
                "description": "Returns an estimate of the number of threads waiting to\n acquire.",
                "modAndType": "int"
            },
            {
                "name": "getSharedQueuedThreads()",
                "description": "Returns a collection containing threads that may be waiting to\n acquire in shared mode.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getState()",
                "description": "Returns the current value of synchronization state.",
                "modAndType": "protected long"
            },
            {
                "name": "getWaitingThreads(AbstractQueuedLongSynchronizer.ConditionObject condition)",
                "description": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getWaitQueueLength(AbstractQueuedLongSynchronizer.ConditionObject condition)",
                "description": "Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer.",
                "modAndType": "int"
            },
            {
                "name": "hasContended()",
                "description": "Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.",
                "modAndType": "boolean"
            },
            {
                "name": "hasQueuedPredecessors()",
                "description": "Queries whether any threads have been waiting to acquire longer\n than the current thread.",
                "modAndType": "boolean"
            },
            {
                "name": "hasQueuedThreads()",
                "description": "Queries whether any threads are waiting to acquire.",
                "modAndType": "boolean"
            },
            {
                "name": "hasWaiters(AbstractQueuedLongSynchronizer.ConditionObject condition)",
                "description": "Queries whether any threads are waiting on the given condition\n associated with this synchronizer.",
                "modAndType": "boolean"
            },
            {
                "name": "isHeldExclusively()",
                "description": "Returns true if synchronization is held exclusively with\n respect to the current (calling) thread.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isQueued(Thread thread)",
                "description": "Returns true if the given thread is currently queued.",
                "modAndType": "boolean"
            },
            {
                "name": "owns(AbstractQueuedLongSynchronizer.ConditionObject condition)",
                "description": "Queries whether the given ConditionObject\n uses this synchronizer as its lock.",
                "modAndType": "boolean"
            },
            {
                "name": "release(long arg)",
                "description": "Releases in exclusive mode.",
                "modAndType": "boolean"
            },
            {
                "name": "releaseShared(long arg)",
                "description": "Releases in shared mode.",
                "modAndType": "boolean"
            },
            {
                "name": "setState(long newState)",
                "description": "Sets the value of synchronization state.",
                "modAndType": "protected void"
            },
            {
                "name": "toString()",
                "description": "Returns a string identifying this synchronizer, as well as its state.",
                "modAndType": "String"
            },
            {
                "name": "tryAcquire(long arg)",
                "description": "Attempts to acquire in exclusive mode.",
                "modAndType": "protected boolean"
            },
            {
                "name": "tryAcquireNanos(long arg,\n               long nanosTimeout)",
                "description": "Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.",
                "modAndType": "boolean"
            },
            {
                "name": "tryAcquireShared(long arg)",
                "description": "Attempts to acquire in shared mode.",
                "modAndType": "protected long"
            },
            {
                "name": "tryAcquireSharedNanos(long arg,\n                     long nanosTimeout)",
                "description": "Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.",
                "modAndType": "boolean"
            },
            {
                "name": "tryRelease(long arg)",
                "description": "Attempts to set the state to reflect a release in exclusive\n mode.",
                "modAndType": "protected boolean"
            },
            {
                "name": "tryReleaseShared(long arg)",
                "description": "Attempts to set the state to reflect a release in shared mode.",
                "modAndType": "protected boolean"
            }
        ],
        "href": "java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html"
    },
    {
        "name": "AbstractQueuedSynchronizer",
        "constructors": [
            {
                "name": "protected AbstractQueuedSynchronizer()",
                "description": "Creates a new AbstractQueuedSynchronizer instance\n with initial synchronization state of zero."
            }
        ],
        "methods": [
            {
                "name": "acquire(int arg)",
                "description": "Acquires in exclusive mode, ignoring interrupts.",
                "modAndType": "void"
            },
            {
                "name": "acquireInterruptibly(int arg)",
                "description": "Acquires in exclusive mode, aborting if interrupted.",
                "modAndType": "void"
            },
            {
                "name": "acquireShared(int arg)",
                "description": "Acquires in shared mode, ignoring interrupts.",
                "modAndType": "void"
            },
            {
                "name": "acquireSharedInterruptibly(int arg)",
                "description": "Acquires in shared mode, aborting if interrupted.",
                "modAndType": "void"
            },
            {
                "name": "compareAndSetState(int expect,\n                  int update)",
                "description": "Atomically sets synchronization state to the given updated\n value if the current state value equals the expected value.",
                "modAndType": "protected boolean"
            },
            {
                "name": "getExclusiveQueuedThreads()",
                "description": "Returns a collection containing threads that may be waiting to\n acquire in exclusive mode.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getFirstQueuedThread()",
                "description": "Returns the first (longest-waiting) thread in the queue, or\n null if no threads are currently queued.",
                "modAndType": "Thread"
            },
            {
                "name": "getQueuedThreads()",
                "description": "Returns a collection containing threads that may be waiting to\n acquire.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getQueueLength()",
                "description": "Returns an estimate of the number of threads waiting to\n acquire.",
                "modAndType": "int"
            },
            {
                "name": "getSharedQueuedThreads()",
                "description": "Returns a collection containing threads that may be waiting to\n acquire in shared mode.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getState()",
                "description": "Returns the current value of synchronization state.",
                "modAndType": "protected int"
            },
            {
                "name": "getWaitingThreads(AbstractQueuedSynchronizer.ConditionObject condition)",
                "description": "Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.",
                "modAndType": "Collection<Thread>"
            },
            {
                "name": "getWaitQueueLength(AbstractQueuedSynchronizer.ConditionObject condition)",
                "description": "Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer.",
                "modAndType": "int"
            },
            {
                "name": "hasContended()",
                "description": "Queries whether any threads have ever contended to acquire this\n synchronizer; that is if an acquire method has ever blocked.",
                "modAndType": "boolean"
            },
            {
                "name": "hasQueuedPredecessors()",
                "description": "Queries whether any threads have been waiting to acquire longer\n than the current thread.",
                "modAndType": "boolean"
            },
            {
                "name": "hasQueuedThreads()",
                "description": "Queries whether any threads are waiting to acquire.",
                "modAndType": "boolean"
            },
            {
                "name": "hasWaiters(AbstractQueuedSynchronizer.ConditionObject condition)",
                "description": "Queries whether any threads are waiting on the given condition\n associated with this synchronizer.",
                "modAndType": "boolean"
            },
            {
                "name": "isHeldExclusively()",
                "description": "Returns true if synchronization is held exclusively with\n respect to the current (calling) thread.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isQueued(Thread thread)",
                "description": "Returns true if the given thread is currently queued.",
                "modAndType": "boolean"
            },
            {
                "name": "owns(AbstractQueuedSynchronizer.ConditionObject condition)",
                "description": "Queries whether the given ConditionObject\n uses this synchronizer as its lock.",
                "modAndType": "boolean"
            },
            {
                "name": "release(int arg)",
                "description": "Releases in exclusive mode.",
                "modAndType": "boolean"
            },
            {
                "name": "releaseShared(int arg)",
                "description": "Releases in shared mode.",
                "modAndType": "boolean"
            },
            {
                "name": "setState(int newState)",
                "description": "Sets the value of synchronization state.",
                "modAndType": "protected void"
            },
            {
                "name": "toString()",
                "description": "Returns a string identifying this synchronizer, as well as its state.",
                "modAndType": "String"
            },
            {
                "name": "tryAcquire(int arg)",
                "description": "Attempts to acquire in exclusive mode.",
                "modAndType": "protected boolean"
            },
            {
                "name": "tryAcquireNanos(int arg,\n               long nanosTimeout)",
                "description": "Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.",
                "modAndType": "boolean"
            },
            {
                "name": "tryAcquireShared(int arg)",
                "description": "Attempts to acquire in shared mode.",
                "modAndType": "protected int"
            },
            {
                "name": "tryAcquireSharedNanos(int arg,\n                     long nanosTimeout)",
                "description": "Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.",
                "modAndType": "boolean"
            },
            {
                "name": "tryRelease(int arg)",
                "description": "Attempts to set the state to reflect a release in exclusive\n mode.",
                "modAndType": "protected boolean"
            },
            {
                "name": "tryReleaseShared(int arg)",
                "description": "Attempts to set the state to reflect a release in shared mode.",
                "modAndType": "protected boolean"
            }
        ],
        "href": "java/util/concurrent/locks/AbstractQueuedSynchronizer.html"
    },
    {
        "name": "AbstractRegionPainter",
        "constructors": [
            {
                "name": "protected AbstractRegionPainter()",
                "description": "Create a new AbstractRegionPainter"
            }
        ],
        "methods": [
            {
                "name": "configureGraphics(Graphics2D g)",
                "description": "Configures the given Graphics2D.",
                "modAndType": "protected void"
            },
            {
                "name": "decodeAnchorX(float x,\n             float dx)",
                "description": "Decodes and returns a float value representing the actual pixel location for\n the anchor point given the encoded X value of the control point, and the offset\n distance to the anchor from that control point.",
                "modAndType": "protected float"
            },
            {
                "name": "decodeAnchorY(float y,\n             float dy)",
                "description": "Decodes and returns a float value representing the actual pixel location for\n the anchor point given the encoded Y value of the control point, and the offset\n distance to the anchor from that control point.",
                "modAndType": "protected float"
            },
            {
                "name": "decodeColor(Color color1,\n           Color color2,\n           float midPoint)",
                "description": "Decodes and returns a color, which is derived from a offset between two\n other colors.",
                "modAndType": "protected Color"
            },
            {
                "name": "decodeColor(String key,\n           float hOffset,\n           float sOffset,\n           float bOffset,\n           int aOffset)",
                "description": "Decodes and returns a color, which is derived from a base color in UI\n defaults.",
                "modAndType": "protected Color"
            },
            {
                "name": "decodeGradient(float x1,\n              float y1,\n              float x2,\n              float y2,\n              float[] midpoints,\n              Color[] colors)",
                "description": "Given parameters for creating a LinearGradientPaint, this method will\n create and return a linear gradient paint.",
                "modAndType": "protected LinearGradientPaint"
            },
            {
                "name": "decodeRadialGradient(float x,\n                    float y,\n                    float r,\n                    float[] midpoints,\n                    Color[] colors)",
                "description": "Given parameters for creating a RadialGradientPaint, this method will\n create and return a radial gradient paint.",
                "modAndType": "protected RadialGradientPaint"
            },
            {
                "name": "decodeX(float x)",
                "description": "Decodes and returns a float value representing the actual pixel location for\n the given encoded X value.",
                "modAndType": "protected float"
            },
            {
                "name": "decodeY(float y)",
                "description": "Decodes and returns a float value representing the actual pixel location for\n the given encoded y value.",
                "modAndType": "protected float"
            },
            {
                "name": "doPaint(Graphics2D g,\n       JComponent c,\n       int width,\n       int height,\n       Object[] extendedCacheKeys)",
                "description": "Actually performs the painting operation.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "getComponentColor(JComponent c,\n                 String property,\n                 Color defaultColor,\n                 float saturationOffset,\n                 float brightnessOffset,\n                 int alphaOffset)",
                "description": "Get a color property from the given JComponent.",
                "modAndType": "protected Color"
            },
            {
                "name": "getExtendedCacheKeys(JComponent c)",
                "description": "Get any extra attributes which the painter implementation would like\n to include in the image cache lookups.",
                "modAndType": "protected Object[]"
            },
            {
                "name": "getPaintContext()",
                "description": "Gets the PaintContext for this painting operation.",
                "modAndType": "protected abstract AbstractRegionPainter.PaintContext"
            },
            {
                "name": "paint(Graphics2D g,\n     JComponent c,\n     int w,\n     int h)",
                "description": "Renders to the given Graphics2D object.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/nimbus/AbstractRegionPainter.html"
    },
    {
        "name": "AbstractRegionPainter.PaintContext",
        "constructors": [
            {
                "name": "PaintContext(Insets insets,\n            Dimension canvasSize,\n            boolean inverted)",
                "description": "Creates a new PaintContext which does not attempt to cache or scale any cached\n images."
            },
            {
                "name": "PaintContext(Insets insets,\n            Dimension canvasSize,\n            boolean inverted,\n            AbstractRegionPainter.PaintContext.CacheMode cacheMode,\n            double maxH,\n            double maxV)",
                "description": "Creates a new PaintContext."
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/nimbus/AbstractRegionPainter.PaintContext.html"
    },
    {
        "name": "AbstractRegionPainter.PaintContext.CacheMode",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static AbstractRegionPainter.PaintContext.CacheMode"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static AbstractRegionPainter.PaintContext.CacheMode[]"
            }
        ],
        "href": "javax/swing/plaf/nimbus/AbstractRegionPainter.PaintContext.CacheMode.html"
    },
    {
        "name": "AbstractScriptEngine",
        "constructors": [
            {
                "name": "AbstractScriptEngine()",
                "description": "Creates a new instance of AbstractScriptEngine using a SimpleScriptContext\n as its default ScriptContext."
            },
            {
                "name": "AbstractScriptEngine(Bindings n)",
                "description": "Creates a new instance using the specified Bindings as the\n ENGINE_SCOPE Bindings in the protected context field."
            }
        ],
        "methods": [
            {
                "name": "eval(Reader reader)",
                "description": "eval(Reader) calls the abstract\n eval(Reader, ScriptContext) passing the value of the context\n field.",
                "modAndType": "Object"
            },
            {
                "name": "eval(Reader reader,\n    Bindings bindings)",
                "description": "eval(Reader, Bindings) calls the abstract\n eval(Reader, ScriptContext) method, passing it a ScriptContext\n whose Reader, Writers and Bindings for scopes other that ENGINE_SCOPE\n are identical to those members of the protected context field.",
                "modAndType": "Object"
            },
            {
                "name": "eval(String script)",
                "description": "Same as eval(Reader) except that the abstract\n eval(String, ScriptContext) is used.",
                "modAndType": "Object"
            },
            {
                "name": "eval(String script,\n    Bindings bindings)",
                "description": "Same as eval(Reader, Bindings) except that the abstract\n eval(String, ScriptContext) is used.",
                "modAndType": "Object"
            },
            {
                "name": "get(String key)",
                "description": "Gets the value for the specified key in the ENGINE_SCOPE of the\n protected context field.",
                "modAndType": "Object"
            },
            {
                "name": "getBindings(int scope)",
                "description": "Returns the Bindings with the specified scope value in\n the protected context field.",
                "modAndType": "Bindings"
            },
            {
                "name": "getContext()",
                "description": "Returns the value of the protected context field.",
                "modAndType": "ScriptContext"
            },
            {
                "name": "getScriptContext(Bindings nn)",
                "description": "Returns a SimpleScriptContext.",
                "modAndType": "protected ScriptContext"
            },
            {
                "name": "put(String key,\n   Object value)",
                "description": "Sets the specified value with the specified key in the ENGINE_SCOPE\n Bindings of the protected context field.",
                "modAndType": "void"
            },
            {
                "name": "setBindings(Bindings bindings,\n           int scope)",
                "description": "Sets the Bindings with the corresponding scope value in the\n context field.",
                "modAndType": "void"
            },
            {
                "name": "setContext(ScriptContext ctxt)",
                "description": "Sets the value of the protected context field to the specified\n ScriptContext.",
                "modAndType": "void"
            }
        ],
        "href": "javax/script/AbstractScriptEngine.html"
    },
    {
        "name": "AbstractSelectableChannel",
        "constructors": [
            {
                "name": "protected AbstractSelectableChannel(SelectorProvider provider)",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "blockingLock()",
                "description": "Retrieves the object upon which the configureBlocking and register methods synchronize.",
                "modAndType": "Object"
            },
            {
                "name": "configureBlocking(boolean block)",
                "description": "Adjusts this channel's blocking mode.",
                "modAndType": "SelectableChannel"
            },
            {
                "name": "implCloseChannel()",
                "description": "Closes this channel.",
                "modAndType": "protected void"
            },
            {
                "name": "implCloseSelectableChannel()",
                "description": "Closes this selectable channel.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "implConfigureBlocking(boolean block)",
                "description": "Adjusts this channel's blocking mode.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "isBlocking()",
                "description": "Tells whether or not every I/O operation on this channel will block\n until it completes.",
                "modAndType": "boolean"
            },
            {
                "name": "isRegistered()",
                "description": "Tells whether or not this channel is currently registered with any\n selectors.",
                "modAndType": "boolean"
            },
            {
                "name": "keyFor(Selector sel)",
                "description": "Retrieves the key representing the channel's registration with the given\n selector.",
                "modAndType": "SelectionKey"
            },
            {
                "name": "provider()",
                "description": "Returns the provider that created this channel.",
                "modAndType": "SelectorProvider"
            },
            {
                "name": "register(Selector sel,\n        int ops,\n        Object att)",
                "description": "Registers this channel with the given selector, returning a selection key.",
                "modAndType": "SelectionKey"
            }
        ],
        "href": "java/nio/channels/spi/AbstractSelectableChannel.html"
    },
    {
        "name": "AbstractSelectionKey",
        "constructors": [
            {
                "name": "protected AbstractSelectionKey()",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "cancel()",
                "description": "Cancels this key.",
                "modAndType": "void"
            },
            {
                "name": "isValid()",
                "description": "Tells whether or not this key is valid.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/nio/channels/spi/AbstractSelectionKey.html"
    },
    {
        "name": "AbstractSelector",
        "constructors": [
            {
                "name": "protected AbstractSelector(SelectorProvider provider)",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "begin()",
                "description": "Marks the beginning of an I/O operation that might block indefinitely.",
                "modAndType": "protected void"
            },
            {
                "name": "cancelledKeys()",
                "description": "Retrieves this selector's cancelled-key set.",
                "modAndType": "protected Set<SelectionKey>"
            },
            {
                "name": "close()",
                "description": "Closes this selector.",
                "modAndType": "void"
            },
            {
                "name": "deregister(AbstractSelectionKey key)",
                "description": "Removes the given key from its channel's key set.",
                "modAndType": "protected void"
            },
            {
                "name": "end()",
                "description": "Marks the end of an I/O operation that might block indefinitely.",
                "modAndType": "protected void"
            },
            {
                "name": "implCloseSelector()",
                "description": "Closes this selector.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "isOpen()",
                "description": "Tells whether or not this selector is open.",
                "modAndType": "boolean"
            },
            {
                "name": "provider()",
                "description": "Returns the provider that created this channel.",
                "modAndType": "SelectorProvider"
            },
            {
                "name": "register(AbstractSelectableChannel ch,\n        int ops,\n        Object att)",
                "description": "Registers the given channel with this selector.",
                "modAndType": "protected abstract SelectionKey"
            }
        ],
        "href": "java/nio/channels/spi/AbstractSelector.html"
    },
    {
        "name": "AbstractSequentialList",
        "constructors": [
            {
                "name": "protected AbstractSequentialList()",
                "description": "Sole constructor."
            }
        ],
        "methods": [
            {
                "name": "add(int index,\n   E element)",
                "description": "Inserts the specified element at the specified position in this list\n (optional operation).",
                "modAndType": "void"
            },
            {
                "name": "addAll(int index,\n      Collection<? extends E> c)",
                "description": "Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).",
                "modAndType": "boolean"
            },
            {
                "name": "get(int index)",
                "description": "Returns the element at the specified position in this list.",
                "modAndType": "E"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements in this list (in proper\n sequence).",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "listIterator(int index)",
                "description": "Returns a list iterator over the elements in this list (in proper\n sequence).",
                "modAndType": "abstract ListIterator<E>"
            },
            {
                "name": "remove(int index)",
                "description": "Removes the element at the specified position in this list (optional\n operation).",
                "modAndType": "E"
            },
            {
                "name": "set(int index,\n   E element)",
                "description": "Replaces the element at the specified position in this list with the\n specified element (optional operation).",
                "modAndType": "E"
            }
        ],
        "href": "java/util/AbstractSequentialList.html"
    },
    {
        "name": "AbstractSet",
        "constructors": [
            {
                "name": "protected AbstractSet()",
                "description": "Sole constructor."
            }
        ],
        "methods": [
            {
                "name": "equals(Object o)",
                "description": "Compares the specified object with this set for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this set.",
                "modAndType": "int"
            },
            {
                "name": "removeAll(Collection<?> c)",
                "description": "Removes from this set all of its elements that are contained in the\n specified collection (optional operation).",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/AbstractSet.html"
    },
    {
        "name": "AbstractSpinnerModel",
        "constructors": [
            {
                "name": "AbstractSpinnerModel()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addChangeListener(ChangeListener l)",
                "description": "Adds a ChangeListener to the model's listener list.",
                "modAndType": "void"
            },
            {
                "name": "fireStateChanged()",
                "description": "Run each ChangeListeners stateChanged() method.",
                "modAndType": "protected void"
            },
            {
                "name": "getChangeListeners()",
                "description": "Returns an array of all the ChangeListeners added\n to this AbstractSpinnerModel with addChangeListener().",
                "modAndType": "ChangeListener[]"
            },
            {
                "name": "getListeners(Class<T> listenerType)",
                "description": "Return an array of all the listeners of the given type that\n were added to this model.",
                "modAndType": "<T extends EventListener>T[]"
            },
            {
                "name": "removeChangeListener(ChangeListener l)",
                "description": "Removes a ChangeListener from the model's listener list.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/AbstractSpinnerModel.html"
    },
    {
        "name": "AbstractTableModel",
        "constructors": [
            {
                "name": "AbstractTableModel()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addTableModelListener(TableModelListener l)",
                "description": "Adds a listener to the list that's notified each time a change\n to the data model occurs.",
                "modAndType": "void"
            },
            {
                "name": "findColumn(String columnName)",
                "description": "Returns a column given its name.",
                "modAndType": "int"
            },
            {
                "name": "fireTableCellUpdated(int row,\n                    int column)",
                "description": "Notifies all listeners that the value of the cell at\n [row, column] has been updated.",
                "modAndType": "void"
            },
            {
                "name": "fireTableChanged(TableModelEvent e)",
                "description": "Forwards the given notification event to all\n TableModelListeners that registered\n themselves as listeners for this table model.",
                "modAndType": "void"
            },
            {
                "name": "fireTableDataChanged()",
                "description": "Notifies all listeners that all cell values in the table's\n rows may have changed.",
                "modAndType": "void"
            },
            {
                "name": "fireTableRowsDeleted(int firstRow,\n                    int lastRow)",
                "description": "Notifies all listeners that rows in the range\n [firstRow, lastRow], inclusive, have been deleted.",
                "modAndType": "void"
            },
            {
                "name": "fireTableRowsInserted(int firstRow,\n                     int lastRow)",
                "description": "Notifies all listeners that rows in the range\n [firstRow, lastRow], inclusive, have been inserted.",
                "modAndType": "void"
            },
            {
                "name": "fireTableRowsUpdated(int firstRow,\n                    int lastRow)",
                "description": "Notifies all listeners that rows in the range\n [firstRow, lastRow], inclusive, have been updated.",
                "modAndType": "void"
            },
            {
                "name": "fireTableStructureChanged()",
                "description": "Notifies all listeners that the table's structure has changed.",
                "modAndType": "void"
            },
            {
                "name": "getColumnClass(int columnIndex)",
                "description": "Returns Object.class regardless of columnIndex.",
                "modAndType": "Class<?>"
            },
            {
                "name": "getColumnName(int column)",
                "description": "Returns a default name for the column using spreadsheet conventions:\n  A, B, C, ...",
                "modAndType": "String"
            },
            {
                "name": "getListeners(Class<T> listenerType)",
                "description": "Returns an array of all the objects currently registered\n as FooListeners\n upon this AbstractTableModel.",
                "modAndType": "<T extends EventListener>T[]"
            },
            {
                "name": "getTableModelListeners()",
                "description": "Returns an array of all the table model listeners\n registered on this model.",
                "modAndType": "TableModelListener[]"
            },
            {
                "name": "isCellEditable(int rowIndex,\n              int columnIndex)",
                "description": "Returns false.",
                "modAndType": "boolean"
            },
            {
                "name": "removeTableModelListener(TableModelListener l)",
                "description": "Removes a listener from the list that's notified each time a\n change to the data model occurs.",
                "modAndType": "void"
            },
            {
                "name": "setValueAt(Object aValue,\n          int rowIndex,\n          int columnIndex)",
                "description": "This empty implementation is provided so users don't have to implement\n  this method if their data model is not editable.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/table/AbstractTableModel.html"
    },
    {
        "name": "AbstractTypeVisitor6",
        "constructors": [
            {
                "name": "protected AbstractTypeVisitor6()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [
            {
                "name": "visit(TypeMirror t)",
                "description": "Visits any type mirror as if by passing itself to that type\n mirror's accept method and passing\n null for the additional parameter.",
                "modAndType": "R"
            },
            {
                "name": "visit(TypeMirror t,\n     P p)",
                "description": "Visits any type mirror as if by passing itself to that type\n mirror's accept method.",
                "modAndType": "R"
            },
            {
                "name": "visitIntersection(IntersectionType t,\n                 P p)",
                "description": "Visits an IntersectionType element by calling visitUnknown.",
                "modAndType": "R"
            },
            {
                "name": "visitUnion(UnionType t,\n          P p)",
                "description": "Visits a UnionType element by calling visitUnknown.",
                "modAndType": "R"
            },
            {
                "name": "visitUnknown(TypeMirror t,\n            P p)",
                "description": "Visits an unknown kind of type.",
                "modAndType": "R"
            }
        ],
        "href": "javax/lang/model/util/AbstractTypeVisitor6.html"
    },
    {
        "name": "AbstractTypeVisitor7",
        "constructors": [
            {
                "name": "protected AbstractTypeVisitor7()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [
            {
                "name": "visitUnion(UnionType t,\n          P p)",
                "description": "Visits a UnionType in a manner defined by a subclass.",
                "modAndType": "abstract R"
            }
        ],
        "href": "javax/lang/model/util/AbstractTypeVisitor7.html"
    },
    {
        "name": "AbstractTypeVisitor8",
        "constructors": [
            {
                "name": "protected AbstractTypeVisitor8()",
                "description": "Constructor for concrete subclasses to call."
            }
        ],
        "methods": [
            {
                "name": "visitIntersection(IntersectionType t,\n                 P p)",
                "description": "Visits an IntersectionType in a manner defined by a subclass.",
                "modAndType": "abstract R"
            }
        ],
        "href": "javax/lang/model/util/AbstractTypeVisitor8.html"
    },
    {
        "name": "AbstractUndoableEdit",
        "constructors": [
            {
                "name": "AbstractUndoableEdit()",
                "description": "Creates an AbstractUndoableEdit which defaults\n hasBeenDone and alive to true."
            }
        ],
        "methods": [
            {
                "name": "addEdit(UndoableEdit anEdit)",
                "description": "This default implementation returns false.",
                "modAndType": "boolean"
            },
            {
                "name": "canRedo()",
                "description": "Returns true if this edit is alive\n and hasBeenDone is false.",
                "modAndType": "boolean"
            },
            {
                "name": "canUndo()",
                "description": "Returns true if this edit is alive\n and hasBeenDone is true.",
                "modAndType": "boolean"
            },
            {
                "name": "die()",
                "description": "Sets alive to false.",
                "modAndType": "void"
            },
            {
                "name": "getPresentationName()",
                "description": "This default implementation returns \"\".",
                "modAndType": "String"
            },
            {
                "name": "getRedoPresentationName()",
                "description": "Retreives the value from the defaults table with key\n AbstractUndoableEdit.redoText and returns\n that value followed by a space, followed by\n getPresentationName.",
                "modAndType": "String"
            },
            {
                "name": "getUndoPresentationName()",
                "description": "Retreives the value from the defaults table with key\n AbstractUndoableEdit.undoText and returns\n that value followed by a space, followed by\n getPresentationName.",
                "modAndType": "String"
            },
            {
                "name": "isSignificant()",
                "description": "This default implementation returns true.",
                "modAndType": "boolean"
            },
            {
                "name": "redo()",
                "description": "Throws CannotRedoException if canRedo\n returns false.",
                "modAndType": "void"
            },
            {
                "name": "replaceEdit(UndoableEdit anEdit)",
                "description": "This default implementation returns false.",
                "modAndType": "boolean"
            },
            {
                "name": "toString()",
                "description": "Returns a string that displays and identifies this\n object's properties.",
                "modAndType": "String"
            },
            {
                "name": "undo()",
                "description": "Throws CannotUndoException if canUndo\n returns false.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/undo/AbstractUndoableEdit.html"
    },
    {
        "name": "AbstractUnmarshallerImpl",
        "constructors": [
            {
                "name": "AbstractUnmarshallerImpl()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUnmarshalException(SAXException e)",
                "description": "Creates an UnmarshalException from a SAXException.",
                "modAndType": "protected UnmarshalException"
            },
            {
                "name": "getAdapter(Class<A> type)",
                "description": "Gets the adapter associated with the specified type.",
                "modAndType": "<A extends XmlAdapter>A"
            },
            {
                "name": "getAttachmentUnmarshaller()",
                "description": "",
                "modAndType": "AttachmentUnmarshaller"
            },
            {
                "name": "getEventHandler()",
                "description": "Return the current event handler or the default event handler if one\n hasn't been set.",
                "modAndType": "ValidationEventHandler"
            },
            {
                "name": "getListener()",
                "description": "Return Unmarshaller.Listener registered with this Unmarshaller.",
                "modAndType": "Unmarshaller.Listener"
            },
            {
                "name": "getProperty(String name)",
                "description": "Default implementation of the getProperty method always\n throws PropertyException since there are no required\n properties.",
                "modAndType": "Object"
            },
            {
                "name": "getSchema()",
                "description": "Get the JAXP 1.3 Schema object\n being used to perform unmarshal-time validation.",
                "modAndType": "Schema"
            },
            {
                "name": "getXMLReader()",
                "description": "Obtains a configured XMLReader.",
                "modAndType": "protected XMLReader"
            },
            {
                "name": "isValidating()",
                "description": "Indicates whether or not the Unmarshaller is configured to validate\n during unmarshal operations.",
                "modAndType": "boolean"
            },
            {
                "name": "setAdapter(Class<A> type,\n          A adapter)",
                "description": "Associates a configured instance of XmlAdapter with this unmarshaller.",
                "modAndType": "<A extends XmlAdapter>void"
            },
            {
                "name": "setAdapter(XmlAdapter adapter)",
                "description": "Associates a configured instance of XmlAdapter with this unmarshaller.",
                "modAndType": "void"
            },
            {
                "name": "setAttachmentUnmarshaller(AttachmentUnmarshaller au)",
                "description": "Associate a context that resolves cid's, content-id URIs, to\n binary data passed as attachments.",
                "modAndType": "void"
            },
            {
                "name": "setEventHandler(ValidationEventHandler handler)",
                "description": "Allow an application to register a validation event handler.",
                "modAndType": "void"
            },
            {
                "name": "setListener(Unmarshaller.Listener listener)",
                "description": "\n Register unmarshal event callback Unmarshaller.Listener with this Unmarshaller.",
                "modAndType": "void"
            },
            {
                "name": "setProperty(String name,\n           Object value)",
                "description": "Default implementation of the setProperty method always\n throws PropertyException since there are no required\n properties.",
                "modAndType": "void"
            },
            {
                "name": "setSchema(Schema schema)",
                "description": "Specify the JAXP 1.3 Schema\n object that should be used to validate subsequent unmarshal operations\n against.",
                "modAndType": "void"
            },
            {
                "name": "setValidating(boolean validating)",
                "description": "Specifies whether or not the Unmarshaller should validate during\n unmarshal operations.",
                "modAndType": "void"
            },
            {
                "name": "unmarshal(File f)",
                "description": "Unmarshal XML data from the specified file and return the resulting\n content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(InputSource source)",
                "description": "Unmarshal XML data from the specified SAX InputSource and return the\n resulting content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(InputStream is)",
                "description": "Unmarshal XML data from the specified InputStream and return the\n resulting content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(Node node,\n         Class<T> expectedType)",
                "description": "Unmarshal XML data by JAXB mapped declaredType\n and return the resulting content tree.",
                "modAndType": "<T> JAXBElement<T>"
            },
            {
                "name": "unmarshal(Reader reader)",
                "description": "Unmarshal XML data from the specified Reader and return the\n resulting content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(Source source)",
                "description": "Unmarshal XML data from the specified XML Source and return the\n resulting content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(Source source,\n         Class<T> expectedType)",
                "description": "Unmarshal XML data from the specified XML Source by declaredType and return the\n resulting content tree.",
                "modAndType": "<T> JAXBElement<T>"
            },
            {
                "name": "unmarshal(URL url)",
                "description": "Unmarshal XML data from the specified URL and return the resulting\n content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(XMLEventReader reader)",
                "description": "Unmarshal XML data from the specified pull parser and return the\n resulting content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(XMLEventReader reader,\n         Class<T> expectedType)",
                "description": "Unmarshal root element to JAXB mapped declaredType\n and return the resulting content tree.",
                "modAndType": "<T> JAXBElement<T>"
            },
            {
                "name": "unmarshal(XMLReader reader,\n         InputSource source)",
                "description": "Unmarshals an object by using the specified XMLReader and the InputSource.",
                "modAndType": "protected abstract Object"
            },
            {
                "name": "unmarshal(XMLStreamReader reader)",
                "description": "Unmarshal XML data from the specified pull parser and return the\n resulting content tree.",
                "modAndType": "Object"
            },
            {
                "name": "unmarshal(XMLStreamReader reader,\n         Class<T> expectedType)",
                "description": "Unmarshal root element to JAXB mapped declaredType\n and return the resulting content tree.",
                "modAndType": "<T> JAXBElement<T>"
            }
        ],
        "href": "javax/xml/bind/helpers/AbstractUnmarshallerImpl.html"
    },
    {
        "name": "AbstractView",
        "constructors": [],
        "methods": [
            {
                "name": "getDocument()",
                "description": "The source DocumentView of which this is an\n AbstractView.",
                "modAndType": "DocumentView"
            }
        ],
        "href": "org/w3c/dom/views/AbstractView.html"
    },
    {
        "name": "AbstractWriter",
        "constructors": [
            {
                "name": "protected AbstractWriter(Writer w,\n              Document doc)",
                "description": "Creates a new AbstractWriter."
            },
            {
                "name": "protected AbstractWriter(Writer w,\n              Document doc,\n              int pos,\n              int len)",
                "description": "Creates a new AbstractWriter."
            },
            {
                "name": "protected AbstractWriter(Writer w,\n              Element root)",
                "description": "Creates a new AbstractWriter."
            },
            {
                "name": "protected AbstractWriter(Writer w,\n              Element root,\n              int pos,\n              int len)",
                "description": "Creates a new AbstractWriter."
            }
        ],
        "methods": [
            {
                "name": "decrIndent()",
                "description": "Decrements the indent level.",
                "modAndType": "protected void"
            },
            {
                "name": "getCanWrapLines()",
                "description": "Returns whether or not the lines can be wrapped.",
                "modAndType": "protected boolean"
            },
            {
                "name": "getCurrentLineLength()",
                "description": "Returns the current line length.",
                "modAndType": "protected int"
            },
            {
                "name": "getDocument()",
                "description": "Fetches the document.",
                "modAndType": "protected Document"
            },
            {
                "name": "getElementIterator()",
                "description": "Fetches the ElementIterator.",
                "modAndType": "protected ElementIterator"
            },
            {
                "name": "getEndOffset()",
                "description": "Returns the last offset to be output.",
                "modAndType": "int"
            },
            {
                "name": "getIndentLevel()",
                "description": "Returns the current indentation level.",
                "modAndType": "protected int"
            },
            {
                "name": "getIndentSpace()",
                "description": "Returns the amount of space to indent.",
                "modAndType": "protected int"
            },
            {
                "name": "getLineLength()",
                "description": "Returns the maximum line length.",
                "modAndType": "protected int"
            },
            {
                "name": "getLineSeparator()",
                "description": "Returns the string used to represent newlines.",
                "modAndType": "String"
            },
            {
                "name": "getStartOffset()",
                "description": "Returns the first offset to be output.",
                "modAndType": "int"
            },
            {
                "name": "getText(Element elem)",
                "description": "Returns the text associated with the element.",
                "modAndType": "protected String"
            },
            {
                "name": "getWriter()",
                "description": "Returns the Writer that is used to output the content.",
                "modAndType": "protected Writer"
            },
            {
                "name": "incrIndent()",
                "description": "Increments the indent level.",
                "modAndType": "protected void"
            },
            {
                "name": "indent()",
                "description": "Does indentation.",
                "modAndType": "protected void"
            },
            {
                "name": "inRange(Element next)",
                "description": "This method determines whether the current element\n is in the range specified.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isLineEmpty()",
                "description": "Returns true if the current line should be considered empty.",
                "modAndType": "protected boolean"
            },
            {
                "name": "output(char[] content,\n      int start,\n      int length)",
                "description": "The last stop in writing out content.",
                "modAndType": "protected void"
            },
            {
                "name": "setCanWrapLines(boolean newValue)",
                "description": "Sets whether or not lines can be wrapped.",
                "modAndType": "protected void"
            },
            {
                "name": "setCurrentLineLength(int length)",
                "description": "Sets the current line length.",
                "modAndType": "protected void"
            },
            {
                "name": "setIndentSpace(int space)",
                "description": "Enables subclasses to specify how many spaces an indent\n maps to.",
                "modAndType": "protected void"
            },
            {
                "name": "setLineLength(int l)",
                "description": "Enables subclasses to set the number of characters they\n want written per line.",
                "modAndType": "protected void"
            },
            {
                "name": "setLineSeparator(String value)",
                "description": "Sets the String used to represent newlines.",
                "modAndType": "void"
            },
            {
                "name": "text(Element elem)",
                "description": "Writes out text.",
                "modAndType": "protected void"
            },
            {
                "name": "write()",
                "description": "This abstract method needs to be implemented\n by subclasses.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "write(char ch)",
                "description": "Writes out a character.",
                "modAndType": "protected void"
            },
            {
                "name": "write(char[] chars,\n     int startIndex,\n     int length)",
                "description": "All write methods call into this one.",
                "modAndType": "protected void"
            },
            {
                "name": "write(String content)",
                "description": "Writes out a string.",
                "modAndType": "protected void"
            },
            {
                "name": "writeAttributes(AttributeSet attr)",
                "description": "Writes out the set of attributes as \" <name>=<value>\"\n pairs.",
                "modAndType": "protected void"
            },
            {
                "name": "writeLineSeparator()",
                "description": "Writes the line separator.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/text/AbstractWriter.html"
    },
    {
        "name": "AcceptPendingException",
        "constructors": [
            {
                "name": "AcceptPendingException()",
                "description": "Constructs an instance of this class."
            }
        ],
        "methods": [],
        "href": "java/nio/channels/AcceptPendingException.html"
    },
    {
        "name": "AccessControlContext",
        "constructors": [
            {
                "name": "AccessControlContext(AccessControlContext acc,\n                    DomainCombiner combiner)",
                "description": "Create a new AccessControlContext with the given\n AccessControlContext and DomainCombiner."
            },
            {
                "name": "AccessControlContext(ProtectionDomain[] context)",
                "description": "Create an AccessControlContext with the given array of ProtectionDomains."
            }
        ],
        "methods": [
            {
                "name": "checkPermission(Permission perm)",
                "description": "Determines whether the access request indicated by the\n specified permission should be allowed or denied, based on\n the security policy currently in effect, and the context in\n this object.",
                "modAndType": "void"
            },
            {
                "name": "equals(Object obj)",
                "description": "Checks two AccessControlContext objects for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getDomainCombiner()",
                "description": "Get the DomainCombiner associated with this\n AccessControlContext.",
                "modAndType": "DomainCombiner"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this context.",
                "modAndType": "int"
            }
        ],
        "href": "java/security/AccessControlContext.html"
    },
    {
        "name": "AccessControlException",
        "constructors": [
            {
                "name": "AccessControlException(String s)",
                "description": "Constructs an AccessControlException with the\n specified, detailed message."
            },
            {
                "name": "AccessControlException(String s,\n                      Permission p)",
                "description": "Constructs an AccessControlException with the\n specified, detailed message, and the requested permission that caused\n the exception."
            }
        ],
        "methods": [
            {
                "name": "getPermission()",
                "description": "Gets the Permission object associated with this exception, or\n null if there was no corresponding Permission object.",
                "modAndType": "Permission"
            }
        ],
        "href": "java/security/AccessControlException.html"
    },
    {
        "name": "AccessController",
        "constructors": [],
        "methods": [
            {
                "name": "checkPermission(Permission perm)",
                "description": "Determines whether the access request indicated by the\n specified permission should be allowed or denied, based on\n the current AccessControlContext and security policy.",
                "modAndType": "static void"
            },
            {
                "name": "doPrivileged(PrivilegedAction<T> action)",
                "description": "Performs the specified PrivilegedAction with privileges\n enabled.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivileged(PrivilegedAction<T> action,\n            AccessControlContext context)",
                "description": "Performs the specified PrivilegedAction with privileges\n enabled and restricted by the specified AccessControlContext.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivileged(PrivilegedAction<T> action,\n            AccessControlContext context,\n            Permission... perms)",
                "description": "Performs the specified PrivilegedAction with privileges\n enabled and restricted by the specified\n AccessControlContext and with a privilege scope limited\n by specified Permission arguments.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivileged(PrivilegedExceptionAction<T> action)",
                "description": "Performs the specified PrivilegedExceptionAction with\n privileges enabled.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivileged(PrivilegedExceptionAction<T> action,\n            AccessControlContext context)",
                "description": "Performs the specified PrivilegedExceptionAction with\n privileges enabled and restricted by the specified\n AccessControlContext.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivileged(PrivilegedExceptionAction<T> action,\n            AccessControlContext context,\n            Permission... perms)",
                "description": "Performs the specified PrivilegedExceptionAction with\n privileges enabled and restricted by the specified\n AccessControlContext and with a privilege scope limited by\n specified Permission arguments.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivilegedWithCombiner(PrivilegedAction<T> action)",
                "description": "Performs the specified PrivilegedAction with privileges\n enabled.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivilegedWithCombiner(PrivilegedAction<T> action,\n                        AccessControlContext context,\n                        Permission... perms)",
                "description": "Performs the specified PrivilegedAction with privileges\n enabled and restricted by the specified\n AccessControlContext and with a privilege scope limited\n by specified Permission arguments.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action)",
                "description": "Performs the specified PrivilegedExceptionAction with\n privileges enabled.",
                "modAndType": "static <T> T"
            },
            {
                "name": "doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action,\n                        AccessControlContext context,\n                        Permission... perms)",
                "description": "Performs the specified PrivilegedExceptionAction with\n privileges enabled and restricted by the specified\n AccessControlContext and with a privilege scope limited by\n specified Permission arguments.",
                "modAndType": "static <T> T"
            },
            {
                "name": "getContext()",
                "description": "This method takes a \"snapshot\" of the current calling context, which\n includes the current Thread's inherited AccessControlContext and any\n limited privilege scope, and places it in an AccessControlContext object.",
                "modAndType": "static AccessControlContext"
            }
        ],
        "href": "java/security/AccessController.html"
    },
    {
        "name": "AccessDeniedException",
        "constructors": [
            {
                "name": "AccessDeniedException(String file)",
                "description": "Constructs an instance of this class."
            },
            {
                "name": "AccessDeniedException(String file,\n                     String other,\n                     String reason)",
                "description": "Constructs an instance of this class."
            }
        ],
        "methods": [],
        "href": "java/nio/file/AccessDeniedException.html"
    },
    {
        "name": "AccessException",
        "constructors": [
            {
                "name": "AccessException(String s)",
                "description": "Constructs an AccessException with the specified\n detail message."
            },
            {
                "name": "AccessException(String s,\n               Exception ex)",
                "description": "Constructs an AccessException with the specified\n detail message and nested exception."
            }
        ],
        "methods": [],
        "href": "java/rmi/AccessException.html"
    },
    {
        "name": "Accessible",
        "constructors": [],
        "methods": [
            {
                "name": "getAccessibleContext()",
                "description": "Returns the AccessibleContext associated with this object.",
                "modAndType": "AccessibleContext"
            }
        ],
        "href": "javax/accessibility/Accessible.html"
    },
    {
        "name": "AccessibleAction",
        "constructors": [],
        "methods": [
            {
                "name": "doAccessibleAction(int i)",
                "description": "Performs the specified Action on the object",
                "modAndType": "boolean"
            },
            {
                "name": "getAccessibleActionCount()",
                "description": "Returns the number of accessible actions available in this object\n If there are more than one, the first one is considered the \"default\"\n action of the object.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleActionDescription(int i)",
                "description": "Returns a description of the specified action of the object.",
                "modAndType": "String"
            }
        ],
        "href": "javax/accessibility/AccessibleAction.html"
    },
    {
        "name": "AccessibleAttributeSequence",
        "constructors": [
            {
                "name": "AccessibleAttributeSequence(int start,\n                           int end,\n                           AttributeSet attr)",
                "description": "Constructs an AccessibleAttributeSequence with the given\n parameters."
            }
        ],
        "methods": [],
        "href": "javax/accessibility/AccessibleAttributeSequence.html"
    },
    {
        "name": "AccessibleBundle",
        "constructors": [
            {
                "name": "AccessibleBundle()",
                "description": "Construct an AccessibleBundle."
            }
        ],
        "methods": [
            {
                "name": "toDisplayString()",
                "description": "Gets localized string describing the key using the default locale.",
                "modAndType": "String"
            },
            {
                "name": "toDisplayString(Locale locale)",
                "description": "Obtains the key as a localized string.",
                "modAndType": "String"
            },
            {
                "name": "toDisplayString(String resourceBundleName,\n               Locale locale)",
                "description": "Obtains the key as a localized string.",
                "modAndType": "protected String"
            },
            {
                "name": "toString()",
                "description": "Gets localized string describing the key using the default locale.",
                "modAndType": "String"
            }
        ],
        "href": "javax/accessibility/AccessibleBundle.html"
    },
    {
        "name": "AccessibleComponent",
        "constructors": [],
        "methods": [
            {
                "name": "addFocusListener(FocusListener l)",
                "description": "Adds the specified focus listener to receive focus events from this\n component.",
                "modAndType": "void"
            },
            {
                "name": "contains(Point p)",
                "description": "Checks whether the specified point is within this object's bounds,\n where the point's x and y coordinates are defined to be relative to the\n coordinate system of the object.",
                "modAndType": "boolean"
            },
            {
                "name": "getAccessibleAt(Point p)",
                "description": "Returns the Accessible child, if one exists, contained at the local\n coordinate Point.",
                "modAndType": "Accessible"
            },
            {
                "name": "getBackground()",
                "description": "Gets the background color of this object.",
                "modAndType": "Color"
            },
            {
                "name": "getBounds()",
                "description": "Gets the bounds of this object in the form of a Rectangle object.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getCursor()",
                "description": "Gets the Cursor of this object.",
                "modAndType": "Cursor"
            },
            {
                "name": "getFont()",
                "description": "Gets the Font of this object.",
                "modAndType": "Font"
            },
            {
                "name": "getFontMetrics(Font f)",
                "description": "Gets the FontMetrics of this object.",
                "modAndType": "FontMetrics"
            },
            {
                "name": "getForeground()",
                "description": "Gets the foreground color of this object.",
                "modAndType": "Color"
            },
            {
                "name": "getLocation()",
                "description": "Gets the location of the object relative to the parent in the form\n of a point specifying the object's top-left corner in the screen's\n coordinate space.",
                "modAndType": "Point"
            },
            {
                "name": "getLocationOnScreen()",
                "description": "Returns the location of the object on the screen.",
                "modAndType": "Point"
            },
            {
                "name": "getSize()",
                "description": "Returns the size of this object in the form of a Dimension object.",
                "modAndType": "Dimension"
            },
            {
                "name": "isEnabled()",
                "description": "Determines if the object is enabled.",
                "modAndType": "boolean"
            },
            {
                "name": "isFocusTraversable()",
                "description": "Returns whether this object can accept focus or not.",
                "modAndType": "boolean"
            },
            {
                "name": "isShowing()",
                "description": "Determines if the object is showing.",
                "modAndType": "boolean"
            },
            {
                "name": "isVisible()",
                "description": "Determines if the object is visible.",
                "modAndType": "boolean"
            },
            {
                "name": "removeFocusListener(FocusListener l)",
                "description": "Removes the specified focus listener so it no longer receives focus\n events from this component.",
                "modAndType": "void"
            },
            {
                "name": "requestFocus()",
                "description": "Requests focus for this object.",
                "modAndType": "void"
            },
            {
                "name": "setBackground(Color c)",
                "description": "Sets the background color of this object.",
                "modAndType": "void"
            },
            {
                "name": "setBounds(Rectangle r)",
                "description": "Sets the bounds of this object in the form of a Rectangle object.",
                "modAndType": "void"
            },
            {
                "name": "setCursor(Cursor cursor)",
                "description": "Sets the Cursor of this object.",
                "modAndType": "void"
            },
            {
                "name": "setEnabled(boolean b)",
                "description": "Sets the enabled state of the object.",
                "modAndType": "void"
            },
            {
                "name": "setFont(Font f)",
                "description": "Sets the Font of this object.",
                "modAndType": "void"
            },
            {
                "name": "setForeground(Color c)",
                "description": "Sets the foreground color of this object.",
                "modAndType": "void"
            },
            {
                "name": "setLocation(Point p)",
                "description": "Sets the location of the object relative to the parent.",
                "modAndType": "void"
            },
            {
                "name": "setSize(Dimension d)",
                "description": "Resizes this object so that it has width and height.",
                "modAndType": "void"
            },
            {
                "name": "setVisible(boolean b)",
                "description": "Sets the visible state of the object.",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleComponent.html"
    },
    {
        "name": "AccessibleContext",
        "constructors": [
            {
                "name": "AccessibleContext()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addPropertyChangeListener(PropertyChangeListener listener)",
                "description": "Adds a PropertyChangeListener to the listener list.",
                "modAndType": "void"
            },
            {
                "name": "firePropertyChange(String propertyName,\n                  Object oldValue,\n                  Object newValue)",
                "description": "Support for reporting bound property changes.",
                "modAndType": "void"
            },
            {
                "name": "getAccessibleAction()",
                "description": "Gets the AccessibleAction associated with this object that supports\n one or more actions.",
                "modAndType": "AccessibleAction"
            },
            {
                "name": "getAccessibleChild(int i)",
                "description": "Returns the specified Accessible child of the object.",
                "modAndType": "abstract Accessible"
            },
            {
                "name": "getAccessibleChildrenCount()",
                "description": "Returns the number of accessible children of the object.",
                "modAndType": "abstract int"
            },
            {
                "name": "getAccessibleComponent()",
                "description": "Gets the AccessibleComponent associated with this object that has a\n graphical representation.",
                "modAndType": "AccessibleComponent"
            },
            {
                "name": "getAccessibleDescription()",
                "description": "Gets the accessibleDescription property of this object.",
                "modAndType": "String"
            },
            {
                "name": "getAccessibleEditableText()",
                "description": "Gets the AccessibleEditableText associated with this object\n presenting editable text on the display.",
                "modAndType": "AccessibleEditableText"
            },
            {
                "name": "getAccessibleIcon()",
                "description": "Gets the AccessibleIcons associated with an object that has\n one or more associated icons",
                "modAndType": "AccessibleIcon[]"
            },
            {
                "name": "getAccessibleIndexInParent()",
                "description": "Gets the 0-based index of this object in its accessible parent.",
                "modAndType": "abstract int"
            },
            {
                "name": "getAccessibleName()",
                "description": "Gets the accessibleName property of this object.",
                "modAndType": "String"
            },
            {
                "name": "getAccessibleParent()",
                "description": "Gets the Accessible parent of this object.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleRelationSet()",
                "description": "Gets the AccessibleRelationSet associated with an object",
                "modAndType": "AccessibleRelationSet"
            },
            {
                "name": "getAccessibleRole()",
                "description": "Gets the role of this object.",
                "modAndType": "abstract AccessibleRole"
            },
            {
                "name": "getAccessibleSelection()",
                "description": "Gets the AccessibleSelection associated with this object which allows its\n Accessible children to be selected.",
                "modAndType": "AccessibleSelection"
            },
            {
                "name": "getAccessibleStateSet()",
                "description": "Gets the state set of this object.",
                "modAndType": "abstract AccessibleStateSet"
            },
            {
                "name": "getAccessibleTable()",
                "description": "Gets the AccessibleTable associated with an object",
                "modAndType": "AccessibleTable"
            },
            {
                "name": "getAccessibleText()",
                "description": "Gets the AccessibleText associated with this object presenting\n text on the display.",
                "modAndType": "AccessibleText"
            },
            {
                "name": "getAccessibleValue()",
                "description": "Gets the AccessibleValue associated with this object that supports a\n Numerical value.",
                "modAndType": "AccessibleValue"
            },
            {
                "name": "getLocale()",
                "description": "Gets the locale of the component.",
                "modAndType": "abstract Locale"
            },
            {
                "name": "removePropertyChangeListener(PropertyChangeListener listener)",
                "description": "Removes a PropertyChangeListener from the listener list.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleDescription(String s)",
                "description": "Sets the accessible description of this object.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleName(String s)",
                "description": "Sets the localized accessible name of this object.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleParent(Accessible a)",
                "description": "Sets the Accessible parent of this object.",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleContext.html"
    },
    {
        "name": "AccessibleEditableText",
        "constructors": [],
        "methods": [
            {
                "name": "cut(int startIndex,\n   int endIndex)",
                "description": "Cuts the text between two indices into the system clipboard.",
                "modAndType": "void"
            },
            {
                "name": "delete(int startIndex,\n      int endIndex)",
                "description": "Deletes the text between two indices",
                "modAndType": "void"
            },
            {
                "name": "getTextRange(int startIndex,\n            int endIndex)",
                "description": "Returns the text string between two indices.",
                "modAndType": "String"
            },
            {
                "name": "insertTextAtIndex(int index,\n                 String s)",
                "description": "Inserts the specified string at the given index/",
                "modAndType": "void"
            },
            {
                "name": "paste(int startIndex)",
                "description": "Pastes the text from the system clipboard into the text\n starting at the specified index.",
                "modAndType": "void"
            },
            {
                "name": "replaceText(int startIndex,\n           int endIndex,\n           String s)",
                "description": "Replaces the text between two indices with the specified\n string.",
                "modAndType": "void"
            },
            {
                "name": "selectText(int startIndex,\n          int endIndex)",
                "description": "Selects the text between two indices.",
                "modAndType": "void"
            },
            {
                "name": "setAttributes(int startIndex,\n             int endIndex,\n             AttributeSet as)",
                "description": "Sets attributes for the text between two indices.",
                "modAndType": "void"
            },
            {
                "name": "setTextContents(String s)",
                "description": "Sets the text contents to the specified string.",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleEditableText.html"
    },
    {
        "name": "AccessibleExtendedComponent",
        "constructors": [],
        "methods": [
            {
                "name": "getAccessibleKeyBinding()",
                "description": "Returns key bindings associated with this object",
                "modAndType": "AccessibleKeyBinding"
            },
            {
                "name": "getTitledBorderText()",
                "description": "Returns the titled border text",
                "modAndType": "String"
            },
            {
                "name": "getToolTipText()",
                "description": "Returns the tool tip text",
                "modAndType": "String"
            }
        ],
        "href": "javax/accessibility/AccessibleExtendedComponent.html"
    },
    {
        "name": "AccessibleExtendedTable",
        "constructors": [],
        "methods": [
            {
                "name": "getAccessibleColumn(int index)",
                "description": "Returns the column number of an index in the table.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleIndex(int r,\n                  int c)",
                "description": "Returns the index at a row and column in the table.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleRow(int index)",
                "description": "Returns the row number of an index in the table.",
                "modAndType": "int"
            }
        ],
        "href": "javax/accessibility/AccessibleExtendedTable.html"
    },
    {
        "name": "AccessibleExtendedText",
        "constructors": [],
        "methods": [
            {
                "name": "getTextBounds(int startIndex,\n             int endIndex)",
                "description": "Returns the bounding rectangle of the text between two indices.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getTextRange(int startIndex,\n            int endIndex)",
                "description": "Returns the text between two indices",
                "modAndType": "String"
            },
            {
                "name": "getTextSequenceAfter(int part,\n                    int index)",
                "description": "Returns the AccessibleTextSequence after a given index.",
                "modAndType": "AccessibleTextSequence"
            },
            {
                "name": "getTextSequenceAt(int part,\n                 int index)",
                "description": "Returns the AccessibleTextSequence at a given index.",
                "modAndType": "AccessibleTextSequence"
            },
            {
                "name": "getTextSequenceBefore(int part,\n                     int index)",
                "description": "Returns the AccessibleTextSequence before a given index.",
                "modAndType": "AccessibleTextSequence"
            }
        ],
        "href": "javax/accessibility/AccessibleExtendedText.html"
    },
    {
        "name": "AccessibleHyperlink",
        "constructors": [
            {
                "name": "AccessibleHyperlink()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "doAccessibleAction(int i)",
                "description": "Performs the specified Action on the object",
                "modAndType": "abstract boolean"
            },
            {
                "name": "getAccessibleActionAnchor(int i)",
                "description": "Returns an object that represents the link anchor,\n as appropriate for that link.",
                "modAndType": "abstract Object"
            },
            {
                "name": "getAccessibleActionCount()",
                "description": "Returns the number of accessible actions available in this Link\n If there are more than one, the first one is NOT considered the\n \"default\" action of this LINK object (e.g.",
                "modAndType": "abstract int"
            },
            {
                "name": "getAccessibleActionDescription(int i)",
                "description": "Returns a String description of this particular\n link action.",
                "modAndType": "abstract String"
            },
            {
                "name": "getAccessibleActionObject(int i)",
                "description": "Returns an object that represents the link action,\n as appropriate for that link.",
                "modAndType": "abstract Object"
            },
            {
                "name": "getEndIndex()",
                "description": "Gets the index with the hypertext document at which this\n link ends",
                "modAndType": "abstract int"
            },
            {
                "name": "getStartIndex()",
                "description": "Gets the index with the hypertext document at which this\n link begins",
                "modAndType": "abstract int"
            },
            {
                "name": "isValid()",
                "description": "Since the document a link is associated with may have\n changed, this method returns whether or not this Link is still valid\n (with respect to the document it references).",
                "modAndType": "abstract boolean"
            }
        ],
        "href": "javax/accessibility/AccessibleHyperlink.html"
    },
    {
        "name": "AccessibleHypertext",
        "constructors": [],
        "methods": [
            {
                "name": "getLink(int linkIndex)",
                "description": "Returns the nth Link of this Hypertext document.",
                "modAndType": "AccessibleHyperlink"
            },
            {
                "name": "getLinkCount()",
                "description": "Returns the number of links within this hypertext document.",
                "modAndType": "int"
            },
            {
                "name": "getLinkIndex(int charIndex)",
                "description": "Returns the index into an array of hyperlinks that\n is associated with this character index, or -1 if there\n is no hyperlink associated with this index.",
                "modAndType": "int"
            }
        ],
        "href": "javax/accessibility/AccessibleHypertext.html"
    },
    {
        "name": "AccessibleIcon",
        "constructors": [],
        "methods": [
            {
                "name": "getAccessibleIconDescription()",
                "description": "Gets the description of the icon.",
                "modAndType": "String"
            },
            {
                "name": "getAccessibleIconHeight()",
                "description": "Gets the height of the icon",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleIconWidth()",
                "description": "Gets the width of the icon",
                "modAndType": "int"
            },
            {
                "name": "setAccessibleIconDescription(String description)",
                "description": "Sets the description of the icon.",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleIcon.html"
    },
    {
        "name": "AccessibleKeyBinding",
        "constructors": [],
        "methods": [
            {
                "name": "getAccessibleKeyBinding(int i)",
                "description": "Returns a key binding for this object.",
                "modAndType": "Object"
            },
            {
                "name": "getAccessibleKeyBindingCount()",
                "description": "Returns the number of key bindings for this object",
                "modAndType": "int"
            }
        ],
        "href": "javax/accessibility/AccessibleKeyBinding.html"
    },
    {
        "name": "AccessibleObject",
        "constructors": [
            {
                "name": "protected AccessibleObject()",
                "description": "Constructor: only used by the Java Virtual Machine."
            }
        ],
        "methods": [
            {
                "name": "getAnnotation(Class<T> annotationClass)",
                "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null.",
                "modAndType": "<T extends Annotation>T"
            },
            {
                "name": "getAnnotations()",
                "description": "Returns annotations that are present on this element.",
                "modAndType": "Annotation[]"
            },
            {
                "name": "getAnnotationsByType(Class<T> annotationClass)",
                "description": "Returns annotations that are associated with this element.",
                "modAndType": "<T extends Annotation>T[]"
            },
            {
                "name": "getDeclaredAnnotation(Class<T> annotationClass)",
                "description": "Returns this element's annotation for the specified type if\n such an annotation is directly present, else null.",
                "modAndType": "<T extends Annotation>T"
            },
            {
                "name": "getDeclaredAnnotations()",
                "description": "Returns annotations that are directly present on this element.",
                "modAndType": "Annotation[]"
            },
            {
                "name": "getDeclaredAnnotationsByType(Class<T> annotationClass)",
                "description": "Returns this element's annotation(s) for the specified type if\n such annotations are either directly present or\n indirectly present.",
                "modAndType": "<T extends Annotation>T[]"
            },
            {
                "name": "isAccessible()",
                "description": "Get the value of the accessible flag for this object.",
                "modAndType": "boolean"
            },
            {
                "name": "isAnnotationPresent(Class<? extends Annotation> annotationClass)",
                "description": "Returns true if an annotation for the specified type\n is present on this element, else false.",
                "modAndType": "boolean"
            },
            {
                "name": "setAccessible(AccessibleObject[] array,\n             boolean flag)",
                "description": "Convenience method to set the accessible flag for an\n array of objects with a single security check (for efficiency).",
                "modAndType": "static void"
            },
            {
                "name": "setAccessible(boolean flag)",
                "description": "Set the accessible flag for this object to\n the indicated boolean value.",
                "modAndType": "void"
            }
        ],
        "href": "java/lang/reflect/AccessibleObject.html"
    },
    {
        "name": "AccessibleRelation",
        "constructors": [
            {
                "name": "AccessibleRelation(String key)",
                "description": "Create a new AccessibleRelation using the given locale independent key."
            },
            {
                "name": "AccessibleRelation(String key,\n                  Object target)",
                "description": "Creates a new AccessibleRelation using the given locale independent key."
            },
            {
                "name": "AccessibleRelation(String key,\n                  Object[] target)",
                "description": "Creates a new AccessibleRelation using the given locale independent key."
            }
        ],
        "methods": [
            {
                "name": "getKey()",
                "description": "Returns the key for this relation",
                "modAndType": "String"
            },
            {
                "name": "getTarget()",
                "description": "Returns the target objects for this relation",
                "modAndType": "Object[]"
            },
            {
                "name": "setTarget(Object target)",
                "description": "Sets the target object for this relation",
                "modAndType": "void"
            },
            {
                "name": "setTarget(Object[] target)",
                "description": "Sets the target objects for this relation",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleRelation.html"
    },
    {
        "name": "AccessibleRelationSet",
        "constructors": [
            {
                "name": "AccessibleRelationSet()",
                "description": "Creates a new empty relation set."
            },
            {
                "name": "AccessibleRelationSet(AccessibleRelation[] relations)",
                "description": "Creates a new relation with the initial set of relations contained in\n the array of relations passed in."
            }
        ],
        "methods": [
            {
                "name": "add(AccessibleRelation relation)",
                "description": "Adds a new relation to the current relation set.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(AccessibleRelation[] relations)",
                "description": "Adds all of the relations to the existing relation set.",
                "modAndType": "void"
            },
            {
                "name": "clear()",
                "description": "Removes all the relations from the current relation set.",
                "modAndType": "void"
            },
            {
                "name": "contains(String key)",
                "description": "Returns whether the relation set contains a relation\n that matches the specified key.",
                "modAndType": "boolean"
            },
            {
                "name": "get(String key)",
                "description": "Returns the relation that matches the specified key.",
                "modAndType": "AccessibleRelation"
            },
            {
                "name": "remove(AccessibleRelation relation)",
                "description": "Removes a relation from the current relation set.",
                "modAndType": "boolean"
            },
            {
                "name": "size()",
                "description": "Returns the number of relations in the relation set.",
                "modAndType": "int"
            },
            {
                "name": "toArray()",
                "description": "Returns the current relation set as an array of AccessibleRelation",
                "modAndType": "AccessibleRelation[]"
            },
            {
                "name": "toString()",
                "description": "Creates a localized String representing all the relations in the set\n using the default locale.",
                "modAndType": "String"
            }
        ],
        "href": "javax/accessibility/AccessibleRelationSet.html"
    },
    {
        "name": "AccessibleResourceBundle",
        "constructors": [
            {
                "name": "AccessibleResourceBundle()",
                "description": "Deprecated. "
            }
        ],
        "methods": [
            {
                "name": "getContents()",
                "description": "Deprecated. Returns the mapping between the programmatic keys and the\n localized display strings.",
                "modAndType": "Object[][]"
            }
        ],
        "href": "javax/accessibility/AccessibleResourceBundle.html"
    },
    {
        "name": "AccessibleRole",
        "constructors": [
            {
                "name": "protected AccessibleRole(String key)",
                "description": "Creates a new AccessibleRole using the given locale independent key."
            }
        ],
        "methods": [],
        "href": "javax/accessibility/AccessibleRole.html"
    },
    {
        "name": "AccessibleSelection",
        "constructors": [],
        "methods": [
            {
                "name": "addAccessibleSelection(int i)",
                "description": "Adds the specified Accessible child of the object to the object's\n selection.",
                "modAndType": "void"
            },
            {
                "name": "clearAccessibleSelection()",
                "description": "Clears the selection in the object, so that no children in the\n object are selected.",
                "modAndType": "void"
            },
            {
                "name": "getAccessibleSelection(int i)",
                "description": "Returns an Accessible representing the specified selected child\n of the object.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleSelectionCount()",
                "description": "Returns the number of Accessible children currently selected.",
                "modAndType": "int"
            },
            {
                "name": "isAccessibleChildSelected(int i)",
                "description": "Determines if the current child of this object is selected.",
                "modAndType": "boolean"
            },
            {
                "name": "removeAccessibleSelection(int i)",
                "description": "Removes the specified child of the object from the object's\n selection.",
                "modAndType": "void"
            },
            {
                "name": "selectAllAccessibleSelection()",
                "description": "Causes every child of the object to be selected\n if the object supports multiple selections.",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleSelection.html"
    },
    {
        "name": "AccessibleState",
        "constructors": [
            {
                "name": "protected AccessibleState(String key)",
                "description": "Creates a new AccessibleState using the given locale independent key."
            }
        ],
        "methods": [],
        "href": "javax/accessibility/AccessibleState.html"
    },
    {
        "name": "AccessibleStateSet",
        "constructors": [
            {
                "name": "AccessibleStateSet()",
                "description": "Creates a new empty state set."
            },
            {
                "name": "AccessibleStateSet(AccessibleState[] states)",
                "description": "Creates a new state with the initial set of states contained in\n the array of states passed in."
            }
        ],
        "methods": [
            {
                "name": "add(AccessibleState state)",
                "description": "Adds a new state to the current state set if it is not already\n present.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(AccessibleState[] states)",
                "description": "Adds all of the states to the existing state set.",
                "modAndType": "void"
            },
            {
                "name": "clear()",
                "description": "Removes all the states from the current state set.",
                "modAndType": "void"
            },
            {
                "name": "contains(AccessibleState state)",
                "description": "Checks if the current state is in the state set.",
                "modAndType": "boolean"
            },
            {
                "name": "remove(AccessibleState state)",
                "description": "Removes a state from the current state set.",
                "modAndType": "boolean"
            },
            {
                "name": "toArray()",
                "description": "Returns the current state set as an array of AccessibleState",
                "modAndType": "AccessibleState[]"
            },
            {
                "name": "toString()",
                "description": "Creates a localized String representing all the states in the set\n using the default locale.",
                "modAndType": "String"
            }
        ],
        "href": "javax/accessibility/AccessibleStateSet.html"
    },
    {
        "name": "AccessibleStreamable",
        "constructors": [],
        "methods": [
            {
                "name": "getMimeTypes()",
                "description": "Returns an array of DataFlavor objects for the MIME types\n this object supports.",
                "modAndType": "DataFlavor[]"
            },
            {
                "name": "getStream(DataFlavor flavor)",
                "description": "Returns an InputStream for a DataFlavor",
                "modAndType": "InputStream"
            }
        ],
        "href": "javax/accessibility/AccessibleStreamable.html"
    },
    {
        "name": "AccessibleTable",
        "constructors": [],
        "methods": [
            {
                "name": "getAccessibleAt(int r,\n               int c)",
                "description": "Returns the Accessible at a specified row and column\n in the table.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleCaption()",
                "description": "Returns the caption for the table.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleColumnCount()",
                "description": "Returns the number of columns in the table.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleColumnDescription(int c)",
                "description": "Returns the description text of the specified column in the table.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleColumnExtentAt(int r,\n                           int c)",
                "description": "Returns the number of columns occupied by the Accessible at\n a specified row and column in the table.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleColumnHeader()",
                "description": "Returns the column headers as an AccessibleTable.",
                "modAndType": "AccessibleTable"
            },
            {
                "name": "getAccessibleRowCount()",
                "description": "Returns the number of rows in the table.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleRowDescription(int r)",
                "description": "Returns the description of the specified row in the table.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleRowExtentAt(int r,\n                        int c)",
                "description": "Returns the number of rows occupied by the Accessible at\n a specified row and column in the table.",
                "modAndType": "int"
            },
            {
                "name": "getAccessibleRowHeader()",
                "description": "Returns the row headers as an AccessibleTable.",
                "modAndType": "AccessibleTable"
            },
            {
                "name": "getAccessibleSummary()",
                "description": "Returns the summary description of the table.",
                "modAndType": "Accessible"
            },
            {
                "name": "getSelectedAccessibleColumns()",
                "description": "Returns the selected columns in a table.",
                "modAndType": "int[]"
            },
            {
                "name": "getSelectedAccessibleRows()",
                "description": "Returns the selected rows in a table.",
                "modAndType": "int[]"
            },
            {
                "name": "isAccessibleColumnSelected(int c)",
                "description": "Returns a boolean value indicating whether the specified column\n is selected.",
                "modAndType": "boolean"
            },
            {
                "name": "isAccessibleRowSelected(int r)",
                "description": "Returns a boolean value indicating whether the specified row\n is selected.",
                "modAndType": "boolean"
            },
            {
                "name": "isAccessibleSelected(int r,\n                    int c)",
                "description": "Returns a boolean value indicating whether the accessible at\n a specified row and column is selected.",
                "modAndType": "boolean"
            },
            {
                "name": "setAccessibleCaption(Accessible a)",
                "description": "Sets the caption for the table.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleColumnDescription(int c,\n                              Accessible a)",
                "description": "Sets the description text of the specified column in the table.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleColumnHeader(AccessibleTable table)",
                "description": "Sets the column headers.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleRowDescription(int r,\n                           Accessible a)",
                "description": "Sets the description text of the specified row of the table.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleRowHeader(AccessibleTable table)",
                "description": "Sets the row headers.",
                "modAndType": "void"
            },
            {
                "name": "setAccessibleSummary(Accessible a)",
                "description": "Sets the summary description of the table",
                "modAndType": "void"
            }
        ],
        "href": "javax/accessibility/AccessibleTable.html"
    },
    {
        "name": "AccessibleTableModelChange",
        "constructors": [],
        "methods": [
            {
                "name": "getFirstColumn()",
                "description": "Returns the first column that changed.",
                "modAndType": "int"
            },
            {
                "name": "getFirstRow()",
                "description": "Returns the first row that changed.",
                "modAndType": "int"
            },
            {
                "name": "getLastColumn()",
                "description": "Returns the last column that changed.",
                "modAndType": "int"
            },
            {
                "name": "getLastRow()",
                "description": "Returns the last row that changed.",
                "modAndType": "int"
            },
            {
                "name": "getType()",
                "description": "Returns the type of event.",
                "modAndType": "int"
            }
        ],
        "href": "javax/accessibility/AccessibleTableModelChange.html"
    },
    {
        "name": "AccessibleText",
        "constructors": [],
        "methods": [
            {
                "name": "getAfterIndex(int part,\n             int index)",
                "description": "Returns the String after a given index.",
                "modAndType": "String"
            },
            {
                "name": "getAtIndex(int part,\n          int index)",
                "description": "Returns the String at a given index.",
                "modAndType": "String"
            },
            {
                "name": "getBeforeIndex(int part,\n              int index)",
                "description": "Returns the String before a given index.",
                "modAndType": "String"
            },
            {
                "name": "getCaretPosition()",
                "description": "Returns the zero-based offset of the caret.",
                "modAndType": "int"
            },
            {
                "name": "getCharacterAttribute(int i)",
                "description": "Returns the AttributeSet for a given character at a given index",
                "modAndType": "AttributeSet"
            },
            {
                "name": "getCharacterBounds(int i)",
                "description": "Determines the bounding box of the character at the given\n index into the string.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getCharCount()",
                "description": "Returns the number of characters (valid indicies)",
                "modAndType": "int"
            },
            {
                "name": "getIndexAtPoint(Point p)",
                "description": "Given a point in local coordinates, return the zero-based index\n of the character under that Point.",
                "modAndType": "int"
            },
            {
                "name": "getSelectedText()",
                "description": "Returns the portion of the text that is selected.",
                "modAndType": "String"
            },
            {
                "name": "getSelectionEnd()",
                "description": "Returns the end offset within the selected text.",
                "modAndType": "int"
            },
            {
                "name": "getSelectionStart()",
                "description": "Returns the start offset within the selected text.",
                "modAndType": "int"
            }
        ],
        "href": "javax/accessibility/AccessibleText.html"
    },
    {
        "name": "AccessibleTextSequence",
        "constructors": [
            {
                "name": "AccessibleTextSequence(int start,\n                      int end,\n                      String txt)",
                "description": "Constructs an AccessibleTextSequence with the given\n parameters."
            }
        ],
        "methods": [],
        "href": "javax/accessibility/AccessibleTextSequence.html"
    },
    {
        "name": "AccessibleValue",
        "constructors": [],
        "methods": [
            {
                "name": "getCurrentAccessibleValue()",
                "description": "Get the value of this object as a Number.",
                "modAndType": "Number"
            },
            {
                "name": "getMaximumAccessibleValue()",
                "description": "Get the maximum value of this object as a Number.",
                "modAndType": "Number"
            },
            {
                "name": "getMinimumAccessibleValue()",
                "description": "Get the minimum value of this object as a Number.",
                "modAndType": "Number"
            },
            {
                "name": "setCurrentAccessibleValue(Number n)",
                "description": "Set the value of this object as a Number.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/accessibility/AccessibleValue.html"
    },
    {
        "name": "AccessMode",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static AccessMode"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static AccessMode[]"
            }
        ],
        "href": "java/nio/file/AccessMode.html"
    },
    {
        "name": "AccountException",
        "constructors": [
            {
                "name": "AccountException()",
                "description": "Constructs a AccountException with no detail message."
            },
            {
                "name": "AccountException(String msg)",
                "description": "Constructs a AccountException with the specified detail message."
            }
        ],
        "methods": [],
        "href": "javax/security/auth/login/AccountException.html"
    },
    {
        "name": "AccountExpiredException",
        "constructors": [
            {
                "name": "AccountExpiredException()",
                "description": "Constructs a AccountExpiredException with no detail message."
            },
            {
                "name": "AccountExpiredException(String msg)",
                "description": "Constructs a AccountExpiredException with the specified detail\n message."
            }
        ],
        "methods": [],
        "href": "javax/security/auth/login/AccountExpiredException.html"
    },
    {
        "name": "AccountLockedException",
        "constructors": [
            {
                "name": "AccountLockedException()",
                "description": "Constructs a AccountLockedException with no detail message."
            },
            {
                "name": "AccountLockedException(String msg)",
                "description": "Constructs a AccountLockedException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "javax/security/auth/login/AccountLockedException.html"
    },
    {
        "name": "AccountNotFoundException",
        "constructors": [
            {
                "name": "AccountNotFoundException()",
                "description": "Constructs a AccountNotFoundException with no detail message."
            },
            {
                "name": "AccountNotFoundException(String msg)",
                "description": "Constructs a AccountNotFoundException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "javax/security/auth/login/AccountNotFoundException.html"
    },
    {
        "name": "Acl",
        "constructors": [],
        "methods": [
            {
                "name": "addEntry(Principal caller,\n        AclEntry entry)",
                "description": "Adds an ACL entry to this ACL.",
                "modAndType": "boolean"
            },
            {
                "name": "checkPermission(Principal principal,\n               Permission permission)",
                "description": "Checks whether or not the specified principal has the specified\n permission.",
                "modAndType": "boolean"
            },
            {
                "name": "entries()",
                "description": "Returns an enumeration of the entries in this ACL.",
                "modAndType": "Enumeration<AclEntry>"
            },
            {
                "name": "getName()",
                "description": "Returns the name of this ACL.",
                "modAndType": "String"
            },
            {
                "name": "getPermissions(Principal user)",
                "description": "Returns an enumeration for the set of allowed permissions for the\n specified principal (representing an entity such as an individual or\n a group).",
                "modAndType": "Enumeration<Permission>"
            },
            {
                "name": "removeEntry(Principal caller,\n           AclEntry entry)",
                "description": "Removes an ACL entry from this ACL.",
                "modAndType": "boolean"
            },
            {
                "name": "setName(Principal caller,\n       String name)",
                "description": "Sets the name of this ACL.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of the\n ACL contents.",
                "modAndType": "String"
            }
        ],
        "href": "java/security/acl/Acl.html"
    },
    {
        "name": "AclEntry",
        "constructors": [],
        "methods": [
            {
                "name": "equals(Object ob)",
                "description": "Compares the specified object with this ACL entry for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "flags()",
                "description": "Returns a copy of the flags component.",
                "modAndType": "Set<AclEntryFlag>"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash-code value for this ACL entry.",
                "modAndType": "int"
            },
            {
                "name": "newBuilder()",
                "description": "Constructs a new builder.",
                "modAndType": "static AclEntry.Builder"
            },
            {
                "name": "newBuilder(AclEntry entry)",
                "description": "Constructs a new builder with the components of an existing ACL entry.",
                "modAndType": "static AclEntry.Builder"
            },
            {
                "name": "permissions()",
                "description": "Returns a copy of the permissions component.",
                "modAndType": "Set<AclEntryPermission>"
            },
            {
                "name": "principal()",
                "description": "Returns the principal component.",
                "modAndType": "UserPrincipal"
            },
            {
                "name": "toString()",
                "description": "Returns the string representation of this ACL entry.",
                "modAndType": "String"
            },
            {
                "name": "type()",
                "description": "Returns the ACL entry type.",
                "modAndType": "AclEntryType"
            }
        ],
        "href": "java/nio/file/attribute/AclEntry.html"
    },
    {
        "name": "AclEntry",
        "constructors": [],
        "methods": [
            {
                "name": "addPermission(Permission permission)",
                "description": "Adds the specified permission to this ACL entry.",
                "modAndType": "boolean"
            },
            {
                "name": "checkPermission(Permission permission)",
                "description": "Checks if the specified permission is part of the\n permission set in this entry.",
                "modAndType": "boolean"
            },
            {
                "name": "clone()",
                "description": "Clones this ACL entry.",
                "modAndType": "Object"
            },
            {
                "name": "getPrincipal()",
                "description": "Returns the principal for which permissions are granted or denied by\n this ACL entry.",
                "modAndType": "Principal"
            },
            {
                "name": "isNegative()",
                "description": "Returns true if this is a negative ACL entry (one denying the\n associated principal the set of permissions in the entry), false\n otherwise.",
                "modAndType": "boolean"
            },
            {
                "name": "permissions()",
                "description": "Returns an enumeration of the permissions in this ACL entry.",
                "modAndType": "Enumeration<Permission>"
            },
            {
                "name": "removePermission(Permission permission)",
                "description": "Removes the specified permission from this ACL entry.",
                "modAndType": "boolean"
            },
            {
                "name": "setNegativePermissions()",
                "description": "Sets this ACL entry to be a negative one.",
                "modAndType": "void"
            },
            {
                "name": "setPrincipal(Principal user)",
                "description": "Specifies the principal for which permissions are granted or denied\n by this ACL entry.",
                "modAndType": "boolean"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of the contents of this ACL entry.",
                "modAndType": "String"
            }
        ],
        "href": "java/security/acl/AclEntry.html"
    },
    {
        "name": "AclEntry.Builder",
        "constructors": [],
        "methods": [
            {
                "name": "build()",
                "description": "Constructs an AclEntry from the components of this builder.",
                "modAndType": "AclEntry"
            },
            {
                "name": "setFlags(AclEntryFlag... flags)",
                "description": "Sets the flags component of this builder.",
                "modAndType": "AclEntry.Builder"
            },
            {
                "name": "setFlags(Set<AclEntryFlag> flags)",
                "description": "Sets the flags component of this builder.",
                "modAndType": "AclEntry.Builder"
            },
            {
                "name": "setPermissions(AclEntryPermission... perms)",
                "description": "Sets the permissions component of this builder.",
                "modAndType": "AclEntry.Builder"
            },
            {
                "name": "setPermissions(Set<AclEntryPermission> perms)",
                "description": "Sets the permissions component of this builder.",
                "modAndType": "AclEntry.Builder"
            },
            {
                "name": "setPrincipal(UserPrincipal who)",
                "description": "Sets the principal component of this builder.",
                "modAndType": "AclEntry.Builder"
            },
            {
                "name": "setType(AclEntryType type)",
                "description": "Sets the type component of this builder.",
                "modAndType": "AclEntry.Builder"
            }
        ],
        "href": "java/nio/file/attribute/AclEntry.Builder.html"
    },
    {
        "name": "AclEntryFlag",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static AclEntryFlag"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static AclEntryFlag[]"
            }
        ],
        "href": "java/nio/file/attribute/AclEntryFlag.html"
    },
    {
        "name": "AclEntryPermission",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static AclEntryPermission"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static AclEntryPermission[]"
            }
        ],
        "href": "java/nio/file/attribute/AclEntryPermission.html"
    },
    {
        "name": "AclEntryType",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static AclEntryType"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static AclEntryType[]"
            }
        ],
        "href": "java/nio/file/attribute/AclEntryType.html"
    },
    {
        "name": "AclFileAttributeView",
        "constructors": [],
        "methods": [
            {
                "name": "getAcl()",
                "description": "Reads the access control list.",
                "modAndType": "List<AclEntry>"
            },
            {
                "name": "name()",
                "description": "Returns the name of the attribute view.",
                "modAndType": "String"
            },
            {
                "name": "setAcl(List<AclEntry> acl)",
                "description": "Updates (replace) the access control list.",
                "modAndType": "void"
            }
        ],
        "href": "java/nio/file/attribute/AclFileAttributeView.html"
    },
    {
        "name": "AclNotFoundException",
        "constructors": [
            {
                "name": "AclNotFoundException()",
                "description": "Constructs an AclNotFoundException."
            }
        ],
        "methods": [],
        "href": "java/security/acl/AclNotFoundException.html"
    },
    {
        "name": "Action",
        "constructors": [],
        "methods": [
            {
                "name": "addPropertyChangeListener(PropertyChangeListener listener)",
                "description": "Adds a PropertyChange listener.",
                "modAndType": "void"
            },
            {
                "name": "getValue(String key)",
                "description": "Gets one of this object's properties\n using the associated key.",
                "modAndType": "Object"
            },
            {
                "name": "isEnabled()",
                "description": "Returns the enabled state of the Action.",
                "modAndType": "boolean"
            },
            {
                "name": "putValue(String key,\n        Object value)",
                "description": "Sets one of this object's properties\n using the associated key.",
                "modAndType": "void"
            },
            {
                "name": "removePropertyChangeListener(PropertyChangeListener listener)",
                "description": "Removes a PropertyChange listener.",
                "modAndType": "void"
            },
            {
                "name": "setEnabled(boolean b)",
                "description": "Sets the enabled state of the Action.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/Action.html"
    },
    {
        "name": "Action",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Action.html"
    },
    {
        "name": "ActionEvent",
        "constructors": [
            {
                "name": "ActionEvent(Object source,\n           int id,\n           String command)",
                "description": "Constructs an ActionEvent object."
            },
            {
                "name": "ActionEvent(Object source,\n           int id,\n           String command,\n           int modifiers)",
                "description": "Constructs an ActionEvent object with modifier keys."
            },
            {
                "name": "ActionEvent(Object source,\n           int id,\n           String command,\n           long when,\n           int modifiers)",
                "description": "Constructs an ActionEvent object with the specified\n modifier keys and timestamp."
            }
        ],
        "methods": [
            {
                "name": "getActionCommand()",
                "description": "Returns the command string associated with this action.",
                "modAndType": "String"
            },
            {
                "name": "getModifiers()",
                "description": "Returns the modifier keys held down during this action event.",
                "modAndType": "int"
            },
            {
                "name": "getWhen()",
                "description": "Returns the timestamp of when this event occurred.",
                "modAndType": "long"
            },
            {
                "name": "paramString()",
                "description": "Returns a parameter string identifying this action event.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/event/ActionEvent.html"
    },
    {
        "name": "ActionListener",
        "constructors": [],
        "methods": [
            {
                "name": "actionPerformed(ActionEvent e)",
                "description": "Invoked when an action occurs.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/event/ActionListener.html"
    },
    {
        "name": "ActionMap",
        "constructors": [
            {
                "name": "ActionMap()",
                "description": "Creates an ActionMap with no parent and no mappings."
            }
        ],
        "methods": [
            {
                "name": "allKeys()",
                "description": "Returns an array of the keys defined in this ActionMap and\n its parent.",
                "modAndType": "Object[]"
            },
            {
                "name": "clear()",
                "description": "Removes all the mappings from this ActionMap.",
                "modAndType": "void"
            },
            {
                "name": "get(Object key)",
                "description": "Returns the binding for key, messaging the\n parent ActionMap if the binding is not locally defined.",
                "modAndType": "Action"
            },
            {
                "name": "getParent()",
                "description": "Returns this ActionMap's parent.",
                "modAndType": "ActionMap"
            },
            {
                "name": "keys()",
                "description": "Returns the Action names that are bound in this ActionMap.",
                "modAndType": "Object[]"
            },
            {
                "name": "put(Object key,\n   Action action)",
                "description": "Adds a binding for key to action.",
                "modAndType": "void"
            },
            {
                "name": "remove(Object key)",
                "description": "Removes the binding for key from this ActionMap.",
                "modAndType": "void"
            },
            {
                "name": "setParent(ActionMap map)",
                "description": "Sets this ActionMap's parent.",
                "modAndType": "void"
            },
            {
                "name": "size()",
                "description": "Returns the number of bindings in this ActionMap.",
                "modAndType": "int"
            }
        ],
        "href": "javax/swing/ActionMap.html"
    },
    {
        "name": "ActionMapUIResource",
        "constructors": [
            {
                "name": "ActionMapUIResource()",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/ActionMapUIResource.html"
    },
    {
        "name": "Activatable",
        "constructors": [
            {
                "name": "protected Activatable(ActivationID id,\n           int port)",
                "description": "Constructor used to activate/export the object on a specified\n port."
            },
            {
                "name": "protected Activatable(ActivationID id,\n           int port,\n           RMIClientSocketFactory csf,\n           RMIServerSocketFactory ssf)",
                "description": "Constructor used to activate/export the object on a specified\n port."
            },
            {
                "name": "protected Activatable(String location,\n           MarshalledObject<?> data,\n           boolean restart,\n           int port)",
                "description": "Constructs an activatable remote object by registering\n an activation descriptor (with the specified location, data, and\n restart mode) for this object, and exporting the object with the\n specified port."
            },
            {
                "name": "protected Activatable(String location,\n           MarshalledObject<?> data,\n           boolean restart,\n           int port,\n           RMIClientSocketFactory csf,\n           RMIServerSocketFactory ssf)",
                "description": "Constructs an activatable remote object by registering\n an activation descriptor (with the specified location, data, and\n restart mode) for this object, and exporting the object with the\n specified port, and specified client and server socket factories."
            }
        ],
        "methods": [
            {
                "name": "exportObject(Remote obj,\n            ActivationID id,\n            int port)",
                "description": "Export the activatable remote object to the RMI runtime to make\n the object available to receive incoming calls.",
                "modAndType": "static Remote"
            },
            {
                "name": "exportObject(Remote obj,\n            ActivationID id,\n            int port,\n            RMIClientSocketFactory csf,\n            RMIServerSocketFactory ssf)",
                "description": "Export the activatable remote object to the RMI runtime to make\n the object available to receive incoming calls.",
                "modAndType": "static Remote"
            },
            {
                "name": "exportObject(Remote obj,\n            String location,\n            MarshalledObject<?> data,\n            boolean restart,\n            int port)",
                "description": "Registers an activation descriptor (with the specified location,\n data, and restart mode) for the specified object, and exports that\n object with the specified port.",
                "modAndType": "static ActivationID"
            },
            {
                "name": "exportObject(Remote obj,\n            String location,\n            MarshalledObject<?> data,\n            boolean restart,\n            int port,\n            RMIClientSocketFactory csf,\n            RMIServerSocketFactory ssf)",
                "description": "Registers an activation descriptor (with the specified location,\n data, and restart mode) for the specified object, and exports that\n object with the specified port, and the specified client and server\n socket factories.",
                "modAndType": "static ActivationID"
            },
            {
                "name": "getID()",
                "description": "Returns the object's activation identifier.",
                "modAndType": "protected ActivationID"
            },
            {
                "name": "inactive(ActivationID id)",
                "description": "Informs the system that the object with the corresponding activation\n id is currently inactive.",
                "modAndType": "static boolean"
            },
            {
                "name": "register(ActivationDesc desc)",
                "description": "Register an object descriptor for an activatable remote\n object so that is can be activated on demand.",
                "modAndType": "static Remote"
            },
            {
                "name": "unexportObject(Remote obj,\n              boolean force)",
                "description": "Remove the remote object, obj, from the RMI runtime.",
                "modAndType": "static boolean"
            },
            {
                "name": "unregister(ActivationID id)",
                "description": "Revokes previous registration for the activation descriptor\n associated with id.",
                "modAndType": "static void"
            }
        ],
        "href": "java/rmi/activation/Activatable.html"
    },
    {
        "name": "ActivateFailedException",
        "constructors": [
            {
                "name": "ActivateFailedException(String s)",
                "description": "Constructs an ActivateFailedException with the specified\n detail message."
            },
            {
                "name": "ActivateFailedException(String s,\n                       Exception ex)",
                "description": "Constructs an ActivateFailedException with the specified\n detail message and nested exception."
            }
        ],
        "methods": [],
        "href": "java/rmi/activation/ActivateFailedException.html"
    },
    {
        "name": "ActivationDataFlavor",
        "constructors": [
            {
                "name": "ActivationDataFlavor(Class representationClass,\n                    String humanPresentableName)",
                "description": "Construct a DataFlavor that represents a MimeType."
            },
            {
                "name": "ActivationDataFlavor(Class representationClass,\n                    String mimeType,\n                    String humanPresentableName)",
                "description": "Construct a DataFlavor that represents an arbitrary\n Java object."
            },
            {
                "name": "ActivationDataFlavor(String mimeType,\n                    String humanPresentableName)",
                "description": "Construct a DataFlavor that represents a MimeType."
            }
        ],
        "methods": [
            {
                "name": "equals(DataFlavor dataFlavor)",
                "description": "Compares the DataFlavor passed in with this DataFlavor; calls\n the isMimeTypeEqual method.",
                "modAndType": "boolean"
            },
            {
                "name": "getHumanPresentableName()",
                "description": "Return the Human Presentable name.",
                "modAndType": "String"
            },
            {
                "name": "getMimeType()",
                "description": "Return the MIME type for this DataFlavor.",
                "modAndType": "String"
            },
            {
                "name": "getRepresentationClass()",
                "description": "Return the representation class.",
                "modAndType": "Class"
            },
            {
                "name": "isMimeTypeEqual(String mimeType)",
                "description": "Is the string representation of the MIME type passed in equivalent\n to the MIME type of this DataFlavor.",
                "modAndType": "boolean"
            },
            {
                "name": "normalizeMimeType(String mimeType)",
                "description": "Deprecated.  ",
                "modAndType": "protected String"
            },
            {
                "name": "normalizeMimeTypeParameter(String parameterName,\n                          String parameterValue)",
                "description": "Deprecated.  ",
                "modAndType": "protected String"
            },
            {
                "name": "setHumanPresentableName(String humanPresentableName)",
                "description": "Set the human presentable name.",
                "modAndType": "void"
            }
        ],
        "href": "javax/activation/ActivationDataFlavor.html"
    },
    {
        "name": "ActivationDesc",
        "constructors": [
            {
                "name": "ActivationDesc(ActivationGroupID groupID,\n              String className,\n              String location,\n              MarshalledObject<?> data)",
                "description": "Constructs an object descriptor for an object whose class name\n is className that can be loaded from the\n code location and whose initialization\n information is data."
            },
            {
                "name": "ActivationDesc(ActivationGroupID groupID,\n              String className,\n              String location,\n              MarshalledObject<?> data,\n              boolean restart)",
                "description": "Constructs an object descriptor for an object whose class name\n is className that can be loaded from the\n code location and whose initialization\n information is data."
            },
            {
                "name": "ActivationDesc(String className,\n              String location,\n              MarshalledObject<?> data)",
                "description": "Constructs an object descriptor for an object whose class name\n is className, that can be loaded from the\n code location and whose initialization\n information is data."
            },
            {
                "name": "ActivationDesc(String className,\n              String location,\n              MarshalledObject<?> data,\n              boolean restart)",
                "description": "Constructs an object descriptor for an object whose class name\n is className, that can be loaded from the\n code location and whose initialization\n information is data."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Compares two activation descriptors for content equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getClassName()",
                "description": "Returns the class name for the object specified by this\n descriptor.",
                "modAndType": "String"
            },
            {
                "name": "getData()",
                "description": "Returns a \"marshalled object\" containing intialization/activation\n data for the object specified by this descriptor.",
                "modAndType": "MarshalledObject<?>"
            },
            {
                "name": "getGroupID()",
                "description": "Returns the group identifier for the object specified by this\n descriptor.",
                "modAndType": "ActivationGroupID"
            },
            {
                "name": "getLocation()",
                "description": "Returns the code location for the object specified by\n this descriptor.",
                "modAndType": "String"
            },
            {
                "name": "getRestartMode()",
                "description": "Returns the \"restart\" mode of the object associated with\n this activation descriptor.",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "Return the same hashCode for similar ActivationDescs.",
                "modAndType": "int"
            }
        ],
        "href": "java/rmi/activation/ActivationDesc.html"
    },
    {
        "name": "ActivationException",
        "constructors": [
            {
                "name": "ActivationException()",
                "description": "Constructs an ActivationException."
            },
            {
                "name": "ActivationException(String s)",
                "description": "Constructs an ActivationException with the specified\n detail message."
            },
            {
                "name": "ActivationException(String s,\n                   Throwable cause)",
                "description": "Constructs an ActivationException with the specified\n detail message and cause."
            }
        ],
        "methods": [
            {
                "name": "getCause()",
                "description": "Returns the cause of this exception.",
                "modAndType": "Throwable"
            },
            {
                "name": "getMessage()",
                "description": "Returns the detail message, including the message from the cause, if\n any, of this exception.",
                "modAndType": "String"
            }
        ],
        "href": "java/rmi/activation/ActivationException.html"
    },
    {
        "name": "ActivationGroup",
        "constructors": [
            {
                "name": "protected ActivationGroup(ActivationGroupID groupID)",
                "description": "Constructs an activation group with the given activation group\n identifier."
            }
        ],
        "methods": [
            {
                "name": "activeObject(ActivationID id,\n            MarshalledObject<? extends Remote> mobj)",
                "description": "This protected method is necessary for subclasses to\n make the activeObject callback to the group's\n monitor.",
                "modAndType": "protected void"
            },
            {
                "name": "activeObject(ActivationID id,\n            Remote obj)",
                "description": "The group's activeObject method is called when an\n object is exported (either by Activatable object\n construction or an explicit call to\n Activatable.exportObject.",
                "modAndType": "abstract void"
            },
            {
                "name": "createGroup(ActivationGroupID id,\n           ActivationGroupDesc desc,\n           long incarnation)",
                "description": "Create and set the activation group for the current VM.",
                "modAndType": "static ActivationGroup"
            },
            {
                "name": "currentGroupID()",
                "description": "Returns the current activation group's identifier.",
                "modAndType": "static ActivationGroupID"
            },
            {
                "name": "getSystem()",
                "description": "Returns the activation system for the VM.",
                "modAndType": "static ActivationSystem"
            },
            {
                "name": "inactiveGroup()",
                "description": "This protected method is necessary for subclasses to\n make the inactiveGroup callback to the group's\n monitor.",
                "modAndType": "protected void"
            },
            {
                "name": "inactiveObject(ActivationID id)",
                "description": "The group's inactiveObject method is called\n indirectly via a call to the Activatable.inactive\n method.",
                "modAndType": "boolean"
            },
            {
                "name": "setSystem(ActivationSystem system)",
                "description": "Set the activation system for the VM.",
                "modAndType": "static void"
            }
        ],
        "href": "java/rmi/activation/ActivationGroup.html"
    },
    {
        "name": "ActivationGroup_Stub",
        "constructors": [
            {
                "name": "ActivationGroup_Stub(RemoteRef ref)",
                "description": "Constructs a stub for the ActivationGroup class."
            }
        ],
        "methods": [
            {
                "name": "newInstance(ActivationID id,\n           ActivationDesc desc)",
                "description": "Stub method for ActivationGroup.newInstance.",
                "modAndType": "MarshalledObject"
            }
        ],
        "href": "java/rmi/activation/ActivationGroup_Stub.html"
    },
    {
        "name": "ActivationGroupDesc",
        "constructors": [
            {
                "name": "ActivationGroupDesc(Properties overrides,\n                   ActivationGroupDesc.CommandEnvironment cmd)",
                "description": "Constructs a group descriptor that uses the system defaults for group\n implementation and code location."
            },
            {
                "name": "ActivationGroupDesc(String className,\n                   String location,\n                   MarshalledObject<?> data,\n                   Properties overrides,\n                   ActivationGroupDesc.CommandEnvironment cmd)",
                "description": "Specifies an alternate group implementation and execution\n environment to be used for the group."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Compares two activation group descriptors for content equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getClassName()",
                "description": "Returns the group's class name (possibly null).",
                "modAndType": "String"
            },
            {
                "name": "getCommandEnvironment()",
                "description": "Returns the group's command-environment control object.",
                "modAndType": "ActivationGroupDesc.CommandEnvironment"
            },
            {
                "name": "getData()",
                "description": "Returns the group's initialization data.",
                "modAndType": "MarshalledObject<?>"
            },
            {
                "name": "getLocation()",
                "description": "Returns the group's code location.",
                "modAndType": "String"
            },
            {
                "name": "getPropertyOverrides()",
                "description": "Returns the group's property-override list.",
                "modAndType": "Properties"
            },
            {
                "name": "hashCode()",
                "description": "Produce identical numbers for similar ActivationGroupDescs.",
                "modAndType": "int"
            }
        ],
        "href": "java/rmi/activation/ActivationGroupDesc.html"
    },
    {
        "name": "ActivationGroupDesc.CommandEnvironment",
        "constructors": [
            {
                "name": "CommandEnvironment(String cmdpath,\n                  String[] argv)",
                "description": "Create a CommandEnvironment with all the necessary\n information."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Compares two command environments for content equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getCommandOptions()",
                "description": "Fetch the configured java command options.",
                "modAndType": "String[]"
            },
            {
                "name": "getCommandPath()",
                "description": "Fetch the configured path-qualified java command name.",
                "modAndType": "String"
            },
            {
                "name": "hashCode()",
                "description": "Return identical values for similar\n CommandEnvironments.",
                "modAndType": "int"
            }
        ],
        "href": "java/rmi/activation/ActivationGroupDesc.CommandEnvironment.html"
    },
    {
        "name": "ActivationGroupID",
        "constructors": [
            {
                "name": "ActivationGroupID(ActivationSystem system)",
                "description": "Constructs a unique group id."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Compares two group identifiers for content equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getSystem()",
                "description": "Returns the group's activation system.",
                "modAndType": "ActivationSystem"
            },
            {
                "name": "hashCode()",
                "description": "Returns a hashcode for the group's identifier.",
                "modAndType": "int"
            }
        ],
        "href": "java/rmi/activation/ActivationGroupID.html"
    },
    {
        "name": "ActivationID",
        "constructors": [
            {
                "name": "ActivationID(Activator activator)",
                "description": "The constructor for ActivationID takes a single\n argument, activator, that specifies a remote reference to the\n activator responsible for activating the object associated with\n this identifier."
            }
        ],
        "methods": [
            {
                "name": "activate(boolean force)",
                "description": "Activate the object for this id.",
                "modAndType": "Remote"
            },
            {
                "name": "equals(Object obj)",
                "description": "Compares two activation ids for content equality.",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "Returns a hashcode for the activation id.",
                "modAndType": "int"
            }
        ],
        "href": "java/rmi/activation/ActivationID.html"
    },
    {
        "name": "ActivationInstantiator",
        "constructors": [],
        "methods": [
            {
                "name": "newInstance(ActivationID id,\n           ActivationDesc desc)",
                "description": "The activator calls an instantiator's newInstance\n method in order to recreate in that group an object with the\n activation identifier, id, and descriptor,\n desc.",
                "modAndType": "MarshalledObject<? extends Remote>"
            }
        ],
        "href": "java/rmi/activation/ActivationInstantiator.html"
    },
    {
        "name": "ActivationMonitor",
        "constructors": [],
        "methods": [
            {
                "name": "activeObject(ActivationID id,\n            MarshalledObject<? extends Remote> obj)",
                "description": "Informs that an object is now active.",
                "modAndType": "void"
            },
            {
                "name": "inactiveGroup(ActivationGroupID id,\n             long incarnation)",
                "description": "Informs that the group is now inactive.",
                "modAndType": "void"
            },
            {
                "name": "inactiveObject(ActivationID id)",
                "description": "An activation group calls its monitor's\n inactiveObject method when an object in its group\n becomes inactive (deactivates).",
                "modAndType": "void"
            }
        ],
        "href": "java/rmi/activation/ActivationMonitor.html"
    },
    {
        "name": "ActivationSystem",
        "constructors": [],
        "methods": [
            {
                "name": "activeGroup(ActivationGroupID id,\n           ActivationInstantiator group,\n           long incarnation)",
                "description": "Callback to inform activation system that group is now\n active.",
                "modAndType": "ActivationMonitor"
            },
            {
                "name": "getActivationDesc(ActivationID id)",
                "description": "Returns the activation descriptor, for the object with the activation\n identifier, id.",
                "modAndType": "ActivationDesc"
            },
            {
                "name": "getActivationGroupDesc(ActivationGroupID id)",
                "description": "Returns the activation group descriptor, for the group\n with the activation group identifier, id.",
                "modAndType": "ActivationGroupDesc"
            },
            {
                "name": "registerGroup(ActivationGroupDesc desc)",
                "description": "Register the activation group.",
                "modAndType": "ActivationGroupID"
            },
            {
                "name": "registerObject(ActivationDesc desc)",
                "description": "The registerObject method is used to register an\n activation descriptor, desc, and obtain an\n activation identifier for a activatable remote object.",
                "modAndType": "ActivationID"
            },
            {
                "name": "setActivationDesc(ActivationID id,\n                 ActivationDesc desc)",
                "description": "Set the activation descriptor, desc for the object with\n the activation identifier, id.",
                "modAndType": "ActivationDesc"
            },
            {
                "name": "setActivationGroupDesc(ActivationGroupID id,\n                      ActivationGroupDesc desc)",
                "description": "Set the activation group descriptor, desc for the object\n with the activation group identifier, id.",
                "modAndType": "ActivationGroupDesc"
            },
            {
                "name": "shutdown()",
                "description": "Shutdown the activation system.",
                "modAndType": "void"
            },
            {
                "name": "unregisterGroup(ActivationGroupID id)",
                "description": "Remove the activation group.",
                "modAndType": "void"
            },
            {
                "name": "unregisterObject(ActivationID id)",
                "description": "Remove the activation id and associated descriptor previously\n registered with the ActivationSystem; the object\n can no longer be activated via the object's activation id.",
                "modAndType": "void"
            }
        ],
        "href": "java/rmi/activation/ActivationSystem.html"
    },
    {
        "name": "Activator",
        "constructors": [],
        "methods": [
            {
                "name": "activate(ActivationID id,\n        boolean force)",
                "description": "Activate the object associated with the activation identifier,\n id.",
                "modAndType": "MarshalledObject<? extends Remote>"
            }
        ],
        "href": "java/rmi/activation/Activator.html"
    },
    {
        "name": "ACTIVE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ACTIVE.html"
    },
    {
        "name": "ActiveEvent",
        "constructors": [],
        "methods": [
            {
                "name": "dispatch()",
                "description": "Dispatch the event to its target, listeners of the events source,\n or do whatever it is this event is supposed to do.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/ActiveEvent.html"
    },
    {
        "name": "ACTIVITY_COMPLETED",
        "constructors": [
            {
                "name": "ACTIVITY_COMPLETED()",
                "description": "Constructs an ACTIVITY_COMPLETED exception with\n minor code set to 0 and CompletionStatus set to COMPLETED_NO."
            },
            {
                "name": "ACTIVITY_COMPLETED(int minorCode,\n                  CompletionStatus completionStatus)",
                "description": "Constructs an ACTIVITY_COMPLETED exception with the\n specified minor code and completion status."
            },
            {
                "name": "ACTIVITY_COMPLETED(String detailMessage)",
                "description": "Constructs an ACTIVITY_COMPLETED exception with the\n specified message."
            },
            {
                "name": "ACTIVITY_COMPLETED(String detailMessage,\n                  int minorCode,\n                  CompletionStatus completionStatus)",
                "description": "Constructs an ACTIVITY_COMPLETED exception with the\n specified message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/ACTIVITY_COMPLETED.html"
    },
    {
        "name": "ACTIVITY_REQUIRED",
        "constructors": [
            {
                "name": "ACTIVITY_REQUIRED()",
                "description": "Constructs an ACTIVITY_REQUIRED exception with\n minor code set to 0 and CompletionStatus set to COMPLETED_NO."
            },
            {
                "name": "ACTIVITY_REQUIRED(int minorCode,\n                 CompletionStatus completionStatus)",
                "description": "Constructs an ACTIVITY_REQUIRED exception with the\n specified minor code and completion status."
            },
            {
                "name": "ACTIVITY_REQUIRED(String detailMessage)",
                "description": "Constructs an ACTIVITY_REQUIRED exception with the\n specified message."
            },
            {
                "name": "ACTIVITY_REQUIRED(String detailMessage,\n                 int minorCode,\n                 CompletionStatus completionStatus)",
                "description": "Constructs an ACTIVITY_REQUIRED exception with the\n specified message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/ACTIVITY_REQUIRED.html"
    },
    {
        "name": "ActivityCompletedException",
        "constructors": [
            {
                "name": "ActivityCompletedException()",
                "description": "Constructs a new instance with null as its detail message."
            },
            {
                "name": "ActivityCompletedException(String message)",
                "description": "Constructs a new instance with the specified detail message."
            },
            {
                "name": "ActivityCompletedException(String message,\n                          Throwable cause)",
                "description": "Constructs a new throwable with the specified detail message and cause."
            },
            {
                "name": "ActivityCompletedException(Throwable cause)",
                "description": "Constructs a new throwable with the specified cause."
            }
        ],
        "methods": [],
        "href": "javax/activity/ActivityCompletedException.html"
    },
    {
        "name": "ActivityRequiredException",
        "constructors": [
            {
                "name": "ActivityRequiredException()",
                "description": "Constructs a new instance with null as its detail message."
            },
            {
                "name": "ActivityRequiredException(String message)",
                "description": "Constructs a new instance with the specified detail message."
            },
            {
                "name": "ActivityRequiredException(String message,\n                         Throwable cause)",
                "description": "Constructs a new throwable with the specified detail message and cause."
            },
            {
                "name": "ActivityRequiredException(Throwable cause)",
                "description": "Constructs a new throwable with the specified cause."
            }
        ],
        "methods": [],
        "href": "javax/activity/ActivityRequiredException.html"
    },
    {
        "name": "AdapterActivator",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/AdapterActivator.html"
    },
    {
        "name": "AdapterActivatorOperations",
        "constructors": [],
        "methods": [
            {
                "name": "unknown_adapter(POA parent,\n               String name)",
                "description": "This operation is invoked when the ORB receives \n a request for an object reference that identifies \n a target POA that does not exist.",
                "modAndType": "boolean"
            }
        ],
        "href": "org/omg/PortableServer/AdapterActivatorOperations.html"
    },
    {
        "name": "AdapterAlreadyExists",
        "constructors": [
            {
                "name": "AdapterAlreadyExists()",
                "description": ""
            },
            {
                "name": "AdapterAlreadyExists(String $reason)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/AdapterAlreadyExists.html"
    },
    {
        "name": "AdapterAlreadyExistsHelper",
        "constructors": [
            {
                "name": "AdapterAlreadyExistsHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static AdapterAlreadyExists"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      AdapterAlreadyExists that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static AdapterAlreadyExists"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     AdapterAlreadyExists value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/PortableServer/POAPackage/AdapterAlreadyExistsHelper.html"
    },
    {
        "name": "AdapterInactive",
        "constructors": [
            {
                "name": "AdapterInactive()",
                "description": ""
            },
            {
                "name": "AdapterInactive(String $reason)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "org/omg/PortableServer/POAManagerPackage/AdapterInactive.html"
    },
    {
        "name": "AdapterInactiveHelper",
        "constructors": [
            {
                "name": "AdapterInactiveHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static AdapterInactive"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      AdapterInactive that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static AdapterInactive"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     AdapterInactive value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/PortableServer/POAManagerPackage/AdapterInactiveHelper.html"
    },
    {
        "name": "AdapterManagerIdHelper",
        "constructors": [
            {
                "name": "AdapterManagerIdHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static int"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      int that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static int"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     int value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/PortableInterceptor/AdapterManagerIdHelper.html"
    },
    {
        "name": "AdapterNameHelper",
        "constructors": [
            {
                "name": "AdapterNameHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static String[]"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      String[] that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static String[]"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     String[] value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/PortableInterceptor/AdapterNameHelper.html"
    },
    {
        "name": "AdapterNonExistent",
        "constructors": [
            {
                "name": "AdapterNonExistent()",
                "description": ""
            },
            {
                "name": "AdapterNonExistent(String $reason)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/AdapterNonExistent.html"
    },
    {
        "name": "AdapterNonExistentHelper",
        "constructors": [
            {
                "name": "AdapterNonExistentHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static AdapterNonExistent"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      AdapterNonExistent that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static AdapterNonExistent"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     AdapterNonExistent value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/PortableServer/POAPackage/AdapterNonExistentHelper.html"
    },
    {
        "name": "AdapterStateHelper",
        "constructors": [
            {
                "name": "AdapterStateHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static short"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      short that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static short"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     short value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/PortableInterceptor/AdapterStateHelper.html"
    },
    {
        "name": "AddressHelper",
        "constructors": [
            {
                "name": "AddressHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      String that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     String value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CosNaming/NamingContextExtPackage/AddressHelper.html"
    },
    {
        "name": "Addressing",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/soap/Addressing.html"
    },
    {
        "name": "AddressingFeature",
        "constructors": [
            {
                "name": "AddressingFeature()",
                "description": "Creates and configures an AddressingFeature with the\n use of addressing requirements."
            },
            {
                "name": "AddressingFeature(boolean enabled)",
                "description": "Creates and configures an AddressingFeature with the\n use of addressing requirements."
            },
            {
                "name": "AddressingFeature(boolean enabled,\n                 boolean required)",
                "description": "Creates and configures an AddressingFeature with the\n use of addressing requirements."
            },
            {
                "name": "AddressingFeature(boolean enabled,\n                 boolean required,\n                 AddressingFeature.Responses responses)",
                "description": "Creates and configures an AddressingFeature with the\n use of addressing requirements."
            }
        ],
        "methods": [
            {
                "name": "getID()",
                "description": "Get the unique identifier for this WebServiceFeature.",
                "modAndType": "String"
            },
            {
                "name": "getResponses()",
                "description": "If addressing is enabled, this property determines whether endpoint\n requires the use of anonymous responses, or non-anonymous responses,\n or all responses.",
                "modAndType": "AddressingFeature.Responses"
            },
            {
                "name": "isRequired()",
                "description": "If addressing is enabled, this property determines whether the endpoint\n requires WS-Addressing.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/xml/ws/soap/AddressingFeature.html"
    },
    {
        "name": "AddressingFeature.Responses",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static AddressingFeature.Responses"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static AddressingFeature.Responses[]"
            }
        ],
        "href": "javax/xml/ws/soap/AddressingFeature.Responses.html"
    },
    {
        "name": "Adjustable",
        "constructors": [],
        "methods": [
            {
                "name": "addAdjustmentListener(AdjustmentListener l)",
                "description": "Adds a listener to receive adjustment events when the value of\n the adjustable object changes.",
                "modAndType": "void"
            },
            {
                "name": "getBlockIncrement()",
                "description": "Gets the block value increment for the adjustable object.",
                "modAndType": "int"
            },
            {
                "name": "getMaximum()",
                "description": "Gets the maximum value of the adjustable object.",
                "modAndType": "int"
            },
            {
                "name": "getMinimum()",
                "description": "Gets the minimum value of the adjustable object.",
                "modAndType": "int"
            },
            {
                "name": "getOrientation()",
                "description": "Gets the orientation of the adjustable object.",
                "modAndType": "int"
            },
            {
                "name": "getUnitIncrement()",
                "description": "Gets the unit value increment for the adjustable object.",
                "modAndType": "int"
            },
            {
                "name": "getValue()",
                "description": "Gets the current value of the adjustable object.",
                "modAndType": "int"
            },
            {
                "name": "getVisibleAmount()",
                "description": "Gets the length of the proportional indicator.",
                "modAndType": "int"
            },
            {
                "name": "removeAdjustmentListener(AdjustmentListener l)",
                "description": "Removes an adjustment listener.",
                "modAndType": "void"
            },
            {
                "name": "setBlockIncrement(int b)",
                "description": "Sets the block value increment for the adjustable object.",
                "modAndType": "void"
            },
            {
                "name": "setMaximum(int max)",
                "description": "Sets the maximum value of the adjustable object.",
                "modAndType": "void"
            },
            {
                "name": "setMinimum(int min)",
                "description": "Sets the minimum value of the adjustable object.",
                "modAndType": "void"
            },
            {
                "name": "setUnitIncrement(int u)",
                "description": "Sets the unit value increment for the adjustable object.",
                "modAndType": "void"
            },
            {
                "name": "setValue(int v)",
                "description": "Sets the current value of the adjustable object.",
                "modAndType": "void"
            },
            {
                "name": "setVisibleAmount(int v)",
                "description": "Sets the length of the proportional indicator of the\n adjustable object.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/Adjustable.html"
    },
    {
        "name": "AdjustmentEvent",
        "constructors": [
            {
                "name": "AdjustmentEvent(Adjustable source,\n               int id,\n               int type,\n               int value)",
                "description": "Constructs an AdjustmentEvent object with the\n specified Adjustable source, event type,\n adjustment type, and value."
            },
            {
                "name": "AdjustmentEvent(Adjustable source,\n               int id,\n               int type,\n               int value,\n               boolean isAdjusting)",
                "description": "Constructs an AdjustmentEvent object with the\n specified Adjustable source, event type, adjustment type, and value."
            }
        ],
        "methods": [
            {
                "name": "getAdjustable()",
                "description": "Returns the Adjustable object where this event originated.",
                "modAndType": "Adjustable"
            },
            {
                "name": "getAdjustmentType()",
                "description": "Returns the type of adjustment which caused the value changed\n event.",
                "modAndType": "int"
            },
            {
                "name": "getValue()",
                "description": "Returns the current value in the adjustment event.",
                "modAndType": "int"
            },
            {
                "name": "getValueIsAdjusting()",
                "description": "Returns true if this is one of multiple\n adjustment events.",
                "modAndType": "boolean"
            },
            {
                "name": "paramString()",
                "description": "Returns a string representing the state of this Event.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/event/AdjustmentEvent.html"
    },
    {
        "name": "AdjustmentListener",
        "constructors": [],
        "methods": [
            {
                "name": "adjustmentValueChanged(AdjustmentEvent e)",
                "description": "Invoked when the value of the adjustable has changed.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/event/AdjustmentListener.html"
    },
    {
        "name": "Adler32",
        "constructors": [
            {
                "name": "Adler32()",
                "description": "Creates a new Adler32 object."
            }
        ],
        "methods": [
            {
                "name": "getValue()",
                "description": "Returns the checksum value.",
                "modAndType": "long"
            },
            {
                "name": "reset()",
                "description": "Resets the checksum to initial value.",
                "modAndType": "void"
            },
            {
                "name": "update(byte[] b)",
                "description": "Updates the checksum with the specified array of bytes.",
                "modAndType": "void"
            },
            {
                "name": "update(byte[] b,\n      int off,\n      int len)",
                "description": "Updates the checksum with the specified array of bytes.",
                "modAndType": "void"
            },
            {
                "name": "update(ByteBuffer buffer)",
                "description": "Updates the checksum with the bytes from the specified buffer.",
                "modAndType": "void"
            },
            {
                "name": "update(int b)",
                "description": "Updates the checksum with the specified byte (the low eight\n bits of the argument b).",
                "modAndType": "void"
            }
        ],
        "href": "java/util/zip/Adler32.html"
    },
    {
        "name": "AEADBadTagException",
        "constructors": [
            {
                "name": "AEADBadTagException()",
                "description": "Constructs a AEADBadTagException with no detail message."
            },
            {
                "name": "AEADBadTagException(String msg)",
                "description": "Constructs a AEADBadTagException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "javax/crypto/AEADBadTagException.html"
    },
    {
        "name": "AffineTransform",
        "constructors": [
            {
                "name": "AffineTransform()",
                "description": "Constructs a new AffineTransform representing the\n Identity transformation."
            },
            {
                "name": "AffineTransform(AffineTransform Tx)",
                "description": "Constructs a new AffineTransform that is a copy of\n the specified AffineTransform object."
            },
            {
                "name": "AffineTransform(double[] flatmatrix)",
                "description": "Constructs a new AffineTransform from an array of\n double precision values representing either the 4 non-translation\n entries or the 6 specifiable entries of the 3x3 transformation\n matrix."
            },
            {
                "name": "AffineTransform(double m00,\n               double m10,\n               double m01,\n               double m11,\n               double m02,\n               double m12)",
                "description": "Constructs a new AffineTransform from 6 double\n precision values representing the 6 specifiable entries of the 3x3\n transformation matrix."
            },
            {
                "name": "AffineTransform(float[] flatmatrix)",
                "description": "Constructs a new AffineTransform from an array of\n floating point values representing either the 4 non-translation\n entries or the 6 specifiable entries of the 3x3 transformation\n matrix."
            },
            {
                "name": "AffineTransform(float m00,\n               float m10,\n               float m01,\n               float m11,\n               float m02,\n               float m12)",
                "description": "Constructs a new AffineTransform from 6 floating point\n values representing the 6 specifiable entries of the 3x3\n transformation matrix."
            }
        ],
        "methods": [
            {
                "name": "clone()",
                "description": "Returns a copy of this AffineTransform object.",
                "modAndType": "Object"
            },
            {
                "name": "concatenate(AffineTransform Tx)",
                "description": "Concatenates an AffineTransform Tx to\n this AffineTransform Cx in the most commonly useful\n way to provide a new user space\n that is mapped to the former user space by Tx.",
                "modAndType": "void"
            },
            {
                "name": "createInverse()",
                "description": "Returns an AffineTransform object representing the\n inverse transformation.",
                "modAndType": "AffineTransform"
            },
            {
                "name": "createTransformedShape(Shape pSrc)",
                "description": "Returns a new Shape object defined by the geometry of the\n specified Shape after it has been transformed by\n this transform.",
                "modAndType": "Shape"
            },
            {
                "name": "deltaTransform(double[] srcPts,\n              int srcOff,\n              double[] dstPts,\n              int dstOff,\n              int numPts)",
                "description": "Transforms an array of relative distance vectors by this\n transform.",
                "modAndType": "void"
            },
            {
                "name": "deltaTransform(Point2D ptSrc,\n              Point2D ptDst)",
                "description": "Transforms the relative distance vector specified by\n ptSrc and stores the result in ptDst.",
                "modAndType": "Point2D"
            },
            {
                "name": "equals(Object obj)",
                "description": "Returns true if this AffineTransform\n represents the same affine coordinate transform as the specified\n argument.",
                "modAndType": "boolean"
            },
            {
                "name": "getDeterminant()",
                "description": "Returns the determinant of the matrix representation of the transform.",
                "modAndType": "double"
            },
            {
                "name": "getMatrix(double[] flatmatrix)",
                "description": "Retrieves the 6 specifiable values in the 3x3 affine transformation\n matrix and places them into an array of double precisions values.",
                "modAndType": "void"
            },
            {
                "name": "getQuadrantRotateInstance(int numquadrants)",
                "description": "Returns a transform that rotates coordinates by the specified\n number of quadrants.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getQuadrantRotateInstance(int numquadrants,\n                         double anchorx,\n                         double anchory)",
                "description": "Returns a transform that rotates coordinates by the specified\n number of quadrants around the specified anchor point.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getRotateInstance(double theta)",
                "description": "Returns a transform representing a rotation transformation.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getRotateInstance(double vecx,\n                 double vecy)",
                "description": "Returns a transform that rotates coordinates according to\n a rotation vector.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getRotateInstance(double theta,\n                 double anchorx,\n                 double anchory)",
                "description": "Returns a transform that rotates coordinates around an anchor point.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getRotateInstance(double vecx,\n                 double vecy,\n                 double anchorx,\n                 double anchory)",
                "description": "Returns a transform that rotates coordinates around an anchor\n point according to a rotation vector.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getScaleInstance(double sx,\n                double sy)",
                "description": "Returns a transform representing a scaling transformation.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getScaleX()",
                "description": "Returns the X coordinate scaling element (m00) of the 3x3\n affine transformation matrix.",
                "modAndType": "double"
            },
            {
                "name": "getScaleY()",
                "description": "Returns the Y coordinate scaling element (m11) of the 3x3\n affine transformation matrix.",
                "modAndType": "double"
            },
            {
                "name": "getShearInstance(double shx,\n                double shy)",
                "description": "Returns a transform representing a shearing transformation.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getShearX()",
                "description": "Returns the X coordinate shearing element (m01) of the 3x3\n affine transformation matrix.",
                "modAndType": "double"
            },
            {
                "name": "getShearY()",
                "description": "Returns the Y coordinate shearing element (m10) of the 3x3\n affine transformation matrix.",
                "modAndType": "double"
            },
            {
                "name": "getTranslateInstance(double tx,\n                    double ty)",
                "description": "Returns a transform representing a translation transformation.",
                "modAndType": "static AffineTransform"
            },
            {
                "name": "getTranslateX()",
                "description": "Returns the X coordinate of the translation element (m02) of the\n 3x3 affine transformation matrix.",
                "modAndType": "double"
            },
            {
                "name": "getTranslateY()",
                "description": "Returns the Y coordinate of the translation element (m12) of the\n 3x3 affine transformation matrix.",
                "modAndType": "double"
            },
            {
                "name": "getType()",
                "description": "Retrieves the flag bits describing the conversion properties of\n this transform.",
                "modAndType": "int"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hashcode for this transform.",
                "modAndType": "int"
            },
            {
                "name": "inverseTransform(double[] srcPts,\n                int srcOff,\n                double[] dstPts,\n                int dstOff,\n                int numPts)",
                "description": "Inverse transforms an array of double precision coordinates by\n this transform.",
                "modAndType": "void"
            },
            {
                "name": "inverseTransform(Point2D ptSrc,\n                Point2D ptDst)",
                "description": "Inverse transforms the specified ptSrc and stores the\n result in ptDst.",
                "modAndType": "Point2D"
            },
            {
                "name": "invert()",
                "description": "Sets this transform to the inverse of itself.",
                "modAndType": "void"
            },
            {
                "name": "isIdentity()",
                "description": "Returns true if this AffineTransform is\n an identity transform.",
                "modAndType": "boolean"
            },
            {
                "name": "preConcatenate(AffineTransform Tx)",
                "description": "Concatenates an AffineTransform Tx to\n this AffineTransform Cx\n in a less commonly used way such that Tx modifies the\n coordinate transformation relative to the absolute pixel\n space rather than relative to the existing user space.",
                "modAndType": "void"
            },
            {
                "name": "quadrantRotate(int numquadrants)",
                "description": "Concatenates this transform with a transform that rotates\n coordinates by the specified number of quadrants.",
                "modAndType": "void"
            },
            {
                "name": "quadrantRotate(int numquadrants,\n              double anchorx,\n              double anchory)",
                "description": "Concatenates this transform with a transform that rotates\n coordinates by the specified number of quadrants around\n the specified anchor point.",
                "modAndType": "void"
            },
            {
                "name": "rotate(double theta)",
                "description": "Concatenates this transform with a rotation transformation.",
                "modAndType": "void"
            },
            {
                "name": "rotate(double vecx,\n      double vecy)",
                "description": "Concatenates this transform with a transform that rotates\n coordinates according to a rotation vector.",
                "modAndType": "void"
            },
            {
                "name": "rotate(double theta,\n      double anchorx,\n      double anchory)",
                "description": "Concatenates this transform with a transform that rotates\n coordinates around an anchor point.",
                "modAndType": "void"
            },
            {
                "name": "rotate(double vecx,\n      double vecy,\n      double anchorx,\n      double anchory)",
                "description": "Concatenates this transform with a transform that rotates\n coordinates around an anchor point according to a rotation\n vector.",
                "modAndType": "void"
            },
            {
                "name": "scale(double sx,\n     double sy)",
                "description": "Concatenates this transform with a scaling transformation.",
                "modAndType": "void"
            },
            {
                "name": "setToIdentity()",
                "description": "Resets this transform to the Identity transform.",
                "modAndType": "void"
            },
            {
                "name": "setToQuadrantRotation(int numquadrants)",
                "description": "Sets this transform to a rotation transformation that rotates\n coordinates by the specified number of quadrants.",
                "modAndType": "void"
            },
            {
                "name": "setToQuadrantRotation(int numquadrants,\n                     double anchorx,\n                     double anchory)",
                "description": "Sets this transform to a translated rotation transformation\n that rotates coordinates by the specified number of quadrants\n around the specified anchor point.",
                "modAndType": "void"
            },
            {
                "name": "setToRotation(double theta)",
                "description": "Sets this transform to a rotation transformation.",
                "modAndType": "void"
            },
            {
                "name": "setToRotation(double vecx,\n             double vecy)",
                "description": "Sets this transform to a rotation transformation that rotates\n coordinates according to a rotation vector.",
                "modAndType": "void"
            },
            {
                "name": "setToRotation(double theta,\n             double anchorx,\n             double anchory)",
                "description": "Sets this transform to a translated rotation transformation.",
                "modAndType": "void"
            },
            {
                "name": "setToRotation(double vecx,\n             double vecy,\n             double anchorx,\n             double anchory)",
                "description": "Sets this transform to a rotation transformation that rotates\n coordinates around an anchor point according to a rotation\n vector.",
                "modAndType": "void"
            },
            {
                "name": "setToScale(double sx,\n          double sy)",
                "description": "Sets this transform to a scaling transformation.",
                "modAndType": "void"
            },
            {
                "name": "setToShear(double shx,\n          double shy)",
                "description": "Sets this transform to a shearing transformation.",
                "modAndType": "void"
            },
            {
                "name": "setToTranslation(double tx,\n                double ty)",
                "description": "Sets this transform to a translation transformation.",
                "modAndType": "void"
            },
            {
                "name": "setTransform(AffineTransform Tx)",
                "description": "Sets this transform to a copy of the transform in the specified\n AffineTransform object.",
                "modAndType": "void"
            },
            {
                "name": "setTransform(double m00,\n            double m10,\n            double m01,\n            double m11,\n            double m02,\n            double m12)",
                "description": "Sets this transform to the matrix specified by the 6\n double precision values.",
                "modAndType": "void"
            },
            {
                "name": "shear(double shx,\n     double shy)",
                "description": "Concatenates this transform with a shearing transformation.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns a String that represents the value of this\n Object.",
                "modAndType": "String"
            },
            {
                "name": "transform(double[] srcPts,\n         int srcOff,\n         double[] dstPts,\n         int dstOff,\n         int numPts)",
                "description": "Transforms an array of double precision coordinates by this transform.",
                "modAndType": "void"
            },
            {
                "name": "transform(double[] srcPts,\n         int srcOff,\n         float[] dstPts,\n         int dstOff,\n         int numPts)",
                "description": "Transforms an array of double precision coordinates by this transform\n and stores the results into an array of floats.",
                "modAndType": "void"
            },
            {
                "name": "transform(float[] srcPts,\n         int srcOff,\n         double[] dstPts,\n         int dstOff,\n         int numPts)",
                "description": "Transforms an array of floating point coordinates by this transform\n and stores the results into an array of doubles.",
                "modAndType": "void"
            },
            {
                "name": "transform(float[] srcPts,\n         int srcOff,\n         float[] dstPts,\n         int dstOff,\n         int numPts)",
                "description": "Transforms an array of floating point coordinates by this transform.",
                "modAndType": "void"
            },
            {
                "name": "transform(Point2D[] ptSrc,\n         int srcOff,\n         Point2D[] ptDst,\n         int dstOff,\n         int numPts)",
                "description": "Transforms an array of point objects by this transform.",
                "modAndType": "void"
            },
            {
                "name": "transform(Point2D ptSrc,\n         Point2D ptDst)",
                "description": "Transforms the specified ptSrc and stores the result\n in ptDst.",
                "modAndType": "Point2D"
            },
            {
                "name": "translate(double tx,\n         double ty)",
                "description": "Concatenates this transform with a translation transformation.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/geom/AffineTransform.html"
    },
    {
        "name": "AffineTransformOp",
        "constructors": [
            {
                "name": "AffineTransformOp(AffineTransform xform,\n                 int interpolationType)",
                "description": "Constructs an AffineTransformOp given an affine transform\n and the interpolation type."
            },
            {
                "name": "AffineTransformOp(AffineTransform xform,\n                 RenderingHints hints)",
                "description": "Constructs an AffineTransformOp given an affine transform."
            }
        ],
        "methods": [
            {
                "name": "createCompatibleDestImage(BufferedImage src,\n                         ColorModel destCM)",
                "description": "Creates a zeroed destination image with the correct size and number of\n bands.",
                "modAndType": "BufferedImage"
            },
            {
                "name": "createCompatibleDestRaster(Raster src)",
                "description": "Creates a zeroed destination Raster with the correct size\n and number of bands.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "filter(BufferedImage src,\n      BufferedImage dst)",
                "description": "Transforms the source BufferedImage and stores the results\n in the destination BufferedImage.",
                "modAndType": "BufferedImage"
            },
            {
                "name": "filter(Raster src,\n      WritableRaster dst)",
                "description": "Transforms the source Raster and stores the results in\n the destination Raster.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "getBounds2D(BufferedImage src)",
                "description": "Returns the bounding box of the transformed destination.",
                "modAndType": "Rectangle2D"
            },
            {
                "name": "getBounds2D(Raster src)",
                "description": "Returns the bounding box of the transformed destination.",
                "modAndType": "Rectangle2D"
            },
            {
                "name": "getInterpolationType()",
                "description": "Returns the interpolation type used by this op.",
                "modAndType": "int"
            },
            {
                "name": "getPoint2D(Point2D srcPt,\n          Point2D dstPt)",
                "description": "Returns the location of the corresponding destination point given a\n point in the source.",
                "modAndType": "Point2D"
            },
            {
                "name": "getRenderingHints()",
                "description": "Returns the rendering hints used by this transform operation.",
                "modAndType": "RenderingHints"
            },
            {
                "name": "getTransform()",
                "description": "Returns the affine transform used by this transform operation.",
                "modAndType": "AffineTransform"
            }
        ],
        "href": "java/awt/image/AffineTransformOp.html"
    },
    {
        "name": "AlgorithmConstraints",
        "constructors": [],
        "methods": [
            {
                "name": "permits(Set<CryptoPrimitive> primitives,\n       Key key)",
                "description": "Determines whether a key is granted permission for the specified\n cryptographic primitives.",
                "modAndType": "boolean"
            },
            {
                "name": "permits(Set<CryptoPrimitive> primitives,\n       String algorithm,\n       AlgorithmParameters parameters)",
                "description": "Determines whether an algorithm is granted permission for the\n specified cryptographic primitives.",
                "modAndType": "boolean"
            },
            {
                "name": "permits(Set<CryptoPrimitive> primitives,\n       String algorithm,\n       Key key,\n       AlgorithmParameters parameters)",
                "description": "Determines whether an algorithm and the corresponding key are granted\n permission for the specified cryptographic primitives.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/security/AlgorithmConstraints.html"
    },
    {
        "name": "AlgorithmMethod",
        "constructors": [],
        "methods": [
            {
                "name": "getAlgorithm()",
                "description": "Returns the algorithm URI of this AlgorithmMethod.",
                "modAndType": "String"
            },
            {
                "name": "getParameterSpec()",
                "description": "Returns the algorithm parameters of this AlgorithmMethod.",
                "modAndType": "AlgorithmParameterSpec"
            }
        ],
        "href": "javax/xml/crypto/AlgorithmMethod.html"
    },
    {
        "name": "AlgorithmParameterGenerator",
        "constructors": [
            {
                "name": "protected AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi paramGenSpi,\n                           Provider provider,\n                           String algorithm)",
                "description": "Creates an AlgorithmParameterGenerator object."
            }
        ],
        "methods": [
            {
                "name": "generateParameters()",
                "description": "Generates the parameters.",
                "modAndType": "AlgorithmParameters"
            },
            {
                "name": "getAlgorithm()",
                "description": "Returns the standard name of the algorithm this parameter\n generator is associated with.",
                "modAndType": "String"
            },
            {
                "name": "getInstance(String algorithm)",
                "description": "Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.",
                "modAndType": "static AlgorithmParameterGenerator"
            },
            {
                "name": "getInstance(String algorithm,\n           Provider provider)",
                "description": "Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.",
                "modAndType": "static AlgorithmParameterGenerator"
            },
            {
                "name": "getInstance(String algorithm,\n           String provider)",
                "description": "Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.",
                "modAndType": "static AlgorithmParameterGenerator"
            },
            {
                "name": "getProvider()",
                "description": "Returns the provider of this algorithm parameter generator object.",
                "modAndType": "Provider"
            },
            {
                "name": "init(AlgorithmParameterSpec genParamSpec)",
                "description": "Initializes this parameter generator with a set of algorithm-specific\n parameter generation values.",
                "modAndType": "void"
            },
            {
                "name": "init(AlgorithmParameterSpec genParamSpec,\n    SecureRandom random)",
                "description": "Initializes this parameter generator with a set of algorithm-specific\n parameter generation values.",
                "modAndType": "void"
            },
            {
                "name": "init(int size)",
                "description": "Initializes this parameter generator for a certain size.",
                "modAndType": "void"
            },
            {
                "name": "init(int size,\n    SecureRandom random)",
                "description": "Initializes this parameter generator for a certain size and source\n of randomness.",
                "modAndType": "void"
            }
        ],
        "href": "java/security/AlgorithmParameterGenerator.html"
    },
    {
        "name": "AlgorithmParameterGeneratorSpi",
        "constructors": [
            {
                "name": "AlgorithmParameterGeneratorSpi()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "engineGenerateParameters()",
                "description": "Generates the parameters.",
                "modAndType": "protected abstract AlgorithmParameters"
            },
            {
                "name": "engineInit(AlgorithmParameterSpec genParamSpec,\n          SecureRandom random)",
                "description": "Initializes this parameter generator with a set of\n algorithm-specific parameter generation values.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "engineInit(int size,\n          SecureRandom random)",
                "description": "Initializes this parameter generator for a certain size\n and source of randomness.",
                "modAndType": "protected abstract void"
            }
        ],
        "href": "java/security/AlgorithmParameterGeneratorSpi.html"
    },
    {
        "name": "AlgorithmParameters",
        "constructors": [
            {
                "name": "protected AlgorithmParameters(AlgorithmParametersSpi paramSpi,\n                   Provider provider,\n                   String algorithm)",
                "description": "Creates an AlgorithmParameters object."
            }
        ],
        "methods": [
            {
                "name": "getAlgorithm()",
                "description": "Returns the name of the algorithm associated with this parameter object.",
                "modAndType": "String"
            },
            {
                "name": "getEncoded()",
                "description": "Returns the parameters in their primary encoding format.",
                "modAndType": "byte[]"
            },
            {
                "name": "getEncoded(String format)",
                "description": "Returns the parameters encoded in the specified scheme.",
                "modAndType": "byte[]"
            },
            {
                "name": "getInstance(String algorithm)",
                "description": "Returns a parameter object for the specified algorithm.",
                "modAndType": "static AlgorithmParameters"
            },
            {
                "name": "getInstance(String algorithm,\n           Provider provider)",
                "description": "Returns a parameter object for the specified algorithm.",
                "modAndType": "static AlgorithmParameters"
            },
            {
                "name": "getInstance(String algorithm,\n           String provider)",
                "description": "Returns a parameter object for the specified algorithm.",
                "modAndType": "static AlgorithmParameters"
            },
            {
                "name": "getParameterSpec(Class<T> paramSpec)",
                "description": "Returns a (transparent) specification of this parameter object.",
                "modAndType": "<T extends AlgorithmParameterSpec>T"
            },
            {
                "name": "getProvider()",
                "description": "Returns the provider of this parameter object.",
                "modAndType": "Provider"
            },
            {
                "name": "init(AlgorithmParameterSpec paramSpec)",
                "description": "Initializes this parameter object using the parameters\n specified in paramSpec.",
                "modAndType": "void"
            },
            {
                "name": "init(byte[] params)",
                "description": "Imports the specified parameters and decodes them according to the\n primary decoding format for parameters.",
                "modAndType": "void"
            },
            {
                "name": "init(byte[] params,\n    String format)",
                "description": "Imports the parameters from params and decodes them\n according to the specified decoding scheme.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns a formatted string describing the parameters.",
                "modAndType": "String"
            }
        ],
        "href": "java/security/AlgorithmParameters.html"
    },
    {
        "name": "AlgorithmParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/AlgorithmParameterSpec.html"
    },
    {
        "name": "AlgorithmParametersSpi",
        "constructors": [
            {
                "name": "AlgorithmParametersSpi()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "engineGetEncoded()",
                "description": "Returns the parameters in their primary encoding format.",
                "modAndType": "protected abstract byte[]"
            },
            {
                "name": "engineGetEncoded(String format)",
                "description": "Returns the parameters encoded in the specified format.",
                "modAndType": "protected abstract byte[]"
            },
            {
                "name": "engineGetParameterSpec(Class<T> paramSpec)",
                "description": "Returns a (transparent) specification of this parameters\n object.",
                "modAndType": "protected abstract <T extends AlgorithmParameterSpec>T"
            },
            {
                "name": "engineInit(AlgorithmParameterSpec paramSpec)",
                "description": "Initializes this parameters object using the parameters\n specified in paramSpec.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "engineInit(byte[] params)",
                "description": "Imports the specified parameters and decodes them\n according to the primary decoding format for parameters.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "engineInit(byte[] params,\n          String format)",
                "description": "Imports the parameters from params and\n decodes them according to the specified decoding format.",
                "modAndType": "protected abstract void"
            },
            {
                "name": "engineToString()",
                "description": "Returns a formatted string describing the parameters.",
                "modAndType": "protected abstract String"
            }
        ],
        "href": "java/security/AlgorithmParametersSpi.html"
    },
    {
        "name": "AllPermission",
        "constructors": [
            {
                "name": "AllPermission()",
                "description": "Creates a new AllPermission object."
            },
            {
                "name": "AllPermission(String name,\n             String actions)",
                "description": "Creates a new AllPermission object."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Checks two AllPermission objects for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getActions()",
                "description": "Returns the canonical string representation of the actions.",
                "modAndType": "String"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this object.",
                "modAndType": "int"
            },
            {
                "name": "implies(Permission p)",
                "description": "Checks if the specified permission is \"implied\" by\n this object.",
                "modAndType": "boolean"
            },
            {
                "name": "newPermissionCollection()",
                "description": "Returns a new PermissionCollection object for storing AllPermission\n objects.",
                "modAndType": "PermissionCollection"
            }
        ],
        "href": "java/security/AllPermission.html"
    },
    {
        "name": "AlphaComposite",
        "constructors": [],
        "methods": [
            {
                "name": "createContext(ColorModel srcColorModel,\n             ColorModel dstColorModel,\n             RenderingHints hints)",
                "description": "Creates a context for the compositing operation.",
                "modAndType": "CompositeContext"
            },
            {
                "name": "derive(float alpha)",
                "description": "Returns a similar AlphaComposite object that uses\n the specified alpha value.",
                "modAndType": "AlphaComposite"
            },
            {
                "name": "derive(int rule)",
                "description": "Returns a similar AlphaComposite object that uses\n the specified compositing rule.",
                "modAndType": "AlphaComposite"
            },
            {
                "name": "equals(Object obj)",
                "description": "Determines whether the specified object is equal to this\n AlphaComposite.",
                "modAndType": "boolean"
            },
            {
                "name": "getAlpha()",
                "description": "Returns the alpha value of this AlphaComposite.",
                "modAndType": "float"
            },
            {
                "name": "getInstance(int rule)",
                "description": "Creates an AlphaComposite object with the specified rule.",
                "modAndType": "static AlphaComposite"
            },
            {
                "name": "getInstance(int rule,\n           float alpha)",
                "description": "Creates an AlphaComposite object with the specified rule and\n the constant alpha to multiply with the alpha of the source.",
                "modAndType": "static AlphaComposite"
            },
            {
                "name": "getRule()",
                "description": "Returns the compositing rule of this AlphaComposite.",
                "modAndType": "int"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hashcode for this composite.",
                "modAndType": "int"
            }
        ],
        "href": "java/awt/AlphaComposite.html"
    },
    {
        "name": "AlreadyBound",
        "constructors": [
            {
                "name": "AlreadyBound()",
                "description": ""
            },
            {
                "name": "AlreadyBound(String $reason)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/AlreadyBound.html"
    },
    {
        "name": "AlreadyBoundException",
        "constructors": [
            {
                "name": "AlreadyBoundException()",
                "description": "Constructs an instance of this class."
            }
        ],
        "methods": [],
        "href": "java/nio/channels/AlreadyBoundException.html"
    },
    {
        "name": "AlreadyBoundException",
        "constructors": [
            {
                "name": "AlreadyBoundException()",
                "description": "Constructs an AlreadyBoundException with no\n specified detail message."
            },
            {
                "name": "AlreadyBoundException(String s)",
                "description": "Constructs an AlreadyBoundException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "java/rmi/AlreadyBoundException.html"
    },
    {
        "name": "AlreadyBoundHelper",
        "constructors": [
            {
                "name": "AlreadyBoundHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static AlreadyBound"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      AlreadyBound that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static AlreadyBound"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     AlreadyBound value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CosNaming/NamingContextPackage/AlreadyBoundHelper.html"
    },
    {
        "name": "AlreadyBoundHolder",
        "constructors": [
            {
                "name": "AlreadyBoundHolder()",
                "description": ""
            },
            {
                "name": "AlreadyBoundHolder(AlreadyBound initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CosNaming/NamingContextPackage/AlreadyBoundHolder.html"
    },
    {
        "name": "AlreadyConnectedException",
        "constructors": [
            {
                "name": "AlreadyConnectedException()",
                "description": "Constructs an instance of this class."
            }
        ],
        "methods": [],
        "href": "java/nio/channels/AlreadyConnectedException.html"
    },
    {
        "name": "AncestorEvent",
        "constructors": [
            {
                "name": "AncestorEvent(JComponent source,\n             int id,\n             Container ancestor,\n             Container ancestorParent)",
                "description": "Constructs an AncestorEvent object to identify a change\n in an ancestor-component's display-status."
            }
        ],
        "methods": [
            {
                "name": "getAncestor()",
                "description": "Returns the ancestor that the event actually occurred on.",
                "modAndType": "Container"
            },
            {
                "name": "getAncestorParent()",
                "description": "Returns the parent of the ancestor the event actually occurred on.",
                "modAndType": "Container"
            },
            {
                "name": "getComponent()",
                "description": "Returns the component that the listener was added to.",
                "modAndType": "JComponent"
            }
        ],
        "href": "javax/swing/event/AncestorEvent.html"
    },
    {
        "name": "AncestorListener",
        "constructors": [],
        "methods": [
            {
                "name": "ancestorAdded(AncestorEvent event)",
                "description": "Called when the source or one of its ancestors is made visible\n either by setVisible(true) being called or by its being\n added to the component hierarchy.",
                "modAndType": "void"
            },
            {
                "name": "ancestorMoved(AncestorEvent event)",
                "description": "Called when either the source or one of its ancestors is moved.",
                "modAndType": "void"
            },
            {
                "name": "ancestorRemoved(AncestorEvent event)",
                "description": "Called when the source or one of its ancestors is made invisible\n either by setVisible(false) being called or by its being\n remove from the component hierarchy.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/event/AncestorListener.html"
    },
    {
        "name": "AnnotatedArrayType",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotatedGenericComponentType()",
                "description": "Returns the potentially annotated generic component type of this array type.",
                "modAndType": "AnnotatedType"
            }
        ],
        "href": "java/lang/reflect/AnnotatedArrayType.html"
    },
    {
        "name": "AnnotatedConstruct",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotation(Class<A> annotationType)",
                "description": "Returns this construct's annotation of the specified type if\n such an annotation is present, else null.",
                "modAndType": "<A extends Annotation>A"
            },
            {
                "name": "getAnnotationMirrors()",
                "description": "Returns the annotations that are directly present on\n this construct.",
                "modAndType": "List<? extends AnnotationMirror>"
            },
            {
                "name": "getAnnotationsByType(Class<A> annotationType)",
                "description": "Returns annotations that are associated with this construct.",
                "modAndType": "<A extends Annotation>A[]"
            }
        ],
        "href": "javax/lang/model/AnnotatedConstruct.html"
    },
    {
        "name": "AnnotatedElement",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotation(Class<T> annotationClass)",
                "description": "Returns this element's annotation for the specified type if\n such an annotation is present, else null.",
                "modAndType": "<T extends Annotation>T"
            },
            {
                "name": "getAnnotations()",
                "description": "Returns annotations that are present on this element.",
                "modAndType": "Annotation[]"
            },
            {
                "name": "getAnnotationsByType(Class<T> annotationClass)",
                "description": "Returns annotations that are associated with this element.",
                "modAndType": "default <T extends Annotation>T[]"
            },
            {
                "name": "getDeclaredAnnotation(Class<T> annotationClass)",
                "description": "Returns this element's annotation for the specified type if\n such an annotation is directly present, else null.",
                "modAndType": "default <T extends Annotation>T"
            },
            {
                "name": "getDeclaredAnnotations()",
                "description": "Returns annotations that are directly present on this element.",
                "modAndType": "Annotation[]"
            },
            {
                "name": "getDeclaredAnnotationsByType(Class<T> annotationClass)",
                "description": "Returns this element's annotation(s) for the specified type if\n such annotations are either directly present or\n indirectly present.",
                "modAndType": "default <T extends Annotation>T[]"
            },
            {
                "name": "isAnnotationPresent(Class<? extends Annotation> annotationClass)",
                "description": "Returns true if an annotation for the specified type\n is present on this element, else false.",
                "modAndType": "default boolean"
            }
        ],
        "href": "java/lang/reflect/AnnotatedElement.html"
    },
    {
        "name": "AnnotatedParameterizedType",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotatedActualTypeArguments()",
                "description": "Returns the potentially annotated actual type arguments of this parameterized type.",
                "modAndType": "AnnotatedType[]"
            }
        ],
        "href": "java/lang/reflect/AnnotatedParameterizedType.html"
    },
    {
        "name": "AnnotatedType",
        "constructors": [],
        "methods": [
            {
                "name": "getType()",
                "description": "Returns the underlying type that this annotated type represents.",
                "modAndType": "Type"
            }
        ],
        "href": "java/lang/reflect/AnnotatedType.html"
    },
    {
        "name": "AnnotatedTypeVariable",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotatedBounds()",
                "description": "Returns the potentially annotated bounds of this type variable.",
                "modAndType": "AnnotatedType[]"
            }
        ],
        "href": "java/lang/reflect/AnnotatedTypeVariable.html"
    },
    {
        "name": "AnnotatedWildcardType",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotatedLowerBounds()",
                "description": "Returns the potentially annotated lower bounds of this wildcard type.",
                "modAndType": "AnnotatedType[]"
            },
            {
                "name": "getAnnotatedUpperBounds()",
                "description": "Returns the potentially annotated upper bounds of this wildcard type.",
                "modAndType": "AnnotatedType[]"
            }
        ],
        "href": "java/lang/reflect/AnnotatedWildcardType.html"
    },
    {
        "name": "Annotation",
        "constructors": [],
        "methods": [
            {
                "name": "annotationType()",
                "description": "Returns the annotation type of this annotation.",
                "modAndType": "Class<? extends Annotation>"
            },
            {
                "name": "equals(Object obj)",
                "description": "Returns true if the specified object represents an annotation\n that is logically equivalent to this one.",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code of this annotation, as defined below:",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this annotation.",
                "modAndType": "String"
            }
        ],
        "href": "java/lang/annotation/Annotation.html"
    },
    {
        "name": "Annotation",
        "constructors": [
            {
                "name": "Annotation(Object value)",
                "description": "Constructs an annotation record with the given value, which\n may be null."
            }
        ],
        "methods": [
            {
                "name": "getValue()",
                "description": "Returns the value of the attribute, which may be null.",
                "modAndType": "Object"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of this Annotation.",
                "modAndType": "String"
            }
        ],
        "href": "java/text/Annotation.html"
    },
    {
        "name": "AnnotationFormatError",
        "constructors": [
            {
                "name": "AnnotationFormatError(String message)",
                "description": "Constructs a new AnnotationFormatError with the specified\n detail message."
            },
            {
                "name": "AnnotationFormatError(String message,\n                     Throwable cause)",
                "description": "Constructs a new AnnotationFormatError with the specified\n detail message and cause."
            },
            {
                "name": "AnnotationFormatError(Throwable cause)",
                "description": "Constructs a new AnnotationFormatError with the specified\n cause and a detail message of\n (cause == null ? null : cause.toString()) (which\n typically contains the class and detail message of cause)."
            }
        ],
        "methods": [],
        "href": "java/lang/annotation/AnnotationFormatError.html"
    },
    {
        "name": "AnnotationMirror",
        "constructors": [],
        "methods": [
            {
                "name": "getAnnotationType()",
                "description": "Returns the type of this annotation.",
                "modAndType": "DeclaredType"
            },
            {
                "name": "getElementValues()",
                "description": "Returns the values of this annotation's elements.",
                "modAndType": "Map<? extends ExecutableElement,? extends AnnotationValue>"
            }
        ],
        "href": "javax/lang/model/element/AnnotationMirror.html"
    },
    {
        "name": "AnnotationTypeMismatchException",
        "constructors": [
            {
                "name": "AnnotationTypeMismatchException(Method element,\n                               String foundType)",
                "description": "Constructs an AnnotationTypeMismatchException for the specified\n annotation type element and found data type."
            }
        ],
        "methods": [
            {
                "name": "element()",
                "description": "Returns the Method object for the incorrectly typed element.",
                "modAndType": "Method"
            },
            {
                "name": "foundType()",
                "description": "Returns the type of data found in the incorrectly typed element.",
                "modAndType": "String"
            }
        ],
        "href": "java/lang/annotation/AnnotationTypeMismatchException.html"
    },
    {
        "name": "AnnotationValue",
        "constructors": [],
        "methods": [
            {
                "name": "accept(AnnotationValueVisitor<R,P> v,\n      P p)",
                "description": "Applies a visitor to this value.",
                "modAndType": "<R,P> R"
            },
            {
                "name": "getValue()",
                "description": "Returns the value.",
                "modAndType": "Object"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this value.",
                "modAndType": "String"
            }
        ],
        "href": "javax/lang/model/element/AnnotationValue.html"
    },
    {
        "name": "AnnotationValueVisitor",
        "constructors": [],
        "methods": [
            {
                "name": "visit(AnnotationValue av)",
                "description": "A convenience method equivalent to v.visit(av, null).",
                "modAndType": "R"
            },
            {
                "name": "visit(AnnotationValue av,\n     P p)",
                "description": "Visits an annotation value.",
                "modAndType": "R"
            },
            {
                "name": "visitAnnotation(AnnotationMirror a,\n               P p)",
                "description": "Visits an annotation value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitArray(List<? extends AnnotationValue> vals,\n          P p)",
                "description": "Visits an array value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitBoolean(boolean b,\n            P p)",
                "description": "Visits a boolean value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitByte(byte b,\n         P p)",
                "description": "Visits a byte value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitChar(char c,\n         P p)",
                "description": "Visits a char value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitDouble(double d,\n           P p)",
                "description": "Visits a double value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitEnumConstant(VariableElement c,\n                 P p)",
                "description": "Visits an enum value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitFloat(float f,\n          P p)",
                "description": "Visits a float value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitInt(int i,\n        P p)",
                "description": "Visits an int value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitLong(long i,\n         P p)",
                "description": "Visits a long value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitShort(short s,\n          P p)",
                "description": "Visits a short value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitString(String s,\n           P p)",
                "description": "Visits a string value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitType(TypeMirror t,\n         P p)",
                "description": "Visits a type value in an annotation.",
                "modAndType": "R"
            },
            {
                "name": "visitUnknown(AnnotationValue av,\n            P p)",
                "description": "Visits an unknown kind of annotation value.",
                "modAndType": "R"
            }
        ],
        "href": "javax/lang/model/element/AnnotationValueVisitor.html"
    },
    {
        "name": "Any",
        "constructors": [
            {
                "name": "Any()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "create_input_stream()",
                "description": "Creates an input stream from which this Any object's value\n can be unmarshalled.",
                "modAndType": "abstract InputStream"
            },
            {
                "name": "create_output_stream()",
                "description": "Creates an output stream into which this Any object's\n value can be marshalled.",
                "modAndType": "abstract OutputStream"
            },
            {
                "name": "equal(Any a)",
                "description": "Checks for equality between this Any object and the\n given Any object.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "extract_any()",
                "description": "Extracts the Any object in this\n Any object's value field.",
                "modAndType": "abstract Any"
            },
            {
                "name": "extract_boolean()",
                "description": "Extracts the boolean in this\n Any object's value field.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "extract_char()",
                "description": "Extracts the char in this\n Any object's value field.",
                "modAndType": "abstract char"
            },
            {
                "name": "extract_double()",
                "description": "Extracts the double in this\n Any object's value field.",
                "modAndType": "abstract double"
            },
            {
                "name": "extract_fixed()",
                "description": "Extracts the java.math.BigDecimal object in this\n Any object's value field.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "extract_float()",
                "description": "Extracts the float in this\n Any object's value field.",
                "modAndType": "abstract float"
            },
            {
                "name": "extract_long()",
                "description": "Extracts the int in this\n Any object's value field.",
                "modAndType": "abstract int"
            },
            {
                "name": "extract_longlong()",
                "description": "Extracts the long in this\n Any object's value field.",
                "modAndType": "abstract long"
            },
            {
                "name": "extract_Object()",
                "description": "Extracts the org.omg.CORBA.Object in this\n Any object's value field.",
                "modAndType": "abstract Object"
            },
            {
                "name": "extract_octet()",
                "description": "Extracts the byte in this\n Any object's value field.",
                "modAndType": "abstract byte"
            },
            {
                "name": "extract_Principal()",
                "description": "Deprecated. \nDeprecated by CORBA 2.2.\n",
                "modAndType": "Principal"
            },
            {
                "name": "extract_short()",
                "description": "Extracts the short in this\n Any object's value field.",
                "modAndType": "abstract short"
            },
            {
                "name": "extract_Streamable()",
                "description": "Extracts a Streamable from this Any object's\n value field.",
                "modAndType": "Streamable"
            },
            {
                "name": "extract_string()",
                "description": "Extracts the String object in this\n Any object's value field.",
                "modAndType": "abstract String"
            },
            {
                "name": "extract_TypeCode()",
                "description": "Extracts the TypeCode object in this\n Any object's value field.",
                "modAndType": "abstract TypeCode"
            },
            {
                "name": "extract_ulong()",
                "description": "Extracts the int in this\n Any object's value field.",
                "modAndType": "abstract int"
            },
            {
                "name": "extract_ulonglong()",
                "description": "Extracts the long in this\n Any object's value field.",
                "modAndType": "abstract long"
            },
            {
                "name": "extract_ushort()",
                "description": "Extracts the short in this\n Any object's value field.",
                "modAndType": "abstract short"
            },
            {
                "name": "extract_Value()",
                "description": "Extracts the java.io.Serializable object in this\n Any object's value field.",
                "modAndType": "abstract Serializable"
            },
            {
                "name": "extract_wchar()",
                "description": "Extracts the char in this\n Any object's value field.",
                "modAndType": "abstract char"
            },
            {
                "name": "extract_wstring()",
                "description": "Extracts the String object in this\n Any object's value field.",
                "modAndType": "abstract String"
            },
            {
                "name": "insert_any(Any a)",
                "description": "Inserts the given Any object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_boolean(boolean b)",
                "description": "Inserts the given boolean\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_char(char c)",
                "description": "Inserts the given char\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_double(double d)",
                "description": "Inserts the given double\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_fixed(BigDecimal value)",
                "description": "Throws an \n org.omg.CORBA.NO_IMPLEMENT exception.",
                "modAndType": "void"
            },
            {
                "name": "insert_fixed(BigDecimal value,\n            TypeCode type)",
                "description": "Throws an \n org.omg.CORBA.NO_IMPLEMENT exception.",
                "modAndType": "void"
            },
            {
                "name": "insert_float(float f)",
                "description": "Inserts the given float\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_long(int l)",
                "description": "Inserts the given int\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_longlong(long l)",
                "description": "Inserts the given long\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_Object(Object o)",
                "description": "Inserts the given org.omg.CORBA.Object object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_Object(Object o,\n             TypeCode t)",
                "description": "Inserts the given org.omg.CORBA.Object object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_octet(byte b)",
                "description": "Inserts the given byte\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_Principal(Principal p)",
                "description": "Deprecated. \nDeprecated by CORBA 2.2.\n",
                "modAndType": "void"
            },
            {
                "name": "insert_short(short s)",
                "description": "Inserts the given short\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_Streamable(Streamable s)",
                "description": "Inserts the given Streamable object\n into this Any object's value field.",
                "modAndType": "void"
            },
            {
                "name": "insert_string(String s)",
                "description": "Inserts the given String object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_TypeCode(TypeCode t)",
                "description": "Inserts the given TypeCode object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_ulong(int l)",
                "description": "Inserts the given int\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_ulonglong(long l)",
                "description": "Inserts the given long\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_ushort(short s)",
                "description": "Inserts the given short\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_Value(Serializable v)",
                "description": "Inserts the given java.io.Serializable object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_Value(Serializable v,\n            TypeCode t)",
                "description": "Inserts the given java.io.Serializable object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_wchar(char c)",
                "description": "Inserts the given char\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "insert_wstring(String s)",
                "description": "Inserts the given String object\n into this Any object's value field.",
                "modAndType": "abstract void"
            },
            {
                "name": "read_value(InputStream is,\n          TypeCode t)",
                "description": "Reads off (unmarshals) the value of an Any object from\n the given input stream using the given typecode.",
                "modAndType": "abstract void"
            },
            {
                "name": "type()",
                "description": "Returns type information for the element contained in this\n Any object.",
                "modAndType": "abstract TypeCode"
            },
            {
                "name": "type(TypeCode t)",
                "description": "Sets this Any object's type field\n to the given TypeCode object and clears its value.",
                "modAndType": "abstract void"
            },
            {
                "name": "write_value(OutputStream os)",
                "description": "Writes out the value of this Any object\n to the given output stream.",
                "modAndType": "abstract void"
            }
        ],
        "href": "org/omg/CORBA/Any.html"
    },
    {
        "name": "AnyHolder",
        "constructors": [
            {
                "name": "AnyHolder()",
                "description": "Constructs a new AnyHolder object with its\n value field initialized to null."
            },
            {
                "name": "AnyHolder(Any initial)",
                "description": "Constructs a new AnyHolder object for the given\n Any object."
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream input)",
                "description": "Reads from input and initalizes the value in the Holder\n with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Returns the TypeCode object corresponding to the value\n held in this AnyHolder object.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream output)",
                "description": "Marshals to output the value in\n this AnyHolder object.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CORBA/AnyHolder.html"
    },
    {
        "name": "AnySeqHelper",
        "constructors": [
            {
                "name": "AnySeqHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static Any[]"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      Any[] that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static Any[]"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     Any[] value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CORBA/AnySeqHelper.html"
    },
    {
        "name": "AnySeqHelper",
        "constructors": [
            {
                "name": "AnySeqHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static Any[]"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      Any[] that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static Any[]"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     Any[] value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/DynamicAny/AnySeqHelper.html"
    },
    {
        "name": "AnySeqHolder",
        "constructors": [
            {
                "name": "AnySeqHolder()",
                "description": ""
            },
            {
                "name": "AnySeqHolder(Any[] initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CORBA/AnySeqHolder.html"
    },
    {
        "name": "AppConfigurationEntry",
        "constructors": [
            {
                "name": "AppConfigurationEntry(String loginModuleName,\n                     AppConfigurationEntry.LoginModuleControlFlag controlFlag,\n                     Map<String,?> options)",
                "description": "Default constructor for this class."
            }
        ],
        "methods": [
            {
                "name": "getControlFlag()",
                "description": "Return the controlFlag\n (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL)\n for this LoginModule.",
                "modAndType": "AppConfigurationEntry.LoginModuleControlFlag"
            },
            {
                "name": "getLoginModuleName()",
                "description": "Get the class name of the configured LoginModule.",
                "modAndType": "String"
            },
            {
                "name": "getOptions()",
                "description": "Get the options configured for this LoginModule.",
                "modAndType": "Map<String,?>"
            }
        ],
        "href": "javax/security/auth/login/AppConfigurationEntry.html"
    },
    {
        "name": "AppConfigurationEntry.LoginModuleControlFlag",
        "constructors": [],
        "methods": [
            {
                "name": "toString()",
                "description": "Return a String representation of this controlFlag.",
                "modAndType": "String"
            }
        ],
        "href": "javax/security/auth/login/AppConfigurationEntry.LoginModuleControlFlag.html"
    },
    {
        "name": "Appendable",
        "constructors": [],
        "methods": [
            {
                "name": "append(char c)",
                "description": "Appends the specified character to this Appendable.",
                "modAndType": "Appendable"
            },
            {
                "name": "append(CharSequence csq)",
                "description": "Appends the specified character sequence to this Appendable.",
                "modAndType": "Appendable"
            },
            {
                "name": "append(CharSequence csq,\n      int start,\n      int end)",
                "description": "Appends a subsequence of the specified character sequence to this\n Appendable.",
                "modAndType": "Appendable"
            }
        ],
        "href": "java/lang/Appendable.html"
    },
    {
        "name": "Applet",
        "constructors": [
            {
                "name": "Applet()",
                "description": "Constructs a new Applet."
            }
        ],
        "methods": [
            {
                "name": "destroy()",
                "description": "Called by the browser or applet viewer to inform\n this applet that it is being reclaimed and that it should destroy\n any resources that it has allocated.",
                "modAndType": "void"
            },
            {
                "name": "getAccessibleContext()",
                "description": "Gets the AccessibleContext associated with this Applet.",
                "modAndType": "AccessibleContext"
            },
            {
                "name": "getAppletContext()",
                "description": "Determines this applet's context, which allows the applet to\n query and affect the environment in which it runs.",
                "modAndType": "AppletContext"
            },
            {
                "name": "getAppletInfo()",
                "description": "Returns information about this applet.",
                "modAndType": "String"
            },
            {
                "name": "getAudioClip(URL url)",
                "description": "Returns the AudioClip object specified by the\n URL argument.",
                "modAndType": "AudioClip"
            },
            {
                "name": "getAudioClip(URL url,\n            String name)",
                "description": "Returns the AudioClip object specified by the\n URL and name arguments.",
                "modAndType": "AudioClip"
            },
            {
                "name": "getCodeBase()",
                "description": "Gets the base URL.",
                "modAndType": "URL"
            },
            {
                "name": "getDocumentBase()",
                "description": "Gets the URL of the document in which this applet is embedded.",
                "modAndType": "URL"
            },
            {
                "name": "getImage(URL url)",
                "description": "Returns an Image object that can then be painted on\n the screen.",
                "modAndType": "Image"
            },
            {
                "name": "getImage(URL url,\n        String name)",
                "description": "Returns an Image object that can then be painted on\n the screen.",
                "modAndType": "Image"
            },
            {
                "name": "getLocale()",
                "description": "Gets the locale of the applet.",
                "modAndType": "Locale"
            },
            {
                "name": "getParameter(String name)",
                "description": "Returns the value of the named parameter in the HTML tag.",
                "modAndType": "String"
            },
            {
                "name": "getParameterInfo()",
                "description": "Returns information about the parameters that are understood by\n this applet.",
                "modAndType": "String[][]"
            },
            {
                "name": "init()",
                "description": "Called by the browser or applet viewer to inform\n this applet that it has been loaded into the system.",
                "modAndType": "void"
            },
            {
                "name": "isActive()",
                "description": "Determines if this applet is active.",
                "modAndType": "boolean"
            },
            {
                "name": "isValidateRoot()",
                "description": "Indicates if this container is a validate root.",
                "modAndType": "boolean"
            },
            {
                "name": "newAudioClip(URL url)",
                "description": "Get an audio clip from the given URL.",
                "modAndType": "static AudioClip"
            },
            {
                "name": "play(URL url)",
                "description": "Plays the audio clip at the specified absolute URL.",
                "modAndType": "void"
            },
            {
                "name": "play(URL url,\n    String name)",
                "description": "Plays the audio clip given the URL and a specifier that is\n relative to it.",
                "modAndType": "void"
            },
            {
                "name": "resize(Dimension d)",
                "description": "Requests that this applet be resized.",
                "modAndType": "void"
            },
            {
                "name": "resize(int width,\n      int height)",
                "description": "Requests that this applet be resized.",
                "modAndType": "void"
            },
            {
                "name": "setStub(AppletStub stub)",
                "description": "Sets this applet's stub.",
                "modAndType": "void"
            },
            {
                "name": "showStatus(String msg)",
                "description": "Requests that the argument string be displayed in the\n \"status window\".",
                "modAndType": "void"
            },
            {
                "name": "start()",
                "description": "Called by the browser or applet viewer to inform\n this applet that it should start its execution.",
                "modAndType": "void"
            },
            {
                "name": "stop()",
                "description": "Called by the browser or applet viewer to inform\n this applet that it should stop its execution.",
                "modAndType": "void"
            }
        ],
        "href": "java/applet/Applet.html"
    },
    {
        "name": "AppletContext",
        "constructors": [],
        "methods": [
            {
                "name": "getApplet(String name)",
                "description": "Finds and returns the applet in the document represented by this\n applet context with the given name.",
                "modAndType": "Applet"
            },
            {
                "name": "getApplets()",
                "description": "Finds all the applets in the document represented by this applet\n context.",
                "modAndType": "Enumeration<Applet>"
            },
            {
                "name": "getAudioClip(URL url)",
                "description": "Creates an audio clip.",
                "modAndType": "AudioClip"
            },
            {
                "name": "getImage(URL url)",
                "description": "Returns an Image object that can then be painted on\n the screen.",
                "modAndType": "Image"
            },
            {
                "name": "getStream(String key)",
                "description": "Returns the stream to which specified key is associated within this\n applet context.",
                "modAndType": "InputStream"
            },
            {
                "name": "getStreamKeys()",
                "description": "Finds all the keys of the streams in this applet context.",
                "modAndType": "Iterator<String>"
            },
            {
                "name": "setStream(String key,\n         InputStream stream)",
                "description": "Associates the specified stream with the specified key in this\n applet context.",
                "modAndType": "void"
            },
            {
                "name": "showDocument(URL url)",
                "description": "Requests that the browser or applet viewer show the Web page\n indicated by the url argument.",
                "modAndType": "void"
            },
            {
                "name": "showDocument(URL url,\n            String target)",
                "description": "Requests that the browser or applet viewer show the Web page\n indicated by the url argument.",
                "modAndType": "void"
            },
            {
                "name": "showStatus(String status)",
                "description": "Requests that the argument string be displayed in the\n \"status window\".",
                "modAndType": "void"
            }
        ],
        "href": "java/applet/AppletContext.html"
    },
    {
        "name": "AppletInitializer",
        "constructors": [],
        "methods": [
            {
                "name": "activate(Applet newApplet)",
                "description": "\n Activate, and/or mark Applet active.",
                "modAndType": "void"
            },
            {
                "name": "initialize(Applet newAppletBean,\n          BeanContext bCtxt)",
                "description": "\n If passed to the appropriate variant of java.beans.Beans.instantiate\n this method will be called in order to associate the newly instantiated\n Applet (JavaBean) with its AppletContext, AppletStub, and Container.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/AppletInitializer.html"
    },
    {
        "name": "AppletStub",
        "constructors": [],
        "methods": [
            {
                "name": "appletResize(int width,\n            int height)",
                "description": "Called when the applet wants to be resized.",
                "modAndType": "void"
            },
            {
                "name": "getAppletContext()",
                "description": "Returns the applet's context.",
                "modAndType": "AppletContext"
            },
            {
                "name": "getCodeBase()",
                "description": "Gets the base URL.",
                "modAndType": "URL"
            },
            {
                "name": "getDocumentBase()",
                "description": "Gets the URL of the document in which the applet is embedded.",
                "modAndType": "URL"
            },
            {
                "name": "getParameter(String name)",
                "description": "Returns the value of the named parameter in the HTML tag.",
                "modAndType": "String"
            },
            {
                "name": "isActive()",
                "description": "Determines if the applet is active.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/applet/AppletStub.html"
    },
    {
        "name": "ApplicationException",
        "constructors": [
            {
                "name": "ApplicationException(String id,\n                    InputStream ins)",
                "description": "Constructs an ApplicationException from the CORBA repository ID of the exception\n and an input stream from which the exception data can be read as its parameters."
            }
        ],
        "methods": [
            {
                "name": "getId()",
                "description": "Returns the CORBA repository ID of the exception\n without removing it from the exceptions input stream.",
                "modAndType": "String"
            },
            {
                "name": "getInputStream()",
                "description": "Returns the input stream from which the exception data can be read as its parameters.",
                "modAndType": "InputStream"
            }
        ],
        "href": "org/omg/CORBA/portable/ApplicationException.html"
    },
    {
        "name": "Arc2D",
        "constructors": [
            {
                "name": "protected Arc2D()",
                "description": "This is an abstract class that cannot be instantiated directly."
            },
            {
                "name": "protected Arc2D(int type)",
                "description": "This is an abstract class that cannot be instantiated directly."
            }
        ],
        "methods": [
            {
                "name": "contains(double x,\n        double y)",
                "description": "Determines whether or not the specified point is inside the boundary\n of the arc.",
                "modAndType": "boolean"
            },
            {
                "name": "contains(double x,\n        double y,\n        double w,\n        double h)",
                "description": "Determines whether or not the interior of the arc entirely contains\n the specified rectangle.",
                "modAndType": "boolean"
            },
            {
                "name": "contains(Rectangle2D r)",
                "description": "Determines whether or not the interior of the arc entirely contains\n the specified rectangle.",
                "modAndType": "boolean"
            },
            {
                "name": "containsAngle(double angle)",
                "description": "Determines whether or not the specified angle is within the\n angular extents of the arc.",
                "modAndType": "boolean"
            },
            {
                "name": "equals(Object obj)",
                "description": "Determines whether or not the specified Object is\n equal to this Arc2D.",
                "modAndType": "boolean"
            },
            {
                "name": "getAngleExtent()",
                "description": "Returns the angular extent of the arc.",
                "modAndType": "abstract double"
            },
            {
                "name": "getAngleStart()",
                "description": "Returns the starting angle of the arc.",
                "modAndType": "abstract double"
            },
            {
                "name": "getArcType()",
                "description": "Returns the arc closure type of the arc: OPEN,\n CHORD, or PIE.",
                "modAndType": "int"
            },
            {
                "name": "getBounds2D()",
                "description": "Returns the high-precision framing rectangle of the arc.",
                "modAndType": "Rectangle2D"
            },
            {
                "name": "getEndPoint()",
                "description": "Returns the ending point of the arc.",
                "modAndType": "Point2D"
            },
            {
                "name": "getPathIterator(AffineTransform at)",
                "description": "Returns an iteration object that defines the boundary of the\n arc.",
                "modAndType": "PathIterator"
            },
            {
                "name": "getStartPoint()",
                "description": "Returns the starting point of the arc.",
                "modAndType": "Point2D"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hashcode for this Arc2D.",
                "modAndType": "int"
            },
            {
                "name": "intersects(double x,\n          double y,\n          double w,\n          double h)",
                "description": "Determines whether or not the interior of the arc intersects\n the interior of the specified rectangle.",
                "modAndType": "boolean"
            },
            {
                "name": "makeBounds(double x,\n          double y,\n          double w,\n          double h)",
                "description": "Constructs a Rectangle2D of the appropriate precision\n to hold the parameters calculated to be the framing rectangle\n of this arc.",
                "modAndType": "protected abstract Rectangle2D"
            },
            {
                "name": "setAngleExtent(double angExt)",
                "description": "Sets the angular extent of this arc to the specified double\n value.",
                "modAndType": "abstract void"
            },
            {
                "name": "setAngles(double x1,\n         double y1,\n         double x2,\n         double y2)",
                "description": "Sets the starting angle and angular extent of this arc using two\n sets of coordinates.",
                "modAndType": "void"
            },
            {
                "name": "setAngles(Point2D p1,\n         Point2D p2)",
                "description": "Sets the starting angle and angular extent of this arc using\n two points.",
                "modAndType": "void"
            },
            {
                "name": "setAngleStart(double angSt)",
                "description": "Sets the starting angle of this arc to the specified double\n value.",
                "modAndType": "abstract void"
            },
            {
                "name": "setAngleStart(Point2D p)",
                "description": "Sets the starting angle of this arc to the angle that the\n specified point defines relative to the center of this arc.",
                "modAndType": "void"
            },
            {
                "name": "setArc(Arc2D a)",
                "description": "Sets this arc to be the same as the specified arc.",
                "modAndType": "void"
            },
            {
                "name": "setArc(double x,\n      double y,\n      double w,\n      double h,\n      double angSt,\n      double angExt,\n      int closure)",
                "description": "Sets the location, size, angular extents, and closure type of\n this arc to the specified double values.",
                "modAndType": "abstract void"
            },
            {
                "name": "setArc(Point2D loc,\n      Dimension2D size,\n      double angSt,\n      double angExt,\n      int closure)",
                "description": "Sets the location, size, angular extents, and closure type of\n this arc to the specified values.",
                "modAndType": "void"
            },
            {
                "name": "setArc(Rectangle2D rect,\n      double angSt,\n      double angExt,\n      int closure)",
                "description": "Sets the location, size, angular extents, and closure type of\n this arc to the specified values.",
                "modAndType": "void"
            },
            {
                "name": "setArcByCenter(double x,\n              double y,\n              double radius,\n              double angSt,\n              double angExt,\n              int closure)",
                "description": "Sets the position, bounds, angular extents, and closure type of\n this arc to the specified values.",
                "modAndType": "void"
            },
            {
                "name": "setArcByTangent(Point2D p1,\n               Point2D p2,\n               Point2D p3,\n               double radius)",
                "description": "Sets the position, bounds, and angular extents of this arc to the\n specified value.",
                "modAndType": "void"
            },
            {
                "name": "setArcType(int type)",
                "description": "Sets the closure type of this arc to the specified value:\n OPEN, CHORD, or PIE.",
                "modAndType": "void"
            },
            {
                "name": "setFrame(double x,\n        double y,\n        double w,\n        double h)",
                "description": "Sets the location and size of the framing rectangle of this\n Shape to the specified rectangular values.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/geom/Arc2D.html"
    },
    {
        "name": "Arc2D.Double",
        "constructors": [
            {
                "name": "Double()",
                "description": "Constructs a new OPEN arc, initialized to location (0, 0),\n size (0, 0), angular extents (start = 0, extent = 0)."
            },
            {
                "name": "Double(double x,\n      double y,\n      double w,\n      double h,\n      double start,\n      double extent,\n      int type)",
                "description": "Constructs a new arc, initialized to the specified location,\n size, angular extents, and closure type."
            },
            {
                "name": "Double(int type)",
                "description": "Constructs a new arc, initialized to location (0, 0),\n size (0, 0), angular extents (start = 0, extent = 0), and\n the specified closure type."
            },
            {
                "name": "Double(Rectangle2D ellipseBounds,\n      double start,\n      double extent,\n      int type)",
                "description": "Constructs a new arc, initialized to the specified location,\n size, angular extents, and closure type."
            }
        ],
        "methods": [
            {
                "name": "getAngleExtent()",
                "description": "Returns the angular extent of the arc.",
                "modAndType": "double"
            },
            {
                "name": "getAngleStart()",
                "description": "Returns the starting angle of the arc.",
                "modAndType": "double"
            },
            {
                "name": "getHeight()",
                "description": "Returns the height of the framing rectangle\n in double precision.",
                "modAndType": "double"
            },
            {
                "name": "getWidth()",
                "description": "Returns the width of the framing rectangle in\n double precision.",
                "modAndType": "double"
            },
            {
                "name": "getX()",
                "description": "Returns the X coordinate of the upper-left corner of\n the framing rectangle in double precision.",
                "modAndType": "double"
            },
            {
                "name": "getY()",
                "description": "Returns the Y coordinate of the upper-left corner of\n the framing rectangle in double precision.",
                "modAndType": "double"
            },
            {
                "name": "isEmpty()",
                "description": "Determines whether the RectangularShape is empty.",
                "modAndType": "boolean"
            },
            {
                "name": "makeBounds(double x,\n          double y,\n          double w,\n          double h)",
                "description": "Constructs a Rectangle2D of the appropriate precision\n to hold the parameters calculated to be the framing rectangle\n of this arc.",
                "modAndType": "protected Rectangle2D"
            },
            {
                "name": "setAngleExtent(double angExt)",
                "description": "Sets the angular extent of this arc to the specified double\n value.",
                "modAndType": "void"
            },
            {
                "name": "setAngleStart(double angSt)",
                "description": "Sets the starting angle of this arc to the specified double\n value.",
                "modAndType": "void"
            },
            {
                "name": "setArc(double x,\n      double y,\n      double w,\n      double h,\n      double angSt,\n      double angExt,\n      int closure)",
                "description": "Sets the location, size, angular extents, and closure type of\n this arc to the specified double values.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/geom/Arc2D.Double.html"
    },
    {
        "name": "Arc2D.Float",
        "constructors": [
            {
                "name": "Float()",
                "description": "Constructs a new OPEN arc, initialized to location (0, 0),\n size (0, 0), angular extents (start = 0, extent = 0)."
            },
            {
                "name": "Float(float x,\n     float y,\n     float w,\n     float h,\n     float start,\n     float extent,\n     int type)",
                "description": "Constructs a new arc, initialized to the specified location,\n size, angular extents, and closure type."
            },
            {
                "name": "Float(int type)",
                "description": "Constructs a new arc, initialized to location (0, 0),\n size (0, 0), angular extents (start = 0, extent = 0), and\n the specified closure type."
            },
            {
                "name": "Float(Rectangle2D ellipseBounds,\n     float start,\n     float extent,\n     int type)",
                "description": "Constructs a new arc, initialized to the specified location,\n size, angular extents, and closure type."
            }
        ],
        "methods": [
            {
                "name": "getAngleExtent()",
                "description": "Returns the angular extent of the arc.",
                "modAndType": "double"
            },
            {
                "name": "getAngleStart()",
                "description": "Returns the starting angle of the arc.",
                "modAndType": "double"
            },
            {
                "name": "getHeight()",
                "description": "Returns the height of the framing rectangle\n in double precision.",
                "modAndType": "double"
            },
            {
                "name": "getWidth()",
                "description": "Returns the width of the framing rectangle in\n double precision.",
                "modAndType": "double"
            },
            {
                "name": "getX()",
                "description": "Returns the X coordinate of the upper-left corner of\n the framing rectangle in double precision.",
                "modAndType": "double"
            },
            {
                "name": "getY()",
                "description": "Returns the Y coordinate of the upper-left corner of\n the framing rectangle in double precision.",
                "modAndType": "double"
            },
            {
                "name": "isEmpty()",
                "description": "Determines whether the RectangularShape is empty.",
                "modAndType": "boolean"
            },
            {
                "name": "makeBounds(double x,\n          double y,\n          double w,\n          double h)",
                "description": "Constructs a Rectangle2D of the appropriate precision\n to hold the parameters calculated to be the framing rectangle\n of this arc.",
                "modAndType": "protected Rectangle2D"
            },
            {
                "name": "setAngleExtent(double angExt)",
                "description": "Sets the angular extent of this arc to the specified double\n value.",
                "modAndType": "void"
            },
            {
                "name": "setAngleStart(double angSt)",
                "description": "Sets the starting angle of this arc to the specified double\n value.",
                "modAndType": "void"
            },
            {
                "name": "setArc(double x,\n      double y,\n      double w,\n      double h,\n      double angSt,\n      double angExt,\n      int closure)",
                "description": "Sets the location, size, angular extents, and closure type of\n this arc to the specified double values.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/geom/Arc2D.Float.html"
    },
    {
        "name": "Area",
        "constructors": [
            {
                "name": "Area()",
                "description": "Default constructor which creates an empty area."
            },
            {
                "name": "Area(Shape s)",
                "description": "The Area class creates an area geometry from the\n specified Shape object."
            }
        ],
        "methods": [
            {
                "name": "add(Area rhs)",
                "description": "Adds the shape of the specified Area to the\n shape of this Area.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Returns an exact copy of this Area object.",
                "modAndType": "Object"
            },
            {
                "name": "contains(double x,\n        double y)",
                "description": "Tests if the specified coordinates are inside the boundary of the\n Shape, as described by the\n \n definition of insideness.",
                "modAndType": "boolean"
            },
            {
                "name": "contains(double x,\n        double y,\n        double w,\n        double h)",
                "description": "Tests if the interior of the Shape entirely contains\n the specified rectangular area.",
                "modAndType": "boolean"
            },
            {
                "name": "contains(Point2D p)",
                "description": "Tests if a specified Point2D is inside the boundary\n of the Shape, as described by the\n \n definition of insideness.",
                "modAndType": "boolean"
            },
            {
                "name": "contains(Rectangle2D r)",
                "description": "Tests if the interior of the Shape entirely contains the\n specified Rectangle2D.",
                "modAndType": "boolean"
            },
            {
                "name": "createTransformedArea(AffineTransform t)",
                "description": "Creates a new Area object that contains the same\n geometry as this Area transformed by the specified\n AffineTransform.",
                "modAndType": "Area"
            },
            {
                "name": "equals(Area other)",
                "description": "Tests whether the geometries of the two Area objects\n are equal.",
                "modAndType": "boolean"
            },
            {
                "name": "exclusiveOr(Area rhs)",
                "description": "Sets the shape of this Area to be the combined area\n of its current shape and the shape of the specified Area,\n minus their intersection.",
                "modAndType": "void"
            },
            {
                "name": "getBounds()",
                "description": "Returns a bounding Rectangle that completely encloses\n this Area.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getBounds2D()",
                "description": "Returns a high precision bounding Rectangle2D that\n completely encloses this Area.",
                "modAndType": "Rectangle2D"
            },
            {
                "name": "getPathIterator(AffineTransform at)",
                "description": "Creates a PathIterator for the outline of this\n Area object.",
                "modAndType": "PathIterator"
            },
            {
                "name": "getPathIterator(AffineTransform at,\n               double flatness)",
                "description": "Creates a PathIterator for the flattened outline of\n this Area object.",
                "modAndType": "PathIterator"
            },
            {
                "name": "intersect(Area rhs)",
                "description": "Sets the shape of this Area to the intersection of\n its current shape and the shape of the specified Area.",
                "modAndType": "void"
            },
            {
                "name": "intersects(double x,\n          double y,\n          double w,\n          double h)",
                "description": "Tests if the interior of the Shape intersects the\n interior of a specified rectangular area.",
                "modAndType": "boolean"
            },
            {
                "name": "intersects(Rectangle2D r)",
                "description": "Tests if the interior of the Shape intersects the\n interior of a specified Rectangle2D.",
                "modAndType": "boolean"
            },
            {
                "name": "isEmpty()",
                "description": "Tests whether this Area object encloses any area.",
                "modAndType": "boolean"
            },
            {
                "name": "isPolygonal()",
                "description": "Tests whether this Area consists entirely of\n straight edged polygonal geometry.",
                "modAndType": "boolean"
            },
            {
                "name": "isRectangular()",
                "description": "Tests whether this Area is rectangular in shape.",
                "modAndType": "boolean"
            },
            {
                "name": "isSingular()",
                "description": "Tests whether this Area is comprised of a single\n closed subpath.",
                "modAndType": "boolean"
            },
            {
                "name": "reset()",
                "description": "Removes all of the geometry from this Area and\n restores it to an empty area.",
                "modAndType": "void"
            },
            {
                "name": "subtract(Area rhs)",
                "description": "Subtracts the shape of the specified Area from the\n shape of this Area.",
                "modAndType": "void"
            },
            {
                "name": "transform(AffineTransform t)",
                "description": "Transforms the geometry of this Area using the specified\n AffineTransform.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/geom/Area.html"
    },
    {
        "name": "AreaAveragingScaleFilter",
        "constructors": [
            {
                "name": "AreaAveragingScaleFilter(int width,\n                        int height)",
                "description": "Constructs an AreaAveragingScaleFilter that scales the pixels from\n its source Image as specified by the width and height parameters."
            }
        ],
        "methods": [
            {
                "name": "setHints(int hints)",
                "description": "Detect if the data is being delivered with the necessary hints\n to allow the averaging algorithm to do its work.",
                "modAndType": "void"
            },
            {
                "name": "setPixels(int x,\n         int y,\n         int w,\n         int h,\n         ColorModel model,\n         byte[] pixels,\n         int off,\n         int scansize)",
                "description": "Combine the components for the delivered byte pixels into the\n accumulation arrays and send on any averaged data for rows of\n pixels that are complete.",
                "modAndType": "void"
            },
            {
                "name": "setPixels(int x,\n         int y,\n         int w,\n         int h,\n         ColorModel model,\n         int[] pixels,\n         int off,\n         int scansize)",
                "description": "Combine the components for the delivered int pixels into the\n accumulation arrays and send on any averaged data for rows of\n pixels that are complete.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/image/AreaAveragingScaleFilter.html"
    },
    {
        "name": "ARG_IN",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ARG_IN.html"
    },
    {
        "name": "ARG_INOUT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ARG_INOUT.html"
    },
    {
        "name": "ARG_OUT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ARG_OUT.html"
    },
    {
        "name": "ArithmeticException",
        "constructors": [
            {
                "name": "ArithmeticException()",
                "description": "Constructs an ArithmeticException with no detail\n message."
            },
            {
                "name": "ArithmeticException(String s)",
                "description": "Constructs an ArithmeticException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "java/lang/ArithmeticException.html"
    },
    {
        "name": "Array",
        "constructors": [],
        "methods": [
            {
                "name": "get(Object array,\n   int index)",
                "description": "Returns the value of the indexed component in the specified\n array object.",
                "modAndType": "static Object"
            },
            {
                "name": "getBoolean(Object array,\n          int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a boolean.",
                "modAndType": "static boolean"
            },
            {
                "name": "getByte(Object array,\n       int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a byte.",
                "modAndType": "static byte"
            },
            {
                "name": "getChar(Object array,\n       int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a char.",
                "modAndType": "static char"
            },
            {
                "name": "getDouble(Object array,\n         int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a double.",
                "modAndType": "static double"
            },
            {
                "name": "getFloat(Object array,\n        int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a float.",
                "modAndType": "static float"
            },
            {
                "name": "getInt(Object array,\n      int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as an int.",
                "modAndType": "static int"
            },
            {
                "name": "getLength(Object array)",
                "description": "Returns the length of the specified array object, as an int.",
                "modAndType": "static int"
            },
            {
                "name": "getLong(Object array,\n       int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a long.",
                "modAndType": "static long"
            },
            {
                "name": "getShort(Object array,\n        int index)",
                "description": "Returns the value of the indexed component in the specified\n array object, as a short.",
                "modAndType": "static short"
            },
            {
                "name": "newInstance(Class<?> componentType,\n           int... dimensions)",
                "description": "Creates a new array\n with the specified component type and dimensions.",
                "modAndType": "static Object"
            },
            {
                "name": "newInstance(Class<?> componentType,\n           int length)",
                "description": "Creates a new array with the specified component type and\n length.",
                "modAndType": "static Object"
            },
            {
                "name": "set(Object array,\n   int index,\n   Object value)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified new value.",
                "modAndType": "static void"
            },
            {
                "name": "setBoolean(Object array,\n          int index,\n          boolean z)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified boolean value.",
                "modAndType": "static void"
            },
            {
                "name": "setByte(Object array,\n       int index,\n       byte b)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified byte value.",
                "modAndType": "static void"
            },
            {
                "name": "setChar(Object array,\n       int index,\n       char c)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified char value.",
                "modAndType": "static void"
            },
            {
                "name": "setDouble(Object array,\n         int index,\n         double d)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified double value.",
                "modAndType": "static void"
            },
            {
                "name": "setFloat(Object array,\n        int index,\n        float f)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified float value.",
                "modAndType": "static void"
            },
            {
                "name": "setInt(Object array,\n      int index,\n      int i)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified int value.",
                "modAndType": "static void"
            },
            {
                "name": "setLong(Object array,\n       int index,\n       long l)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified long value.",
                "modAndType": "static void"
            },
            {
                "name": "setShort(Object array,\n        int index,\n        short s)",
                "description": "Sets the value of the indexed component of the specified array\n object to the specified short value.",
                "modAndType": "static void"
            }
        ],
        "href": "java/lang/reflect/Array.html"
    },
    {
        "name": "Array",
        "constructors": [],
        "methods": [
            {
                "name": "free()",
                "description": "This method frees the Array object and releases the resources that\n it holds.",
                "modAndType": "void"
            },
            {
                "name": "getArray()",
                "description": "Retrieves the contents of the SQL ARRAY value designated\n by this\n Array object in the form of an array in the Java\n programming language.",
                "modAndType": "Object"
            },
            {
                "name": "getArray(long index,\n        int count)",
                "description": "Retrieves a slice of the SQL ARRAY\n value designated by this Array object, beginning with the\n specified index and containing up to count\n successive elements of the SQL array.",
                "modAndType": "Object"
            },
            {
                "name": "getArray(long index,\n        int count,\n        Map<String,Class<?>> map)",
                "description": "Retreives a slice of the SQL ARRAY value\n designated by this Array object, beginning with the specified\n index and containing up to count\n successive elements of the SQL array.",
                "modAndType": "Object"
            },
            {
                "name": "getArray(Map<String,Class<?>> map)",
                "description": "Retrieves the contents of the SQL ARRAY value designated by this\n Array object.",
                "modAndType": "Object"
            },
            {
                "name": "getBaseType()",
                "description": "Retrieves the JDBC type of the elements in the array designated\n by this Array object.",
                "modAndType": "int"
            },
            {
                "name": "getBaseTypeName()",
                "description": "Retrieves the SQL type name of the elements in\n the array designated by this Array object.",
                "modAndType": "String"
            },
            {
                "name": "getResultSet()",
                "description": "Retrieves a result set that contains the elements of the SQL\n ARRAY value\n designated by this Array object.",
                "modAndType": "ResultSet"
            },
            {
                "name": "getResultSet(long index,\n            int count)",
                "description": "Retrieves a result set holding the elements of the subarray that\n starts at index index and contains up to\n count successive elements.",
                "modAndType": "ResultSet"
            },
            {
                "name": "getResultSet(long index,\n            int count,\n            Map<String,Class<?>> map)",
                "description": "Retrieves a result set holding the elements of the subarray that\n starts at index index and contains up to\n count successive elements.",
                "modAndType": "ResultSet"
            },
            {
                "name": "getResultSet(Map<String,Class<?>> map)",
                "description": "Retrieves a result set that contains the elements of the SQL\n ARRAY value designated by this Array object.",
                "modAndType": "ResultSet"
            }
        ],
        "href": "java/sql/Array.html"
    },
    {
        "name": "ArrayBlockingQueue",
        "constructors": [
            {
                "name": "ArrayBlockingQueue(int capacity)",
                "description": "Creates an ArrayBlockingQueue with the given (fixed)\n capacity and default access policy."
            },
            {
                "name": "ArrayBlockingQueue(int capacity,\n                  boolean fair)",
                "description": "Creates an ArrayBlockingQueue with the given (fixed)\n capacity and the specified access policy."
            },
            {
                "name": "ArrayBlockingQueue(int capacity,\n                  boolean fair,\n                  Collection<? extends E> c)",
                "description": "Creates an ArrayBlockingQueue with the given (fixed)\n capacity, the specified access policy and initially containing the\n elements of the given collection,\n added in traversal order of the collection's iterator."
            }
        ],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning true upon success and throwing an\n IllegalStateException if this queue is full.",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Atomically removes all of the elements from this queue.",
                "modAndType": "void"
            },
            {
                "name": "contains(Object o)",
                "description": "Returns true if this queue contains the specified element.",
                "modAndType": "boolean"
            },
            {
                "name": "drainTo(Collection<? super E> c)",
                "description": "Removes all available elements from this queue and adds them\n to the given collection.",
                "modAndType": "int"
            },
            {
                "name": "drainTo(Collection<? super E> c,\n       int maxElements)",
                "description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.",
                "modAndType": "int"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements in this queue in proper sequence.",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "offer(E e)",
                "description": "Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning true upon success and false if this queue\n is full.",
                "modAndType": "boolean"
            },
            {
                "name": "offer(E e,\n     long timeout,\n     TimeUnit unit)",
                "description": "Inserts the specified element at the tail of this queue, waiting\n up to the specified wait time for space to become available if\n the queue is full.",
                "modAndType": "boolean"
            },
            {
                "name": "peek()",
                "description": "Retrieves, but does not remove, the head of this queue,\n or returns null if this queue is empty.",
                "modAndType": "E"
            },
            {
                "name": "poll()",
                "description": "Retrieves and removes the head of this queue,\n or returns null if this queue is empty.",
                "modAndType": "E"
            },
            {
                "name": "poll(long timeout,\n    TimeUnit unit)",
                "description": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.",
                "modAndType": "E"
            },
            {
                "name": "put(E e)",
                "description": "Inserts the specified element at the tail of this queue, waiting\n for space to become available if the queue is full.",
                "modAndType": "void"
            },
            {
                "name": "remainingCapacity()",
                "description": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking.",
                "modAndType": "int"
            },
            {
                "name": "remove(Object o)",
                "description": "Removes a single instance of the specified element from this queue,\n if it is present.",
                "modAndType": "boolean"
            },
            {
                "name": "size()",
                "description": "Returns the number of elements in this queue.",
                "modAndType": "int"
            },
            {
                "name": "spliterator()",
                "description": "Returns a Spliterator over the elements in this queue.",
                "modAndType": "Spliterator<E>"
            },
            {
                "name": "take()",
                "description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.",
                "modAndType": "E"
            },
            {
                "name": "toArray()",
                "description": "Returns an array containing all of the elements in this queue, in\n proper sequence.",
                "modAndType": "Object[]"
            },
            {
                "name": "toArray(T[] a)",
                "description": "Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.",
                "modAndType": "<T> T[]"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this collection.",
                "modAndType": "String"
            }
        ],
        "href": "java/util/concurrent/ArrayBlockingQueue.html"
    },
    {
        "name": "ArrayDeque",
        "constructors": [
            {
                "name": "ArrayDeque()",
                "description": "Constructs an empty array deque with an initial capacity\n sufficient to hold 16 elements."
            },
            {
                "name": "ArrayDeque(Collection<? extends E> c)",
                "description": "Constructs a deque containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator."
            },
            {
                "name": "ArrayDeque(int numElements)",
                "description": "Constructs an empty array deque with an initial capacity\n sufficient to hold the specified number of elements."
            }
        ],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Inserts the specified element at the end of this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "addFirst(E e)",
                "description": "Inserts the specified element at the front of this deque.",
                "modAndType": "void"
            },
            {
                "name": "addLast(E e)",
                "description": "Inserts the specified element at the end of this deque.",
                "modAndType": "void"
            },
            {
                "name": "clear()",
                "description": "Removes all of the elements from this deque.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Returns a copy of this deque.",
                "modAndType": "ArrayDeque<E>"
            },
            {
                "name": "contains(Object o)",
                "description": "Returns true if this deque contains the specified element.",
                "modAndType": "boolean"
            },
            {
                "name": "descendingIterator()",
                "description": "Returns an iterator over the elements in this deque in reverse\n sequential order.",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "element()",
                "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque.",
                "modAndType": "E"
            },
            {
                "name": "getFirst()",
                "description": "Retrieves, but does not remove, the first element of this deque.",
                "modAndType": "E"
            },
            {
                "name": "getLast()",
                "description": "Retrieves, but does not remove, the last element of this deque.",
                "modAndType": "E"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this deque contains no elements.",
                "modAndType": "boolean"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements in this deque.",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "offer(E e)",
                "description": "Inserts the specified element at the end of this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "offerFirst(E e)",
                "description": "Inserts the specified element at the front of this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "offerLast(E e)",
                "description": "Inserts the specified element at the end of this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "peek()",
                "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque, or returns null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "peekFirst()",
                "description": "Retrieves, but does not remove, the first element of this deque,\n or returns null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "peekLast()",
                "description": "Retrieves, but does not remove, the last element of this deque,\n or returns null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "poll()",
                "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "pollFirst()",
                "description": "Retrieves and removes the first element of this deque,\n or returns null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "pollLast()",
                "description": "Retrieves and removes the last element of this deque,\n or returns null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "pop()",
                "description": "Pops an element from the stack represented by this deque.",
                "modAndType": "E"
            },
            {
                "name": "push(E e)",
                "description": "Pushes an element onto the stack represented by this deque.",
                "modAndType": "void"
            },
            {
                "name": "remove()",
                "description": "Retrieves and removes the head of the queue represented by this deque.",
                "modAndType": "E"
            },
            {
                "name": "remove(Object o)",
                "description": "Removes a single instance of the specified element from this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "removeFirst()",
                "description": "Retrieves and removes the first element of this deque.",
                "modAndType": "E"
            },
            {
                "name": "removeFirstOccurrence(Object o)",
                "description": "Removes the first occurrence of the specified element in this\n deque (when traversing the deque from head to tail).",
                "modAndType": "boolean"
            },
            {
                "name": "removeLast()",
                "description": "Retrieves and removes the last element of this deque.",
                "modAndType": "E"
            },
            {
                "name": "removeLastOccurrence(Object o)",
                "description": "Removes the last occurrence of the specified element in this\n deque (when traversing the deque from head to tail).",
                "modAndType": "boolean"
            },
            {
                "name": "size()",
                "description": "Returns the number of elements in this deque.",
                "modAndType": "int"
            },
            {
                "name": "spliterator()",
                "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n deque.",
                "modAndType": "Spliterator<E>"
            },
            {
                "name": "toArray()",
                "description": "Returns an array containing all of the elements in this deque\n in proper sequence (from first to last element).",
                "modAndType": "Object[]"
            },
            {
                "name": "toArray(T[] a)",
                "description": "Returns an array containing all of the elements in this deque in\n proper sequence (from first to last element); the runtime type of the\n returned array is that of the specified array.",
                "modAndType": "<T> T[]"
            }
        ],
        "href": "java/util/ArrayDeque.html"
    },
    {
        "name": "ArrayIndexOutOfBoundsException",
        "constructors": [
            {
                "name": "ArrayIndexOutOfBoundsException()",
                "description": "Constructs an ArrayIndexOutOfBoundsException with no\n detail message."
            },
            {
                "name": "ArrayIndexOutOfBoundsException(int index)",
                "description": "Constructs a new ArrayIndexOutOfBoundsException\n class with an argument indicating the illegal index."
            },
            {
                "name": "ArrayIndexOutOfBoundsException(String s)",
                "description": "Constructs an ArrayIndexOutOfBoundsException class\n with the specified detail message."
            }
        ],
        "methods": [],
        "href": "java/lang/ArrayIndexOutOfBoundsException.html"
    },
    {
        "name": "ArrayList",
        "constructors": [
            {
                "name": "ArrayList()",
                "description": "Constructs an empty list with an initial capacity of ten."
            },
            {
                "name": "ArrayList(Collection<? extends E> c)",
                "description": "Constructs a list containing the elements of the specified\n collection, in the order they are returned by the collection's\n iterator."
            },
            {
                "name": "ArrayList(int initialCapacity)",
                "description": "Constructs an empty list with the specified initial capacity."
            }
        ],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Appends the specified element to the end of this list.",
                "modAndType": "boolean"
            },
            {
                "name": "add(int index,\n   E element)",
                "description": "Inserts the specified element at the specified position in this\n list.",
                "modAndType": "void"
            },
            {
                "name": "addAll(Collection<? extends E> c)",
                "description": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the\n specified collection's Iterator.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(int index,\n      Collection<? extends E> c)",
                "description": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all of the elements from this list.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Returns a shallow copy of this ArrayList instance.",
                "modAndType": "Object"
            },
            {
                "name": "contains(Object o)",
                "description": "Returns true if this list contains the specified element.",
                "modAndType": "boolean"
            },
            {
                "name": "ensureCapacity(int minCapacity)",
                "description": "Increases the capacity of this ArrayList instance, if\n necessary, to ensure that it can hold at least the number of elements\n specified by the minimum capacity argument.",
                "modAndType": "void"
            },
            {
                "name": "forEach(Consumer<? super E> action)",
                "description": "Performs the given action for each element of the Iterable\n until all elements have been processed or the action throws an\n exception.",
                "modAndType": "void"
            },
            {
                "name": "get(int index)",
                "description": "Returns the element at the specified position in this list.",
                "modAndType": "E"
            },
            {
                "name": "indexOf(Object o)",
                "description": "Returns the index of the first occurrence of the specified element\n in this list, or -1 if this list does not contain the element.",
                "modAndType": "int"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this list contains no elements.",
                "modAndType": "boolean"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements in this list in proper sequence.",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "lastIndexOf(Object o)",
                "description": "Returns the index of the last occurrence of the specified element\n in this list, or -1 if this list does not contain the element.",
                "modAndType": "int"
            },
            {
                "name": "listIterator()",
                "description": "Returns a list iterator over the elements in this list (in proper\n sequence).",
                "modAndType": "ListIterator<E>"
            },
            {
                "name": "listIterator(int index)",
                "description": "Returns a list iterator over the elements in this list (in proper\n sequence), starting at the specified position in the list.",
                "modAndType": "ListIterator<E>"
            },
            {
                "name": "remove(int index)",
                "description": "Removes the element at the specified position in this list.",
                "modAndType": "E"
            },
            {
                "name": "remove(Object o)",
                "description": "Removes the first occurrence of the specified element from this list,\n if it is present.",
                "modAndType": "boolean"
            },
            {
                "name": "removeAll(Collection<?> c)",
                "description": "Removes from this list all of its elements that are contained in the\n specified collection.",
                "modAndType": "boolean"
            },
            {
                "name": "removeIf(Predicate<? super E> filter)",
                "description": "Removes all of the elements of this collection that satisfy the given\n predicate.",
                "modAndType": "boolean"
            },
            {
                "name": "removeRange(int fromIndex,\n           int toIndex)",
                "description": "Removes from this list all of the elements whose index is between\n fromIndex, inclusive, and toIndex, exclusive.",
                "modAndType": "protected void"
            },
            {
                "name": "replaceAll(UnaryOperator<E> operator)",
                "description": "Replaces each element of this list with the result of applying the\n operator to that element.",
                "modAndType": "void"
            },
            {
                "name": "retainAll(Collection<?> c)",
                "description": "Retains only the elements in this list that are contained in the\n specified collection.",
                "modAndType": "boolean"
            },
            {
                "name": "set(int index,\n   E element)",
                "description": "Replaces the element at the specified position in this list with\n the specified element.",
                "modAndType": "E"
            },
            {
                "name": "size()",
                "description": "Returns the number of elements in this list.",
                "modAndType": "int"
            },
            {
                "name": "sort(Comparator<? super E> c)",
                "description": "Sorts this list according to the order induced by the specified\n Comparator.",
                "modAndType": "void"
            },
            {
                "name": "spliterator()",
                "description": "Creates a late-binding\n and fail-fast Spliterator over the elements in this\n list.",
                "modAndType": "Spliterator<E>"
            },
            {
                "name": "subList(int fromIndex,\n       int toIndex)",
                "description": "Returns a view of the portion of this list between the specified\n fromIndex, inclusive, and toIndex, exclusive.",
                "modAndType": "List<E>"
            },
            {
                "name": "toArray()",
                "description": "Returns an array containing all of the elements in this list\n in proper sequence (from first to last element).",
                "modAndType": "Object[]"
            },
            {
                "name": "toArray(T[] a)",
                "description": "Returns an array containing all of the elements in this list in proper\n sequence (from first to last element); the runtime type of the returned\n array is that of the specified array.",
                "modAndType": "<T> T[]"
            },
            {
                "name": "trimToSize()",
                "description": "Trims the capacity of this ArrayList instance to be the\n list's current size.",
                "modAndType": "void"
            }
        ],
        "href": "java/util/ArrayList.html"
    },
    {
        "name": "Arrays",
        "constructors": [],
        "methods": [
            {
                "name": "asList(T... a)",
                "description": "Returns a fixed-size list backed by the specified array.",
                "modAndType": "static <T> List<T>"
            },
            {
                "name": "binarySearch(byte[] a,\n            byte key)",
                "description": "Searches the specified array of bytes for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(byte[] a,\n            int fromIndex,\n            int toIndex,\n            byte key)",
                "description": "Searches a range of\n the specified array of bytes for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(char[] a,\n            char key)",
                "description": "Searches the specified array of chars for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(char[] a,\n            int fromIndex,\n            int toIndex,\n            char key)",
                "description": "Searches a range of\n the specified array of chars for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(double[] a,\n            double key)",
                "description": "Searches the specified array of doubles for the specified value using\n the binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(double[] a,\n            int fromIndex,\n            int toIndex,\n            double key)",
                "description": "Searches a range of\n the specified array of doubles for the specified value using\n the binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(float[] a,\n            float key)",
                "description": "Searches the specified array of floats for the specified value using\n the binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(float[] a,\n            int fromIndex,\n            int toIndex,\n            float key)",
                "description": "Searches a range of\n the specified array of floats for the specified value using\n the binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(int[] a,\n            int key)",
                "description": "Searches the specified array of ints for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(int[] a,\n            int fromIndex,\n            int toIndex,\n            int key)",
                "description": "Searches a range of\n the specified array of ints for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(long[] a,\n            int fromIndex,\n            int toIndex,\n            long key)",
                "description": "Searches a range of\n the specified array of longs for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(long[] a,\n            long key)",
                "description": "Searches the specified array of longs for the specified value using the\n binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(Object[] a,\n            int fromIndex,\n            int toIndex,\n            Object key)",
                "description": "Searches a range of\n the specified array for the specified object using the binary\n search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(Object[] a,\n            Object key)",
                "description": "Searches the specified array for the specified object using the binary\n search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(short[] a,\n            int fromIndex,\n            int toIndex,\n            short key)",
                "description": "Searches a range of\n the specified array of shorts for the specified value using\n the binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(short[] a,\n            short key)",
                "description": "Searches the specified array of shorts for the specified value using\n the binary search algorithm.",
                "modAndType": "static int"
            },
            {
                "name": "binarySearch(T[] a,\n            int fromIndex,\n            int toIndex,\n            T key,\n            Comparator<? super T> c)",
                "description": "Searches a range of\n the specified array for the specified object using the binary\n search algorithm.",
                "modAndType": "static <T> int"
            },
            {
                "name": "binarySearch(T[] a,\n            T key,\n            Comparator<? super T> c)",
                "description": "Searches the specified array for the specified object using the binary\n search algorithm.",
                "modAndType": "static <T> int"
            },
            {
                "name": "copyOf(boolean[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with false (if necessary)\n so the copy has the specified length.",
                "modAndType": "static boolean[]"
            },
            {
                "name": "copyOf(byte[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.",
                "modAndType": "static byte[]"
            },
            {
                "name": "copyOf(char[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with null characters (if necessary)\n so the copy has the specified length.",
                "modAndType": "static char[]"
            },
            {
                "name": "copyOf(double[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.",
                "modAndType": "static double[]"
            },
            {
                "name": "copyOf(float[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.",
                "modAndType": "static float[]"
            },
            {
                "name": "copyOf(int[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.",
                "modAndType": "static int[]"
            },
            {
                "name": "copyOf(long[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.",
                "modAndType": "static long[]"
            },
            {
                "name": "copyOf(short[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with zeros (if necessary)\n so the copy has the specified length.",
                "modAndType": "static short[]"
            },
            {
                "name": "copyOf(T[] original,\n      int newLength)",
                "description": "Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.",
                "modAndType": "static <T> T[]"
            },
            {
                "name": "copyOf(U[] original,\n      int newLength,\n      Class<? extends T[]> newType)",
                "description": "Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.",
                "modAndType": "static <T,U> T[]"
            },
            {
                "name": "copyOfRange(boolean[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static boolean[]"
            },
            {
                "name": "copyOfRange(byte[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static byte[]"
            },
            {
                "name": "copyOfRange(char[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static char[]"
            },
            {
                "name": "copyOfRange(double[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static double[]"
            },
            {
                "name": "copyOfRange(float[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static float[]"
            },
            {
                "name": "copyOfRange(int[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static int[]"
            },
            {
                "name": "copyOfRange(long[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static long[]"
            },
            {
                "name": "copyOfRange(short[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static short[]"
            },
            {
                "name": "copyOfRange(T[] original,\n           int from,\n           int to)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static <T> T[]"
            },
            {
                "name": "copyOfRange(U[] original,\n           int from,\n           int to,\n           Class<? extends T[]> newType)",
                "description": "Copies the specified range of the specified array into a new array.",
                "modAndType": "static <T,U> T[]"
            },
            {
                "name": "deepEquals(Object[] a1,\n          Object[] a2)",
                "description": "Returns true if the two specified arrays are deeply\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "deepHashCode(Object[] a)",
                "description": "Returns a hash code based on the \"deep contents\" of the specified\n array.",
                "modAndType": "static int"
            },
            {
                "name": "deepToString(Object[] a)",
                "description": "Returns a string representation of the \"deep contents\" of the specified\n array.",
                "modAndType": "static String"
            },
            {
                "name": "equals(boolean[] a,\n      boolean[] a2)",
                "description": "Returns true if the two specified arrays of booleans are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(byte[] a,\n      byte[] a2)",
                "description": "Returns true if the two specified arrays of bytes are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(char[] a,\n      char[] a2)",
                "description": "Returns true if the two specified arrays of chars are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(double[] a,\n      double[] a2)",
                "description": "Returns true if the two specified arrays of doubles are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(float[] a,\n      float[] a2)",
                "description": "Returns true if the two specified arrays of floats are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(int[] a,\n      int[] a2)",
                "description": "Returns true if the two specified arrays of ints are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(long[] a,\n      long[] a2)",
                "description": "Returns true if the two specified arrays of longs are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(Object[] a,\n      Object[] a2)",
                "description": "Returns true if the two specified arrays of Objects are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "equals(short[] a,\n      short[] a2)",
                "description": "Returns true if the two specified arrays of shorts are\n equal to one another.",
                "modAndType": "static boolean"
            },
            {
                "name": "fill(boolean[] a,\n    boolean val)",
                "description": "Assigns the specified boolean value to each element of the specified\n array of booleans.",
                "modAndType": "static void"
            },
            {
                "name": "fill(boolean[] a,\n    int fromIndex,\n    int toIndex,\n    boolean val)",
                "description": "Assigns the specified boolean value to each element of the specified\n range of the specified array of booleans.",
                "modAndType": "static void"
            },
            {
                "name": "fill(byte[] a,\n    byte val)",
                "description": "Assigns the specified byte value to each element of the specified array\n of bytes.",
                "modAndType": "static void"
            },
            {
                "name": "fill(byte[] a,\n    int fromIndex,\n    int toIndex,\n    byte val)",
                "description": "Assigns the specified byte value to each element of the specified\n range of the specified array of bytes.",
                "modAndType": "static void"
            },
            {
                "name": "fill(char[] a,\n    char val)",
                "description": "Assigns the specified char value to each element of the specified array\n of chars.",
                "modAndType": "static void"
            },
            {
                "name": "fill(char[] a,\n    int fromIndex,\n    int toIndex,\n    char val)",
                "description": "Assigns the specified char value to each element of the specified\n range of the specified array of chars.",
                "modAndType": "static void"
            },
            {
                "name": "fill(double[] a,\n    double val)",
                "description": "Assigns the specified double value to each element of the specified\n array of doubles.",
                "modAndType": "static void"
            },
            {
                "name": "fill(double[] a,\n    int fromIndex,\n    int toIndex,\n    double val)",
                "description": "Assigns the specified double value to each element of the specified\n range of the specified array of doubles.",
                "modAndType": "static void"
            },
            {
                "name": "fill(float[] a,\n    float val)",
                "description": "Assigns the specified float value to each element of the specified array\n of floats.",
                "modAndType": "static void"
            },
            {
                "name": "fill(float[] a,\n    int fromIndex,\n    int toIndex,\n    float val)",
                "description": "Assigns the specified float value to each element of the specified\n range of the specified array of floats.",
                "modAndType": "static void"
            },
            {
                "name": "fill(int[] a,\n    int val)",
                "description": "Assigns the specified int value to each element of the specified array\n of ints.",
                "modAndType": "static void"
            },
            {
                "name": "fill(int[] a,\n    int fromIndex,\n    int toIndex,\n    int val)",
                "description": "Assigns the specified int value to each element of the specified\n range of the specified array of ints.",
                "modAndType": "static void"
            },
            {
                "name": "fill(long[] a,\n    int fromIndex,\n    int toIndex,\n    long val)",
                "description": "Assigns the specified long value to each element of the specified\n range of the specified array of longs.",
                "modAndType": "static void"
            },
            {
                "name": "fill(long[] a,\n    long val)",
                "description": "Assigns the specified long value to each element of the specified array\n of longs.",
                "modAndType": "static void"
            },
            {
                "name": "fill(Object[] a,\n    int fromIndex,\n    int toIndex,\n    Object val)",
                "description": "Assigns the specified Object reference to each element of the specified\n range of the specified array of Objects.",
                "modAndType": "static void"
            },
            {
                "name": "fill(Object[] a,\n    Object val)",
                "description": "Assigns the specified Object reference to each element of the specified\n array of Objects.",
                "modAndType": "static void"
            },
            {
                "name": "fill(short[] a,\n    int fromIndex,\n    int toIndex,\n    short val)",
                "description": "Assigns the specified short value to each element of the specified\n range of the specified array of shorts.",
                "modAndType": "static void"
            },
            {
                "name": "fill(short[] a,\n    short val)",
                "description": "Assigns the specified short value to each element of the specified array\n of shorts.",
                "modAndType": "static void"
            },
            {
                "name": "hashCode(boolean[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(byte[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(char[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(double[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(float[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(int[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(long[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(Object[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "hashCode(short[] a)",
                "description": "Returns a hash code based on the contents of the specified array.",
                "modAndType": "static int"
            },
            {
                "name": "parallelPrefix(double[] array,\n              DoubleBinaryOperator op)",
                "description": "Cumulates, in parallel, each element of the given array in place,\n using the supplied function.",
                "modAndType": "static void"
            },
            {
                "name": "parallelPrefix(double[] array,\n              int fromIndex,\n              int toIndex,\n              DoubleBinaryOperator op)",
                "description": "Performs parallelPrefix(double[], DoubleBinaryOperator)\n for the given subrange of the array.",
                "modAndType": "static void"
            },
            {
                "name": "parallelPrefix(int[] array,\n              IntBinaryOperator op)",
                "description": "Cumulates, in parallel, each element of the given array in place,\n using the supplied function.",
                "modAndType": "static void"
            },
            {
                "name": "parallelPrefix(int[] array,\n              int fromIndex,\n              int toIndex,\n              IntBinaryOperator op)",
                "description": "Performs parallelPrefix(int[], IntBinaryOperator)\n for the given subrange of the array.",
                "modAndType": "static void"
            },
            {
                "name": "parallelPrefix(long[] array,\n              int fromIndex,\n              int toIndex,\n              LongBinaryOperator op)",
                "description": "Performs parallelPrefix(long[], LongBinaryOperator)\n for the given subrange of the array.",
                "modAndType": "static void"
            },
            {
                "name": "parallelPrefix(long[] array,\n              LongBinaryOperator op)",
                "description": "Cumulates, in parallel, each element of the given array in place,\n using the supplied function.",
                "modAndType": "static void"
            },
            {
                "name": "parallelPrefix(T[] array,\n              BinaryOperator<T> op)",
                "description": "Cumulates, in parallel, each element of the given array in place,\n using the supplied function.",
                "modAndType": "static <T> void"
            },
            {
                "name": "parallelPrefix(T[] array,\n              int fromIndex,\n              int toIndex,\n              BinaryOperator<T> op)",
                "description": "Performs parallelPrefix(Object[], BinaryOperator)\n for the given subrange of the array.",
                "modAndType": "static <T> void"
            },
            {
                "name": "parallelSetAll(double[] array,\n              IntToDoubleFunction generator)",
                "description": "Set all elements of the specified array, in parallel, using the\n provided generator function to compute each element.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSetAll(int[] array,\n              IntUnaryOperator generator)",
                "description": "Set all elements of the specified array, in parallel, using the\n provided generator function to compute each element.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSetAll(long[] array,\n              IntToLongFunction generator)",
                "description": "Set all elements of the specified array, in parallel, using the\n provided generator function to compute each element.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSetAll(T[] array,\n              IntFunction<? extends T> generator)",
                "description": "Set all elements of the specified array, in parallel, using the\n provided generator function to compute each element.",
                "modAndType": "static <T> void"
            },
            {
                "name": "parallelSort(byte[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(byte[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(char[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(char[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(double[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(double[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(float[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(float[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(int[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(int[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(long[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(long[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(short[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(short[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "parallelSort(T[] a)",
                "description": "Sorts the specified array of objects into ascending order, according\n to the natural ordering of its elements.",
                "modAndType": "static <T extends Comparable<? super T>>void"
            },
            {
                "name": "parallelSort(T[] a,\n            Comparator<? super T> cmp)",
                "description": "Sorts the specified array of objects according to the order induced by\n the specified comparator.",
                "modAndType": "static <T> void"
            },
            {
                "name": "parallelSort(T[] a,\n            int fromIndex,\n            int toIndex)",
                "description": "Sorts the specified range of the specified array of objects into\n ascending order, according to the\n natural ordering of its\n elements.",
                "modAndType": "static <T extends Comparable<? super T>>void"
            },
            {
                "name": "parallelSort(T[] a,\n            int fromIndex,\n            int toIndex,\n            Comparator<? super T> cmp)",
                "description": "Sorts the specified range of the specified array of objects according\n to the order induced by the specified comparator.",
                "modAndType": "static <T> void"
            },
            {
                "name": "setAll(double[] array,\n      IntToDoubleFunction generator)",
                "description": "Set all elements of the specified array, using the provided\n generator function to compute each element.",
                "modAndType": "static void"
            },
            {
                "name": "setAll(int[] array,\n      IntUnaryOperator generator)",
                "description": "Set all elements of the specified array, using the provided\n generator function to compute each element.",
                "modAndType": "static void"
            },
            {
                "name": "setAll(long[] array,\n      IntToLongFunction generator)",
                "description": "Set all elements of the specified array, using the provided\n generator function to compute each element.",
                "modAndType": "static void"
            },
            {
                "name": "setAll(T[] array,\n      IntFunction<? extends T> generator)",
                "description": "Set all elements of the specified array, using the provided\n generator function to compute each element.",
                "modAndType": "static <T> void"
            },
            {
                "name": "sort(byte[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(byte[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(char[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(char[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(double[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(double[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(float[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(float[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(int[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(int[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(long[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(long[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(Object[] a)",
                "description": "Sorts the specified array of objects into ascending order, according\n to the natural ordering of its elements.",
                "modAndType": "static void"
            },
            {
                "name": "sort(Object[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the specified array of objects into\n ascending order, according to the\n natural ordering of its\n elements.",
                "modAndType": "static void"
            },
            {
                "name": "sort(short[] a)",
                "description": "Sorts the specified array into ascending numerical order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(short[] a,\n    int fromIndex,\n    int toIndex)",
                "description": "Sorts the specified range of the array into ascending order.",
                "modAndType": "static void"
            },
            {
                "name": "sort(T[] a,\n    Comparator<? super T> c)",
                "description": "Sorts the specified array of objects according to the order induced by\n the specified comparator.",
                "modAndType": "static <T> void"
            },
            {
                "name": "sort(T[] a,\n    int fromIndex,\n    int toIndex,\n    Comparator<? super T> c)",
                "description": "Sorts the specified range of the specified array of objects according\n to the order induced by the specified comparator.",
                "modAndType": "static <T> void"
            },
            {
                "name": "spliterator(double[] array)",
                "description": "Returns a Spliterator.OfDouble covering all of the specified\n array.",
                "modAndType": "static Spliterator.OfDouble"
            },
            {
                "name": "spliterator(double[] array,\n           int startInclusive,\n           int endExclusive)",
                "description": "Returns a Spliterator.OfDouble covering the specified range of\n the specified array.",
                "modAndType": "static Spliterator.OfDouble"
            },
            {
                "name": "spliterator(int[] array)",
                "description": "Returns a Spliterator.OfInt covering all of the specified array.",
                "modAndType": "static Spliterator.OfInt"
            },
            {
                "name": "spliterator(int[] array,\n           int startInclusive,\n           int endExclusive)",
                "description": "Returns a Spliterator.OfInt covering the specified range of the\n specified array.",
                "modAndType": "static Spliterator.OfInt"
            },
            {
                "name": "spliterator(long[] array)",
                "description": "Returns a Spliterator.OfLong covering all of the specified array.",
                "modAndType": "static Spliterator.OfLong"
            },
            {
                "name": "spliterator(long[] array,\n           int startInclusive,\n           int endExclusive)",
                "description": "Returns a Spliterator.OfLong covering the specified range of the\n specified array.",
                "modAndType": "static Spliterator.OfLong"
            },
            {
                "name": "spliterator(T[] array)",
                "description": "Returns a Spliterator covering all of the specified array.",
                "modAndType": "static <T> Spliterator<T>"
            },
            {
                "name": "spliterator(T[] array,\n           int startInclusive,\n           int endExclusive)",
                "description": "Returns a Spliterator covering the specified range of the\n specified array.",
                "modAndType": "static <T> Spliterator<T>"
            },
            {
                "name": "stream(double[] array)",
                "description": "Returns a sequential DoubleStream with the specified array as its\n source.",
                "modAndType": "static DoubleStream"
            },
            {
                "name": "stream(double[] array,\n      int startInclusive,\n      int endExclusive)",
                "description": "Returns a sequential DoubleStream with the specified range of the\n specified array as its source.",
                "modAndType": "static DoubleStream"
            },
            {
                "name": "stream(int[] array)",
                "description": "Returns a sequential IntStream with the specified array as its\n source.",
                "modAndType": "static IntStream"
            },
            {
                "name": "stream(int[] array,\n      int startInclusive,\n      int endExclusive)",
                "description": "Returns a sequential IntStream with the specified range of the\n specified array as its source.",
                "modAndType": "static IntStream"
            },
            {
                "name": "stream(long[] array)",
                "description": "Returns a sequential LongStream with the specified array as its\n source.",
                "modAndType": "static LongStream"
            },
            {
                "name": "stream(long[] array,\n      int startInclusive,\n      int endExclusive)",
                "description": "Returns a sequential LongStream with the specified range of the\n specified array as its source.",
                "modAndType": "static LongStream"
            },
            {
                "name": "stream(T[] array)",
                "description": "Returns a sequential Stream with the specified array as its\n source.",
                "modAndType": "static <T> Stream<T>"
            },
            {
                "name": "stream(T[] array,\n      int startInclusive,\n      int endExclusive)",
                "description": "Returns a sequential Stream with the specified range of the\n specified array as its source.",
                "modAndType": "static <T> Stream<T>"
            },
            {
                "name": "toString(boolean[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(byte[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(char[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(double[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(float[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(int[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(long[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(Object[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            },
            {
                "name": "toString(short[] a)",
                "description": "Returns a string representation of the contents of the specified array.",
                "modAndType": "static String"
            }
        ],
        "href": "java/util/Arrays.html"
    },
    {
        "name": "ArrayStoreException",
        "constructors": [
            {
                "name": "ArrayStoreException()",
                "description": "Constructs an ArrayStoreException with no detail message."
            },
            {
                "name": "ArrayStoreException(String s)",
                "description": "Constructs an ArrayStoreException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "java/lang/ArrayStoreException.html"
    },
    {
        "name": "ArrayType",
        "constructors": [],
        "methods": [
            {
                "name": "getComponentType()",
                "description": "Returns the component type of this array type.",
                "modAndType": "TypeMirror"
            }
        ],
        "href": "javax/lang/model/type/ArrayType.html"
    },
    {
        "name": "ArrayType",
        "constructors": [
            {
                "name": "ArrayType(int dimension,\n         OpenType<?> elementType)",
                "description": "Constructs an ArrayType instance describing open data values which are\n arrays with dimension dimension of elements whose open type is elementType."
            },
            {
                "name": "ArrayType(SimpleType<?> elementType,\n         boolean primitiveArray)",
                "description": "Constructs a unidimensional ArrayType instance for the\n supplied SimpleType."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Compares the specified obj parameter with this\n ArrayType instance for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getArrayType(OpenType<E> elementType)",
                "description": "Create an ArrayType instance in a type-safe manner.",
                "modAndType": "static <E> ArrayType<E[]>"
            },
            {
                "name": "getDimension()",
                "description": "Returns the dimension of arrays described by this ArrayType instance.",
                "modAndType": "int"
            },
            {
                "name": "getElementOpenType()",
                "description": "Returns the open type of element values contained in the arrays described by this ArrayType instance.",
                "modAndType": "OpenType<?>"
            },
            {
                "name": "getPrimitiveArrayType(Class<T> arrayClass)",
                "description": "Create an ArrayType instance in a type-safe manner.",
                "modAndType": "static <T> ArrayType<T>"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this ArrayType instance.",
                "modAndType": "int"
            },
            {
                "name": "isPrimitiveArray()",
                "description": "Returns true if the open data values this open\n type describes are primitive arrays, false otherwise.",
                "modAndType": "boolean"
            },
            {
                "name": "isValue(Object obj)",
                "description": "Tests whether obj is a value for this ArrayType\n instance.",
                "modAndType": "boolean"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this ArrayType instance.",
                "modAndType": "String"
            }
        ],
        "href": "javax/management/openmbean/ArrayType.html"
    },
    {
        "name": "AssertionError",
        "constructors": [
            {
                "name": "AssertionError()",
                "description": "Constructs an AssertionError with no detail message."
            },
            {
                "name": "AssertionError(boolean detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified boolean, which is converted to\n a string as defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(char detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified char, which is converted to a\n string as defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(double detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified double, which is converted to a\n string as defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(float detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified float, which is converted to a\n string as defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(int detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified int, which is converted to a\n string as defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(long detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified long, which is converted to a\n string as defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(Object detailMessage)",
                "description": "Constructs an AssertionError with its detail message derived\n from the specified object, which is converted to a string as\n defined in section 15.18.1.1 of\n The Java™ Language Specification."
            },
            {
                "name": "AssertionError(String message,\n              Throwable cause)",
                "description": "Constructs a new AssertionError with the specified\n detail message and cause."
            }
        ],
        "methods": [],
        "href": "java/lang/AssertionError.html"
    },
    {
        "name": "AsyncBoxView",
        "constructors": [
            {
                "name": "AsyncBoxView(Element elem,\n            int axis)",
                "description": "Construct a box view that does asynchronous layout."
            }
        ],
        "methods": [
            {
                "name": "createChildState(View v)",
                "description": "New ChildState records are created through\n this method to allow subclasses the extend\n the ChildState records to do/hold more",
                "modAndType": "protected AsyncBoxView.ChildState"
            },
            {
                "name": "flushRequirementChanges()",
                "description": "Publish the changes in preferences upward to the parent\n view.",
                "modAndType": "protected void"
            },
            {
                "name": "getBottomInset()",
                "description": "Get the bottom part of the margin around the view.",
                "modAndType": "float"
            },
            {
                "name": "getChildAllocation(int index,\n                  Shape a)",
                "description": "Fetches the allocation for the given child view.",
                "modAndType": "Shape"
            },
            {
                "name": "getChildState(int index)",
                "description": "Fetch the object representing the layout state of\n of the child at the given index.",
                "modAndType": "protected AsyncBoxView.ChildState"
            },
            {
                "name": "getEstimatedMajorSpan()",
                "description": "Is the major span currently estimated?",
                "modAndType": "protected boolean"
            },
            {
                "name": "getInsetSpan(int axis)",
                "description": "Fetch the span along an axis that is taken up by the insets.",
                "modAndType": "protected float"
            },
            {
                "name": "getLayoutQueue()",
                "description": "Fetch the queue to use for layout.",
                "modAndType": "protected LayoutQueue"
            },
            {
                "name": "getLeftInset()",
                "description": "Get the left part of the margin around the view.",
                "modAndType": "float"
            },
            {
                "name": "getMajorAxis()",
                "description": "Fetch the major axis (the axis the children\n are tiled along).",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSpan(int axis)",
                "description": "Determines the maximum span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getMinimumSpan(int axis)",
                "description": "Determines the minimum span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getMinorAxis()",
                "description": "Fetch the minor axis (the axis orthogonal\n to the tiled axis).",
                "modAndType": "int"
            },
            {
                "name": "getNextVisualPositionFrom(int pos,\n                         Position.Bias b,\n                         Shape a,\n                         int direction,\n                         Position.Bias[] biasRet)",
                "description": "Provides a way to determine the next visually represented model\n location that one might place a caret.",
                "modAndType": "int"
            },
            {
                "name": "getPreferredSpan(int axis)",
                "description": "Determines the preferred span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getRightInset()",
                "description": "Get the right part of the margin around the view.",
                "modAndType": "float"
            },
            {
                "name": "getTopInset()",
                "description": "Get the top part of the margin around the view.",
                "modAndType": "float"
            },
            {
                "name": "getView(int n)",
                "description": "Gets the nth child view.",
                "modAndType": "View"
            },
            {
                "name": "getViewCount()",
                "description": "Returns the number of views in this view.",
                "modAndType": "int"
            },
            {
                "name": "getViewIndex(int pos,\n            Position.Bias b)",
                "description": "Returns the child view index representing the given position in\n the model.",
                "modAndType": "int"
            },
            {
                "name": "getViewIndexAtPosition(int pos,\n                      Position.Bias b)",
                "description": "Fetches the child view index representing the given position in\n the model.",
                "modAndType": "protected int"
            },
            {
                "name": "loadChildren(ViewFactory f)",
                "description": "Loads all of the children to initialize the view.",
                "modAndType": "protected void"
            },
            {
                "name": "majorRequirementChange(AsyncBoxView.ChildState cs,\n                      float delta)",
                "description": "Requirements changed along the major axis.",
                "modAndType": "protected void"
            },
            {
                "name": "minorRequirementChange(AsyncBoxView.ChildState cs)",
                "description": "Requirements changed along the minor axis.",
                "modAndType": "protected void"
            },
            {
                "name": "modelToView(int pos,\n           Shape a,\n           Position.Bias b)",
                "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it.",
                "modAndType": "Shape"
            },
            {
                "name": "paint(Graphics g,\n     Shape alloc)",
                "description": "Render the view using the given allocation and\n rendering surface.",
                "modAndType": "void"
            },
            {
                "name": "preferenceChanged(View child,\n                 boolean width,\n                 boolean height)",
                "description": "Child views can call this on the parent to indicate that\n the preference has changed and should be reconsidered\n for layout.",
                "modAndType": "void"
            },
            {
                "name": "replace(int offset,\n       int length,\n       View[] views)",
                "description": "Calls the superclass to update the child views, and\n updates the status records for the children.",
                "modAndType": "void"
            },
            {
                "name": "setBottomInset(float i)",
                "description": "Set the bottom part of the margin around the view.",
                "modAndType": "void"
            },
            {
                "name": "setEstimatedMajorSpan(boolean isEstimated)",
                "description": "Set the estimatedMajorSpan property that determines if the\n major span should be treated as being estimated.",
                "modAndType": "protected void"
            },
            {
                "name": "setLeftInset(float i)",
                "description": "Set the left part of the margin around the view.",
                "modAndType": "void"
            },
            {
                "name": "setParent(View parent)",
                "description": "Sets the parent of the view.",
                "modAndType": "void"
            },
            {
                "name": "setRightInset(float i)",
                "description": "Set the right part of the margin around the view.",
                "modAndType": "void"
            },
            {
                "name": "setSize(float width,\n       float height)",
                "description": "Sets the size of the view.",
                "modAndType": "void"
            },
            {
                "name": "setTopInset(float i)",
                "description": "Set the top part of the margin around the view.",
                "modAndType": "void"
            },
            {
                "name": "updateLayout(DocumentEvent.ElementChange ec,\n            DocumentEvent e,\n            Shape a)",
                "description": "Update the layout in response to receiving notification of\n change from the model.",
                "modAndType": "protected void"
            },
            {
                "name": "viewToModel(float x,\n           float y,\n           Shape a,\n           Position.Bias[] biasReturn)",
                "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model.",
                "modAndType": "int"
            }
        ],
        "href": "javax/swing/text/AsyncBoxView.html"
    },
    {
        "name": "AsyncHandler",
        "constructors": [],
        "methods": [
            {
                "name": "handleResponse(Response<T> res)",
                "description": "Called when the response to an asynchronous operation is available.",
                "modAndType": "void"
            }
        ],
        "href": "javax/xml/ws/AsyncHandler.html"
    },
    {
        "name": "AsynchronousByteChannel",
        "constructors": [],
        "methods": [
            {
                "name": "read(ByteBuffer dst)",
                "description": "Reads a sequence of bytes from this channel into the given buffer.",
                "modAndType": "Future<Integer>"
            },
            {
                "name": "read(ByteBuffer dst,\n    A attachment,\n    CompletionHandler<Integer,? super A> handler)",
                "description": "Reads a sequence of bytes from this channel into the given buffer.",
                "modAndType": "<A> void"
            },
            {
                "name": "write(ByteBuffer src)",
                "description": "Writes a sequence of bytes to this channel from the given buffer.",
                "modAndType": "Future<Integer>"
            },
            {
                "name": "write(ByteBuffer src,\n     A attachment,\n     CompletionHandler<Integer,? super A> handler)",
                "description": "Writes a sequence of bytes to this channel from the given buffer.",
                "modAndType": "<A> void"
            }
        ],
        "href": "java/nio/channels/AsynchronousByteChannel.html"
    },
    {
        "name": "AsynchronousChannel",
        "constructors": [],
        "methods": [
            {
                "name": "close()",
                "description": "Closes this channel.",
                "modAndType": "void"
            }
        ],
        "href": "java/nio/channels/AsynchronousChannel.html"
    },
    {
        "name": "AsynchronousChannelGroup",
        "constructors": [
            {
                "name": "protected AsynchronousChannelGroup(AsynchronousChannelProvider provider)",
                "description": "Initialize a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "awaitTermination(long timeout,\n                TimeUnit unit)",
                "description": "Awaits termination of the group.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "isShutdown()",
                "description": "Tells whether or not this asynchronous channel group is shutdown.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "isTerminated()",
                "description": "Tells whether or not this group has terminated.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "provider()",
                "description": "Returns the provider that created this channel group.",
                "modAndType": "AsynchronousChannelProvider"
            },
            {
                "name": "shutdown()",
                "description": "Initiates an orderly shutdown of the group.",
                "modAndType": "abstract void"
            },
            {
                "name": "shutdownNow()",
                "description": "Shuts down the group and closes all open channels in the group.",
                "modAndType": "abstract void"
            },
            {
                "name": "withCachedThreadPool(ExecutorService executor,\n                    int initialSize)",
                "description": "Creates an asynchronous channel group with a given thread pool that\n creates new threads as needed.",
                "modAndType": "static AsynchronousChannelGroup"
            },
            {
                "name": "withFixedThreadPool(int nThreads,\n                   ThreadFactory threadFactory)",
                "description": "Creates an asynchronous channel group with a fixed thread pool.",
                "modAndType": "static AsynchronousChannelGroup"
            },
            {
                "name": "withThreadPool(ExecutorService executor)",
                "description": "Creates an asynchronous channel group with a given thread pool.",
                "modAndType": "static AsynchronousChannelGroup"
            }
        ],
        "href": "java/nio/channels/AsynchronousChannelGroup.html"
    },
    {
        "name": "AsynchronousChannelProvider",
        "constructors": [
            {
                "name": "protected AsynchronousChannelProvider()",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "openAsynchronousChannelGroup(ExecutorService executor,\n                            int initialSize)",
                "description": "Constructs a new asynchronous channel group with the given thread pool.",
                "modAndType": "abstract AsynchronousChannelGroup"
            },
            {
                "name": "openAsynchronousChannelGroup(int nThreads,\n                            ThreadFactory threadFactory)",
                "description": "Constructs a new asynchronous channel group with a fixed thread pool.",
                "modAndType": "abstract AsynchronousChannelGroup"
            },
            {
                "name": "openAsynchronousServerSocketChannel(AsynchronousChannelGroup group)",
                "description": "Opens an asynchronous server-socket channel.",
                "modAndType": "abstract AsynchronousServerSocketChannel"
            },
            {
                "name": "openAsynchronousSocketChannel(AsynchronousChannelGroup group)",
                "description": "Opens an asynchronous socket channel.",
                "modAndType": "abstract AsynchronousSocketChannel"
            },
            {
                "name": "provider()",
                "description": "Returns the system-wide default asynchronous channel provider for this\n invocation of the Java virtual machine.",
                "modAndType": "static AsynchronousChannelProvider"
            }
        ],
        "href": "java/nio/channels/spi/AsynchronousChannelProvider.html"
    },
    {
        "name": "AsynchronousCloseException",
        "constructors": [
            {
                "name": "AsynchronousCloseException()",
                "description": "Constructs an instance of this class."
            }
        ],
        "methods": [],
        "href": "java/nio/channels/AsynchronousCloseException.html"
    },
    {
        "name": "AsynchronousFileChannel",
        "constructors": [
            {
                "name": "protected AsynchronousFileChannel()",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "force(boolean metaData)",
                "description": "Forces any updates to this channel's file to be written to the storage\n device that contains it.",
                "modAndType": "abstract void"
            },
            {
                "name": "lock()",
                "description": "Acquires an exclusive lock on this channel's file.",
                "modAndType": "Future<FileLock>"
            },
            {
                "name": "lock(A attachment,\n    CompletionHandler<FileLock,? super A> handler)",
                "description": "Acquires an exclusive lock on this channel's file.",
                "modAndType": "<A> void"
            },
            {
                "name": "lock(long position,\n    long size,\n    boolean shared)",
                "description": "Acquires a lock on the given region of this channel's file.",
                "modAndType": "abstract Future<FileLock>"
            },
            {
                "name": "lock(long position,\n    long size,\n    boolean shared,\n    A attachment,\n    CompletionHandler<FileLock,? super A> handler)",
                "description": "Acquires a lock on the given region of this channel's file.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "open(Path file,\n    OpenOption... options)",
                "description": "Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file.",
                "modAndType": "static AsynchronousFileChannel"
            },
            {
                "name": "open(Path file,\n    Set<? extends OpenOption> options,\n    ExecutorService executor,\n    FileAttribute<?>... attrs)",
                "description": "Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file.",
                "modAndType": "static AsynchronousFileChannel"
            },
            {
                "name": "read(ByteBuffer dst,\n    long position)",
                "description": "Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.",
                "modAndType": "abstract Future<Integer>"
            },
            {
                "name": "read(ByteBuffer dst,\n    long position,\n    A attachment,\n    CompletionHandler<Integer,? super A> handler)",
                "description": "Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "size()",
                "description": "Returns the current size of this channel's file.",
                "modAndType": "abstract long"
            },
            {
                "name": "truncate(long size)",
                "description": "Truncates this channel's file to the given size.",
                "modAndType": "abstract AsynchronousFileChannel"
            },
            {
                "name": "tryLock()",
                "description": "Attempts to acquire an exclusive lock on this channel's file.",
                "modAndType": "FileLock"
            },
            {
                "name": "tryLock(long position,\n       long size,\n       boolean shared)",
                "description": "Attempts to acquire a lock on the given region of this channel's file.",
                "modAndType": "abstract FileLock"
            },
            {
                "name": "write(ByteBuffer src,\n     long position)",
                "description": "Writes a sequence of bytes to this channel from the given buffer, starting\n at the given file position.",
                "modAndType": "abstract Future<Integer>"
            },
            {
                "name": "write(ByteBuffer src,\n     long position,\n     A attachment,\n     CompletionHandler<Integer,? super A> handler)",
                "description": "Writes a sequence of bytes to this channel from the given buffer, starting\n at the given file position.",
                "modAndType": "abstract <A> void"
            }
        ],
        "href": "java/nio/channels/AsynchronousFileChannel.html"
    },
    {
        "name": "AsynchronousServerSocketChannel",
        "constructors": [
            {
                "name": "protected AsynchronousServerSocketChannel(AsynchronousChannelProvider provider)",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "accept()",
                "description": "Accepts a connection.",
                "modAndType": "abstract Future<AsynchronousSocketChannel>"
            },
            {
                "name": "accept(A attachment,\n      CompletionHandler<AsynchronousSocketChannel,? super A> handler)",
                "description": "Accepts a connection.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "bind(SocketAddress local)",
                "description": "Binds the channel's socket to a local address and configures the socket to\n listen for connections.",
                "modAndType": "AsynchronousServerSocketChannel"
            },
            {
                "name": "bind(SocketAddress local,\n    int backlog)",
                "description": "Binds the channel's socket to a local address and configures the socket to\n listen for connections.",
                "modAndType": "abstract AsynchronousServerSocketChannel"
            },
            {
                "name": "getLocalAddress()",
                "description": "Returns the socket address that this channel's socket is bound to.",
                "modAndType": "abstract SocketAddress"
            },
            {
                "name": "open()",
                "description": "Opens an asynchronous server-socket channel.",
                "modAndType": "static AsynchronousServerSocketChannel"
            },
            {
                "name": "open(AsynchronousChannelGroup group)",
                "description": "Opens an asynchronous server-socket channel.",
                "modAndType": "static AsynchronousServerSocketChannel"
            },
            {
                "name": "provider()",
                "description": "Returns the provider that created this channel.",
                "modAndType": "AsynchronousChannelProvider"
            },
            {
                "name": "setOption(SocketOption<T> name,\n         T value)",
                "description": "Sets the value of a socket option.",
                "modAndType": "abstract <T> AsynchronousServerSocketChannel"
            }
        ],
        "href": "java/nio/channels/AsynchronousServerSocketChannel.html"
    },
    {
        "name": "AsynchronousSocketChannel",
        "constructors": [
            {
                "name": "protected AsynchronousSocketChannel(AsynchronousChannelProvider provider)",
                "description": "Initializes a new instance of this class."
            }
        ],
        "methods": [
            {
                "name": "bind(SocketAddress local)",
                "description": "Binds the channel's socket to a local address.",
                "modAndType": "abstract AsynchronousSocketChannel"
            },
            {
                "name": "connect(SocketAddress remote)",
                "description": "Connects this channel.",
                "modAndType": "abstract Future<Void>"
            },
            {
                "name": "connect(SocketAddress remote,\n       A attachment,\n       CompletionHandler<Void,? super A> handler)",
                "description": "Connects this channel.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "getLocalAddress()",
                "description": "Returns the socket address that this channel's socket is bound to.",
                "modAndType": "abstract SocketAddress"
            },
            {
                "name": "getRemoteAddress()",
                "description": "Returns the remote address to which this channel's socket is connected.",
                "modAndType": "abstract SocketAddress"
            },
            {
                "name": "open()",
                "description": "Opens an asynchronous socket channel.",
                "modAndType": "static AsynchronousSocketChannel"
            },
            {
                "name": "open(AsynchronousChannelGroup group)",
                "description": "Opens an asynchronous socket channel.",
                "modAndType": "static AsynchronousSocketChannel"
            },
            {
                "name": "provider()",
                "description": "Returns the provider that created this channel.",
                "modAndType": "AsynchronousChannelProvider"
            },
            {
                "name": "read(ByteBuffer dst)",
                "description": "Reads a sequence of bytes from this channel into the given buffer.",
                "modAndType": "abstract Future<Integer>"
            },
            {
                "name": "read(ByteBuffer[] dsts,\n    int offset,\n    int length,\n    long timeout,\n    TimeUnit unit,\n    A attachment,\n    CompletionHandler<Long,? super A> handler)",
                "description": "Reads a sequence of bytes from this channel into a subsequence of the\n given buffers.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "read(ByteBuffer dst,\n    A attachment,\n    CompletionHandler<Integer,? super A> handler)",
                "description": "Reads a sequence of bytes from this channel into the given buffer.",
                "modAndType": "<A> void"
            },
            {
                "name": "read(ByteBuffer dst,\n    long timeout,\n    TimeUnit unit,\n    A attachment,\n    CompletionHandler<Integer,? super A> handler)",
                "description": "Reads a sequence of bytes from this channel into the given buffer.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "setOption(SocketOption<T> name,\n         T value)",
                "description": "Sets the value of a socket option.",
                "modAndType": "abstract <T> AsynchronousSocketChannel"
            },
            {
                "name": "shutdownInput()",
                "description": "Shutdown the connection for reading without closing the channel.",
                "modAndType": "abstract AsynchronousSocketChannel"
            },
            {
                "name": "shutdownOutput()",
                "description": "Shutdown the connection for writing without closing the channel.",
                "modAndType": "abstract AsynchronousSocketChannel"
            },
            {
                "name": "write(ByteBuffer src)",
                "description": "Writes a sequence of bytes to this channel from the given buffer.",
                "modAndType": "abstract Future<Integer>"
            },
            {
                "name": "write(ByteBuffer[] srcs,\n     int offset,\n     int length,\n     long timeout,\n     TimeUnit unit,\n     A attachment,\n     CompletionHandler<Long,? super A> handler)",
                "description": "Writes a sequence of bytes to this channel from a subsequence of the given\n buffers.",
                "modAndType": "abstract <A> void"
            },
            {
                "name": "write(ByteBuffer src,\n     A attachment,\n     CompletionHandler<Integer,? super A> handler)",
                "description": "Writes a sequence of bytes to this channel from the given buffer.",
                "modAndType": "<A> void"
            },
            {
                "name": "write(ByteBuffer src,\n     long timeout,\n     TimeUnit unit,\n     A attachment,\n     CompletionHandler<Integer,? super A> handler)",
                "description": "Writes a sequence of bytes to this channel from the given buffer.",
                "modAndType": "abstract <A> void"
            }
        ],
        "href": "java/nio/channels/AsynchronousSocketChannel.html"
    },
    {
        "name": "AtomicBoolean",
        "constructors": [
            {
                "name": "AtomicBoolean()",
                "description": "Creates a new AtomicBoolean with initial value false."
            },
            {
                "name": "AtomicBoolean(boolean initialValue)",
                "description": "Creates a new AtomicBoolean with the given initial value."
            }
        ],
        "methods": [
            {
                "name": "compareAndSet(boolean expect,\n             boolean update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "get()",
                "description": "Returns the current value.",
                "modAndType": "boolean"
            },
            {
                "name": "getAndSet(boolean newValue)",
                "description": "Atomically sets to the given value and returns the previous value.",
                "modAndType": "boolean"
            },
            {
                "name": "lazySet(boolean newValue)",
                "description": "Eventually sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "set(boolean newValue)",
                "description": "Unconditionally sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current value.",
                "modAndType": "String"
            },
            {
                "name": "weakCompareAndSet(boolean expect,\n                 boolean update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicBoolean.html"
    },
    {
        "name": "AtomicInteger",
        "constructors": [
            {
                "name": "AtomicInteger()",
                "description": "Creates a new AtomicInteger with initial value 0."
            },
            {
                "name": "AtomicInteger(int initialValue)",
                "description": "Creates a new AtomicInteger with the given initial value."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(int x,\n                IntBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the updated value.",
                "modAndType": "int"
            },
            {
                "name": "addAndGet(int delta)",
                "description": "Atomically adds the given value to the current value.",
                "modAndType": "int"
            },
            {
                "name": "compareAndSet(int expect,\n             int update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "decrementAndGet()",
                "description": "Atomically decrements by one the current value.",
                "modAndType": "int"
            },
            {
                "name": "doubleValue()",
                "description": "Returns the value of this AtomicInteger as a double\n after a widening primitive conversion.",
                "modAndType": "double"
            },
            {
                "name": "floatValue()",
                "description": "Returns the value of this AtomicInteger as a float\n after a widening primitive conversion.",
                "modAndType": "float"
            },
            {
                "name": "get()",
                "description": "Gets the current value.",
                "modAndType": "int"
            },
            {
                "name": "getAndAccumulate(int x,\n                IntBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the previous value.",
                "modAndType": "int"
            },
            {
                "name": "getAndAdd(int delta)",
                "description": "Atomically adds the given value to the current value.",
                "modAndType": "int"
            },
            {
                "name": "getAndDecrement()",
                "description": "Atomically decrements by one the current value.",
                "modAndType": "int"
            },
            {
                "name": "getAndIncrement()",
                "description": "Atomically increments by one the current value.",
                "modAndType": "int"
            },
            {
                "name": "getAndSet(int newValue)",
                "description": "Atomically sets to the given value and returns the old value.",
                "modAndType": "int"
            },
            {
                "name": "getAndUpdate(IntUnaryOperator updateFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function, returning the previous value.",
                "modAndType": "int"
            },
            {
                "name": "incrementAndGet()",
                "description": "Atomically increments by one the current value.",
                "modAndType": "int"
            },
            {
                "name": "intValue()",
                "description": "Returns the value of this AtomicInteger as an int.",
                "modAndType": "int"
            },
            {
                "name": "lazySet(int newValue)",
                "description": "Eventually sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "longValue()",
                "description": "Returns the value of this AtomicInteger as a long\n after a widening primitive conversion.",
                "modAndType": "long"
            },
            {
                "name": "set(int newValue)",
                "description": "Sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current value.",
                "modAndType": "String"
            },
            {
                "name": "updateAndGet(IntUnaryOperator updateFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function, returning the updated value.",
                "modAndType": "int"
            },
            {
                "name": "weakCompareAndSet(int expect,\n                 int update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicInteger.html"
    },
    {
        "name": "AtomicIntegerArray",
        "constructors": [
            {
                "name": "AtomicIntegerArray(int length)",
                "description": "Creates a new AtomicIntegerArray of the given length, with all\n elements initially zero."
            },
            {
                "name": "AtomicIntegerArray(int[] array)",
                "description": "Creates a new AtomicIntegerArray with the same length as, and\n all elements copied from, the given array."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(int i,\n                int x,\n                IntBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the updated value.",
                "modAndType": "int"
            },
            {
                "name": "addAndGet(int i,\n         int delta)",
                "description": "Atomically adds the given value to the element at index i.",
                "modAndType": "int"
            },
            {
                "name": "compareAndSet(int i,\n             int expect,\n             int update)",
                "description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "decrementAndGet(int i)",
                "description": "Atomically decrements by one the element at index i.",
                "modAndType": "int"
            },
            {
                "name": "get(int i)",
                "description": "Gets the current value at position i.",
                "modAndType": "int"
            },
            {
                "name": "getAndAccumulate(int i,\n                int x,\n                IntBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the previous value.",
                "modAndType": "int"
            },
            {
                "name": "getAndAdd(int i,\n         int delta)",
                "description": "Atomically adds the given value to the element at index i.",
                "modAndType": "int"
            },
            {
                "name": "getAndDecrement(int i)",
                "description": "Atomically decrements by one the element at index i.",
                "modAndType": "int"
            },
            {
                "name": "getAndIncrement(int i)",
                "description": "Atomically increments by one the element at index i.",
                "modAndType": "int"
            },
            {
                "name": "getAndSet(int i,\n         int newValue)",
                "description": "Atomically sets the element at position i to the given\n value and returns the old value.",
                "modAndType": "int"
            },
            {
                "name": "getAndUpdate(int i,\n            IntUnaryOperator updateFunction)",
                "description": "Atomically updates the element at index i with the results\n of applying the given function, returning the previous value.",
                "modAndType": "int"
            },
            {
                "name": "incrementAndGet(int i)",
                "description": "Atomically increments by one the element at index i.",
                "modAndType": "int"
            },
            {
                "name": "lazySet(int i,\n       int newValue)",
                "description": "Eventually sets the element at position i to the given value.",
                "modAndType": "void"
            },
            {
                "name": "length()",
                "description": "Returns the length of the array.",
                "modAndType": "int"
            },
            {
                "name": "set(int i,\n   int newValue)",
                "description": "Sets the element at position i to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current values of array.",
                "modAndType": "String"
            },
            {
                "name": "updateAndGet(int i,\n            IntUnaryOperator updateFunction)",
                "description": "Atomically updates the element at index i with the results\n of applying the given function, returning the updated value.",
                "modAndType": "int"
            },
            {
                "name": "weakCompareAndSet(int i,\n                 int expect,\n                 int update)",
                "description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicIntegerArray.html"
    },
    {
        "name": "AtomicIntegerFieldUpdater",
        "constructors": [
            {
                "name": "protected AtomicIntegerFieldUpdater()",
                "description": "Protected do-nothing constructor for use by subclasses."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(T obj,\n                int x,\n                IntBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the updated value.",
                "modAndType": "int"
            },
            {
                "name": "addAndGet(T obj,\n         int delta)",
                "description": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                "modAndType": "int"
            },
            {
                "name": "compareAndSet(T obj,\n             int expect,\n             int update)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "decrementAndGet(T obj)",
                "description": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "int"
            },
            {
                "name": "get(T obj)",
                "description": "Gets the current value held in the field of the given object managed\n by this updater.",
                "modAndType": "abstract int"
            },
            {
                "name": "getAndAccumulate(T obj,\n                int x,\n                IntBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the previous value.",
                "modAndType": "int"
            },
            {
                "name": "getAndAdd(T obj,\n         int delta)",
                "description": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                "modAndType": "int"
            },
            {
                "name": "getAndDecrement(T obj)",
                "description": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "int"
            },
            {
                "name": "getAndIncrement(T obj)",
                "description": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "int"
            },
            {
                "name": "getAndSet(T obj,\n         int newValue)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.",
                "modAndType": "int"
            },
            {
                "name": "getAndUpdate(T obj,\n            IntUnaryOperator updateFunction)",
                "description": "Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the previous\n value.",
                "modAndType": "int"
            },
            {
                "name": "incrementAndGet(T obj)",
                "description": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "int"
            },
            {
                "name": "lazySet(T obj,\n       int newValue)",
                "description": "Eventually sets the field of the given object managed by this\n updater to the given updated value.",
                "modAndType": "abstract void"
            },
            {
                "name": "newUpdater(Class<U> tclass,\n          String fieldName)",
                "description": "Creates and returns an updater for objects with the given field.",
                "modAndType": "static <U> AtomicIntegerFieldUpdater<U>"
            },
            {
                "name": "set(T obj,\n   int newValue)",
                "description": "Sets the field of the given object managed by this updater to the\n given updated value.",
                "modAndType": "abstract void"
            },
            {
                "name": "updateAndGet(T obj,\n            IntUnaryOperator updateFunction)",
                "description": "Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the updated\n value.",
                "modAndType": "int"
            },
            {
                "name": "weakCompareAndSet(T obj,\n                 int expect,\n                 int update)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value.",
                "modAndType": "abstract boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html"
    },
    {
        "name": "AtomicLong",
        "constructors": [
            {
                "name": "AtomicLong()",
                "description": "Creates a new AtomicLong with initial value 0."
            },
            {
                "name": "AtomicLong(long initialValue)",
                "description": "Creates a new AtomicLong with the given initial value."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(long x,\n                LongBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the updated value.",
                "modAndType": "long"
            },
            {
                "name": "addAndGet(long delta)",
                "description": "Atomically adds the given value to the current value.",
                "modAndType": "long"
            },
            {
                "name": "compareAndSet(long expect,\n             long update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "decrementAndGet()",
                "description": "Atomically decrements by one the current value.",
                "modAndType": "long"
            },
            {
                "name": "doubleValue()",
                "description": "Returns the value of this AtomicLong as a double\n after a widening primitive conversion.",
                "modAndType": "double"
            },
            {
                "name": "floatValue()",
                "description": "Returns the value of this AtomicLong as a float\n after a widening primitive conversion.",
                "modAndType": "float"
            },
            {
                "name": "get()",
                "description": "Gets the current value.",
                "modAndType": "long"
            },
            {
                "name": "getAndAccumulate(long x,\n                LongBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the previous value.",
                "modAndType": "long"
            },
            {
                "name": "getAndAdd(long delta)",
                "description": "Atomically adds the given value to the current value.",
                "modAndType": "long"
            },
            {
                "name": "getAndDecrement()",
                "description": "Atomically decrements by one the current value.",
                "modAndType": "long"
            },
            {
                "name": "getAndIncrement()",
                "description": "Atomically increments by one the current value.",
                "modAndType": "long"
            },
            {
                "name": "getAndSet(long newValue)",
                "description": "Atomically sets to the given value and returns the old value.",
                "modAndType": "long"
            },
            {
                "name": "getAndUpdate(LongUnaryOperator updateFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function, returning the previous value.",
                "modAndType": "long"
            },
            {
                "name": "incrementAndGet()",
                "description": "Atomically increments by one the current value.",
                "modAndType": "long"
            },
            {
                "name": "intValue()",
                "description": "Returns the value of this AtomicLong as an int\n after a narrowing primitive conversion.",
                "modAndType": "int"
            },
            {
                "name": "lazySet(long newValue)",
                "description": "Eventually sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "longValue()",
                "description": "Returns the value of this AtomicLong as a long.",
                "modAndType": "long"
            },
            {
                "name": "set(long newValue)",
                "description": "Sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current value.",
                "modAndType": "String"
            },
            {
                "name": "updateAndGet(LongUnaryOperator updateFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function, returning the updated value.",
                "modAndType": "long"
            },
            {
                "name": "weakCompareAndSet(long expect,\n                 long update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicLong.html"
    },
    {
        "name": "AtomicLongArray",
        "constructors": [
            {
                "name": "AtomicLongArray(int length)",
                "description": "Creates a new AtomicLongArray of the given length, with all\n elements initially zero."
            },
            {
                "name": "AtomicLongArray(long[] array)",
                "description": "Creates a new AtomicLongArray with the same length as, and\n all elements copied from, the given array."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(int i,\n                long x,\n                LongBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the updated value.",
                "modAndType": "long"
            },
            {
                "name": "addAndGet(int i,\n         long delta)",
                "description": "Atomically adds the given value to the element at index i.",
                "modAndType": "long"
            },
            {
                "name": "compareAndSet(int i,\n             long expect,\n             long update)",
                "description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "decrementAndGet(int i)",
                "description": "Atomically decrements by one the element at index i.",
                "modAndType": "long"
            },
            {
                "name": "get(int i)",
                "description": "Gets the current value at position i.",
                "modAndType": "long"
            },
            {
                "name": "getAndAccumulate(int i,\n                long x,\n                LongBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the previous value.",
                "modAndType": "long"
            },
            {
                "name": "getAndAdd(int i,\n         long delta)",
                "description": "Atomically adds the given value to the element at index i.",
                "modAndType": "long"
            },
            {
                "name": "getAndDecrement(int i)",
                "description": "Atomically decrements by one the element at index i.",
                "modAndType": "long"
            },
            {
                "name": "getAndIncrement(int i)",
                "description": "Atomically increments by one the element at index i.",
                "modAndType": "long"
            },
            {
                "name": "getAndSet(int i,\n         long newValue)",
                "description": "Atomically sets the element at position i to the given value\n and returns the old value.",
                "modAndType": "long"
            },
            {
                "name": "getAndUpdate(int i,\n            LongUnaryOperator updateFunction)",
                "description": "Atomically updates the element at index i with the results\n of applying the given function, returning the previous value.",
                "modAndType": "long"
            },
            {
                "name": "incrementAndGet(int i)",
                "description": "Atomically increments by one the element at index i.",
                "modAndType": "long"
            },
            {
                "name": "lazySet(int i,\n       long newValue)",
                "description": "Eventually sets the element at position i to the given value.",
                "modAndType": "void"
            },
            {
                "name": "length()",
                "description": "Returns the length of the array.",
                "modAndType": "int"
            },
            {
                "name": "set(int i,\n   long newValue)",
                "description": "Sets the element at position i to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current values of array.",
                "modAndType": "String"
            },
            {
                "name": "updateAndGet(int i,\n            LongUnaryOperator updateFunction)",
                "description": "Atomically updates the element at index i with the results\n of applying the given function, returning the updated value.",
                "modAndType": "long"
            },
            {
                "name": "weakCompareAndSet(int i,\n                 long expect,\n                 long update)",
                "description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicLongArray.html"
    },
    {
        "name": "AtomicLongFieldUpdater",
        "constructors": [
            {
                "name": "protected AtomicLongFieldUpdater()",
                "description": "Protected do-nothing constructor for use by subclasses."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(T obj,\n                long x,\n                LongBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the updated value.",
                "modAndType": "long"
            },
            {
                "name": "addAndGet(T obj,\n         long delta)",
                "description": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                "modAndType": "long"
            },
            {
                "name": "compareAndSet(T obj,\n             long expect,\n             long update)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "decrementAndGet(T obj)",
                "description": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "long"
            },
            {
                "name": "get(T obj)",
                "description": "Gets the current value held in the field of the given object managed\n by this updater.",
                "modAndType": "abstract long"
            },
            {
                "name": "getAndAccumulate(T obj,\n                long x,\n                LongBinaryOperator accumulatorFunction)",
                "description": "Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the previous value.",
                "modAndType": "long"
            },
            {
                "name": "getAndAdd(T obj,\n         long delta)",
                "description": "Atomically adds the given value to the current value of the field of\n the given object managed by this updater.",
                "modAndType": "long"
            },
            {
                "name": "getAndDecrement(T obj)",
                "description": "Atomically decrements by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "long"
            },
            {
                "name": "getAndIncrement(T obj)",
                "description": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "long"
            },
            {
                "name": "getAndSet(T obj,\n         long newValue)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.",
                "modAndType": "long"
            },
            {
                "name": "getAndUpdate(T obj,\n            LongUnaryOperator updateFunction)",
                "description": "Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the previous\n value.",
                "modAndType": "long"
            },
            {
                "name": "incrementAndGet(T obj)",
                "description": "Atomically increments by one the current value of the field of the\n given object managed by this updater.",
                "modAndType": "long"
            },
            {
                "name": "lazySet(T obj,\n       long newValue)",
                "description": "Eventually sets the field of the given object managed by this\n updater to the given updated value.",
                "modAndType": "abstract void"
            },
            {
                "name": "newUpdater(Class<U> tclass,\n          String fieldName)",
                "description": "Creates and returns an updater for objects with the given field.",
                "modAndType": "static <U> AtomicLongFieldUpdater<U>"
            },
            {
                "name": "set(T obj,\n   long newValue)",
                "description": "Sets the field of the given object managed by this updater to the\n given updated value.",
                "modAndType": "abstract void"
            },
            {
                "name": "updateAndGet(T obj,\n            LongUnaryOperator updateFunction)",
                "description": "Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the updated\n value.",
                "modAndType": "long"
            },
            {
                "name": "weakCompareAndSet(T obj,\n                 long expect,\n                 long update)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value.",
                "modAndType": "abstract boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicLongFieldUpdater.html"
    },
    {
        "name": "AtomicMarkableReference",
        "constructors": [
            {
                "name": "AtomicMarkableReference(V initialRef,\n                       boolean initialMark)",
                "description": "Creates a new AtomicMarkableReference with the given\n initial values."
            }
        ],
        "methods": [
            {
                "name": "attemptMark(V expectedReference,\n           boolean newMark)",
                "description": "Atomically sets the value of the mark to the given update value\n if the current reference is == to the expected\n reference.",
                "modAndType": "boolean"
            },
            {
                "name": "compareAndSet(V expectedReference,\n             V newReference,\n             boolean expectedMark,\n             boolean newMark)",
                "description": "Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is == to the expected reference\n and the current mark is equal to the expected mark.",
                "modAndType": "boolean"
            },
            {
                "name": "get(boolean[] markHolder)",
                "description": "Returns the current values of both the reference and the mark.",
                "modAndType": "V"
            },
            {
                "name": "getReference()",
                "description": "Returns the current value of the reference.",
                "modAndType": "V"
            },
            {
                "name": "isMarked()",
                "description": "Returns the current value of the mark.",
                "modAndType": "boolean"
            },
            {
                "name": "set(V newReference,\n   boolean newMark)",
                "description": "Unconditionally sets the value of both the reference and mark.",
                "modAndType": "void"
            },
            {
                "name": "weakCompareAndSet(V expectedReference,\n                 V newReference,\n                 boolean expectedMark,\n                 boolean newMark)",
                "description": "Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is == to the expected reference\n and the current mark is equal to the expected mark.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicMarkableReference.html"
    },
    {
        "name": "AtomicMoveNotSupportedException",
        "constructors": [
            {
                "name": "AtomicMoveNotSupportedException(String source,\n                               String target,\n                               String reason)",
                "description": "Constructs an instance of this class."
            }
        ],
        "methods": [],
        "href": "java/nio/file/AtomicMoveNotSupportedException.html"
    },
    {
        "name": "AtomicReference",
        "constructors": [
            {
                "name": "AtomicReference()",
                "description": "Creates a new AtomicReference with null initial value."
            },
            {
                "name": "AtomicReference(V initialValue)",
                "description": "Creates a new AtomicReference with the given initial value."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(V x,\n                BinaryOperator<V> accumulatorFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the updated value.",
                "modAndType": "V"
            },
            {
                "name": "compareAndSet(V expect,\n             V update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "get()",
                "description": "Gets the current value.",
                "modAndType": "V"
            },
            {
                "name": "getAndAccumulate(V x,\n                BinaryOperator<V> accumulatorFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the previous value.",
                "modAndType": "V"
            },
            {
                "name": "getAndSet(V newValue)",
                "description": "Atomically sets to the given value and returns the old value.",
                "modAndType": "V"
            },
            {
                "name": "getAndUpdate(UnaryOperator<V> updateFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function, returning the previous value.",
                "modAndType": "V"
            },
            {
                "name": "lazySet(V newValue)",
                "description": "Eventually sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "set(V newValue)",
                "description": "Sets to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current value.",
                "modAndType": "String"
            },
            {
                "name": "updateAndGet(UnaryOperator<V> updateFunction)",
                "description": "Atomically updates the current value with the results of\n applying the given function, returning the updated value.",
                "modAndType": "V"
            },
            {
                "name": "weakCompareAndSet(V expect,\n                 V update)",
                "description": "Atomically sets the value to the given updated value\n if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicReference.html"
    },
    {
        "name": "AtomicReferenceArray",
        "constructors": [
            {
                "name": "AtomicReferenceArray(E[] array)",
                "description": "Creates a new AtomicReferenceArray with the same length as, and\n all elements copied from, the given array."
            },
            {
                "name": "AtomicReferenceArray(int length)",
                "description": "Creates a new AtomicReferenceArray of the given length, with all\n elements initially null."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(int i,\n                E x,\n                BinaryOperator<E> accumulatorFunction)",
                "description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the updated value.",
                "modAndType": "E"
            },
            {
                "name": "compareAndSet(int i,\n             E expect,\n             E update)",
                "description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.",
                "modAndType": "boolean"
            },
            {
                "name": "get(int i)",
                "description": "Gets the current value at position i.",
                "modAndType": "E"
            },
            {
                "name": "getAndAccumulate(int i,\n                E x,\n                BinaryOperator<E> accumulatorFunction)",
                "description": "Atomically updates the element at index i with the\n results of applying the given function to the current and\n given values, returning the previous value.",
                "modAndType": "E"
            },
            {
                "name": "getAndSet(int i,\n         E newValue)",
                "description": "Atomically sets the element at position i to the given\n value and returns the old value.",
                "modAndType": "E"
            },
            {
                "name": "getAndUpdate(int i,\n            UnaryOperator<E> updateFunction)",
                "description": "Atomically updates the element at index i with the results\n of applying the given function, returning the previous value.",
                "modAndType": "E"
            },
            {
                "name": "lazySet(int i,\n       E newValue)",
                "description": "Eventually sets the element at position i to the given value.",
                "modAndType": "void"
            },
            {
                "name": "length()",
                "description": "Returns the length of the array.",
                "modAndType": "int"
            },
            {
                "name": "set(int i,\n   E newValue)",
                "description": "Sets the element at position i to the given value.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the String representation of the current values of array.",
                "modAndType": "String"
            },
            {
                "name": "updateAndGet(int i,\n            UnaryOperator<E> updateFunction)",
                "description": "Atomically updates the element at index i with the results\n of applying the given function, returning the updated value.",
                "modAndType": "E"
            },
            {
                "name": "weakCompareAndSet(int i,\n                 E expect,\n                 E update)",
                "description": "Atomically sets the element at position i to the given\n updated value if the current value == the expected value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicReferenceArray.html"
    },
    {
        "name": "AtomicReferenceFieldUpdater",
        "constructors": [
            {
                "name": "protected AtomicReferenceFieldUpdater()",
                "description": "Protected do-nothing constructor for use by subclasses."
            }
        ],
        "methods": [
            {
                "name": "accumulateAndGet(T obj,\n                V x,\n                BinaryOperator<V> accumulatorFunction)",
                "description": "Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the updated value.",
                "modAndType": "V"
            },
            {
                "name": "compareAndSet(T obj,\n             V expect,\n             V update)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "get(T obj)",
                "description": "Gets the current value held in the field of the given object managed\n by this updater.",
                "modAndType": "abstract V"
            },
            {
                "name": "getAndAccumulate(T obj,\n                V x,\n                BinaryOperator<V> accumulatorFunction)",
                "description": "Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the previous value.",
                "modAndType": "V"
            },
            {
                "name": "getAndSet(T obj,\n         V newValue)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.",
                "modAndType": "V"
            },
            {
                "name": "getAndUpdate(T obj,\n            UnaryOperator<V> updateFunction)",
                "description": "Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the previous\n value.",
                "modAndType": "V"
            },
            {
                "name": "lazySet(T obj,\n       V newValue)",
                "description": "Eventually sets the field of the given object managed by this\n updater to the given updated value.",
                "modAndType": "abstract void"
            },
            {
                "name": "newUpdater(Class<U> tclass,\n          Class<W> vclass,\n          String fieldName)",
                "description": "Creates and returns an updater for objects with the given field.",
                "modAndType": "static <U,W> AtomicReferenceFieldUpdater<U,W>"
            },
            {
                "name": "set(T obj,\n   V newValue)",
                "description": "Sets the field of the given object managed by this updater to the\n given updated value.",
                "modAndType": "abstract void"
            },
            {
                "name": "updateAndGet(T obj,\n            UnaryOperator<V> updateFunction)",
                "description": "Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the updated\n value.",
                "modAndType": "V"
            },
            {
                "name": "weakCompareAndSet(T obj,\n                 V expect,\n                 V update)",
                "description": "Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value == the\n expected value.",
                "modAndType": "abstract boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html"
    },
    {
        "name": "AtomicStampedReference",
        "constructors": [
            {
                "name": "AtomicStampedReference(V initialRef,\n                      int initialStamp)",
                "description": "Creates a new AtomicStampedReference with the given\n initial values."
            }
        ],
        "methods": [
            {
                "name": "attemptStamp(V expectedReference,\n            int newStamp)",
                "description": "Atomically sets the value of the stamp to the given update value\n if the current reference is == to the expected\n reference.",
                "modAndType": "boolean"
            },
            {
                "name": "compareAndSet(V expectedReference,\n             V newReference,\n             int expectedStamp,\n             int newStamp)",
                "description": "Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is == to the expected reference\n and the current stamp is equal to the expected stamp.",
                "modAndType": "boolean"
            },
            {
                "name": "get(int[] stampHolder)",
                "description": "Returns the current values of both the reference and the stamp.",
                "modAndType": "V"
            },
            {
                "name": "getReference()",
                "description": "Returns the current value of the reference.",
                "modAndType": "V"
            },
            {
                "name": "getStamp()",
                "description": "Returns the current value of the stamp.",
                "modAndType": "int"
            },
            {
                "name": "set(V newReference,\n   int newStamp)",
                "description": "Unconditionally sets the value of both the reference and stamp.",
                "modAndType": "void"
            },
            {
                "name": "weakCompareAndSet(V expectedReference,\n                 V newReference,\n                 int expectedStamp,\n                 int newStamp)",
                "description": "Atomically sets the value of both the reference and stamp\n to the given update values if the\n current reference is == to the expected reference\n and the current stamp is equal to the expected stamp.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/concurrent/atomic/AtomicStampedReference.html"
    },
    {
        "name": "AttachmentMarshaller",
        "constructors": [
            {
                "name": "AttachmentMarshaller()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addMtomAttachment(byte[] data,\n                 int offset,\n                 int length,\n                 String mimeType,\n                 String elementNamespace,\n                 String elementLocalName)",
                "description": "Consider binary data for optimized binary storage as an attachment.",
                "modAndType": "abstract String"
            },
            {
                "name": "addMtomAttachment(DataHandler data,\n                 String elementNamespace,\n                 String elementLocalName)",
                "description": "Consider MIME content data for optimized binary storage as an attachment.",
                "modAndType": "abstract String"
            },
            {
                "name": "addSwaRefAttachment(DataHandler data)",
                "description": "Add MIME data as an attachment and return attachment's content-id, cid.",
                "modAndType": "abstract String"
            },
            {
                "name": "isXOPPackage()",
                "description": "Read-only property that returns true if JAXB marshaller should enable XOP creation.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/xml/bind/attachment/AttachmentMarshaller.html"
    },
    {
        "name": "AttachmentPart",
        "constructors": [
            {
                "name": "AttachmentPart()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addMimeHeader(String name,\n             String value)",
                "description": "Adds a MIME header with the specified name and value to this\n AttachmentPart object.",
                "modAndType": "abstract void"
            },
            {
                "name": "clearContent()",
                "description": "Clears out the content of this AttachmentPart object.",
                "modAndType": "abstract void"
            },
            {
                "name": "getAllMimeHeaders()",
                "description": "Retrieves all the headers for this AttachmentPart object\n as an iterator over the MimeHeader objects.",
                "modAndType": "abstract Iterator"
            },
            {
                "name": "getBase64Content()",
                "description": "Returns an InputStream which can be used to obtain the\n content of AttachmentPart  as Base64 encoded\n character data, this method would base64 encode the raw bytes\n of the attachment and return.",
                "modAndType": "abstract InputStream"
            },
            {
                "name": "getContent()",
                "description": "Gets the content of this AttachmentPart object as a Java\n object.",
                "modAndType": "abstract Object"
            },
            {
                "name": "getContentId()",
                "description": "Gets the value of the MIME header whose name is \"Content-ID\".",
                "modAndType": "String"
            },
            {
                "name": "getContentLocation()",
                "description": "Gets the value of the MIME header whose name is \"Content-Location\".",
                "modAndType": "String"
            },
            {
                "name": "getContentType()",
                "description": "Gets the value of the MIME header whose name is \"Content-Type\".",
                "modAndType": "String"
            },
            {
                "name": "getDataHandler()",
                "description": "Gets the DataHandler object for this AttachmentPart\n object.",
                "modAndType": "abstract DataHandler"
            },
            {
                "name": "getMatchingMimeHeaders(String[] names)",
                "description": "Retrieves all MimeHeader objects that match a name in\n the given array.",
                "modAndType": "abstract Iterator"
            },
            {
                "name": "getMimeHeader(String name)",
                "description": "Gets all the values of the header identified by the given\n String.",
                "modAndType": "abstract String[]"
            },
            {
                "name": "getNonMatchingMimeHeaders(String[] names)",
                "description": "Retrieves all MimeHeader objects whose name does\n not match a name in the given array.",
                "modAndType": "abstract Iterator"
            },
            {
                "name": "getRawContent()",
                "description": "Gets the content of this AttachmentPart object as an\n InputStream as if a call had been made to getContent and no\n DataContentHandler had been registered for the\n content-type of this AttachmentPart.",
                "modAndType": "abstract InputStream"
            },
            {
                "name": "getRawContentBytes()",
                "description": "Gets the content of this AttachmentPart object as a\n byte[] array as if a call had been made to getContent and no\n DataContentHandler had been registered for the\n content-type of this AttachmentPart.",
                "modAndType": "abstract byte[]"
            },
            {
                "name": "getSize()",
                "description": "Returns the number of bytes in this AttachmentPart\n object.",
                "modAndType": "abstract int"
            },
            {
                "name": "removeAllMimeHeaders()",
                "description": "Removes all the MIME header entries.",
                "modAndType": "abstract void"
            },
            {
                "name": "removeMimeHeader(String header)",
                "description": "Removes all MIME headers that match the given name.",
                "modAndType": "abstract void"
            },
            {
                "name": "setBase64Content(InputStream content,\n                String contentType)",
                "description": "Sets the content of this attachment part from the Base64 source\n InputStream  and sets the value of the\n Content-Type header to the value contained in\n contentType, This method would first decode the base64\n input and write the resulting raw bytes to the attachment.",
                "modAndType": "abstract void"
            },
            {
                "name": "setContent(Object object,\n          String contentType)",
                "description": "Sets the content of this attachment part to that of the given\n Object and sets the value of the Content-Type\n header to the given type.",
                "modAndType": "abstract void"
            },
            {
                "name": "setContentId(String contentId)",
                "description": "Sets the MIME header whose name is \"Content-ID\" with the given value.",
                "modAndType": "void"
            },
            {
                "name": "setContentLocation(String contentLocation)",
                "description": "Sets the MIME header whose name is \"Content-Location\" with the given value.",
                "modAndType": "void"
            },
            {
                "name": "setContentType(String contentType)",
                "description": "Sets the MIME header whose name is \"Content-Type\" with the given value.",
                "modAndType": "void"
            },
            {
                "name": "setDataHandler(DataHandler dataHandler)",
                "description": "Sets the given DataHandler object as the data handler\n for this AttachmentPart object.",
                "modAndType": "abstract void"
            },
            {
                "name": "setMimeHeader(String name,\n             String value)",
                "description": "Changes the first header entry that matches the given name\n to the given value, adding a new header if no existing header\n matches.",
                "modAndType": "abstract void"
            },
            {
                "name": "setRawContent(InputStream content,\n             String contentType)",
                "description": "Sets the content of this attachment part to that contained by the\n InputStream content and sets the value of the\n Content-Type header to the value contained in\n contentType.",
                "modAndType": "abstract void"
            },
            {
                "name": "setRawContentBytes(byte[] content,\n                  int offset,\n                  int len,\n                  String contentType)",
                "description": "Sets the content of this attachment part to that contained by the\n byte[] array content and sets the value of the\n Content-Type header to the value contained in\n contentType.",
                "modAndType": "abstract void"
            }
        ],
        "href": "javax/xml/soap/AttachmentPart.html"
    },
    {
        "name": "AttachmentUnmarshaller",
        "constructors": [
            {
                "name": "AttachmentUnmarshaller()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getAttachmentAsByteArray(String cid)",
                "description": "Retrieve the attachment identified by content-id, cid,  as a byte[]",
                "modAndType": "abstract byte[]"
            },
            {
                "name": "getAttachmentAsDataHandler(String cid)",
                "description": "Lookup MIME content by content-id, cid, and return as a DataHandler.",
                "modAndType": "abstract DataHandler"
            },
            {
                "name": "isXOPPackage()",
                "description": "Read-only property that returns true if JAXB unmarshaller needs to perform XOP processing.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/xml/bind/attachment/AttachmentUnmarshaller.html"
    },
    {
        "name": "Attr",
        "constructors": [],
        "methods": [
            {
                "name": "getName()",
                "description": "Returns the name of this attribute.",
                "modAndType": "String"
            },
            {
                "name": "getOwnerElement()",
                "description": "The Element node this attribute is attached to or\n null if this attribute is not in use.",
                "modAndType": "Element"
            },
            {
                "name": "getSchemaTypeInfo()",
                "description": "The type information associated with this attribute.",
                "modAndType": "TypeInfo"
            },
            {
                "name": "getSpecified()",
                "description": "True if this attribute was explicitly given a value in\n the instance document, false otherwise.",
                "modAndType": "boolean"
            },
            {
                "name": "getValue()",
                "description": "On retrieval, the value of the attribute is returned as a string.",
                "modAndType": "String"
            },
            {
                "name": "isId()",
                "description": "Returns whether this attribute is known to be of type ID (i.e.",
                "modAndType": "boolean"
            },
            {
                "name": "setValue(String value)",
                "description": "On retrieval, the value of the attribute is returned as a string.",
                "modAndType": "void"
            }
        ],
        "href": "org/w3c/dom/Attr.html"
    },
    {
        "name": "Attribute",
        "constructors": [
            {
                "name": "Attribute(String name,\n         Object value)",
                "description": "Constructs an Attribute object which associates the given attribute name with the given value."
            }
        ],
        "methods": [
            {
                "name": "equals(Object object)",
                "description": "Compares the current Attribute Object with another Attribute Object.",
                "modAndType": "boolean"
            },
            {
                "name": "getName()",
                "description": "Returns a String containing the  name of the attribute.",
                "modAndType": "String"
            },
            {
                "name": "getValue()",
                "description": "Returns an Object that is the value of this attribute.",
                "modAndType": "Object"
            },
            {
                "name": "hashCode()",
                "description": "Returns a hash code value for this attribute.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Returns a String object representing this Attribute's value.",
                "modAndType": "String"
            }
        ],
        "href": "javax/management/Attribute.html"
    },
    {
        "name": "Attribute",
        "constructors": [],
        "methods": [
            {
                "name": "add(int ix,\n   Object attrVal)",
                "description": "Adds an attribute value to the ordered list of attribute values.",
                "modAndType": "void"
            },
            {
                "name": "add(Object attrVal)",
                "description": "Adds a new value to the attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all values from this attribute.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Makes a copy of the attribute.",
                "modAndType": "Object"
            },
            {
                "name": "contains(Object attrVal)",
                "description": "Determines whether a value is in the attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "get()",
                "description": "Retrieves one of this attribute's values.",
                "modAndType": "Object"
            },
            {
                "name": "get(int ix)",
                "description": "Retrieves the attribute value from the ordered list of attribute values.",
                "modAndType": "Object"
            },
            {
                "name": "getAll()",
                "description": "Retrieves an enumeration of the attribute's values.",
                "modAndType": "NamingEnumeration<?>"
            },
            {
                "name": "getAttributeDefinition()",
                "description": "Retrieves the attribute's schema definition.",
                "modAndType": "DirContext"
            },
            {
                "name": "getAttributeSyntaxDefinition()",
                "description": "Retrieves the syntax definition associated with the attribute.",
                "modAndType": "DirContext"
            },
            {
                "name": "getID()",
                "description": "Retrieves the id of this attribute.",
                "modAndType": "String"
            },
            {
                "name": "isOrdered()",
                "description": "Determines whether this attribute's values are ordered.",
                "modAndType": "boolean"
            },
            {
                "name": "remove(int ix)",
                "description": "Removes an attribute value from the ordered list of attribute values.",
                "modAndType": "Object"
            },
            {
                "name": "remove(Object attrval)",
                "description": "Removes a specified value from the attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "set(int ix,\n   Object attrVal)",
                "description": "Sets an attribute value in the ordered list of attribute values.",
                "modAndType": "Object"
            },
            {
                "name": "size()",
                "description": "Retrieves the number of values in this attribute.",
                "modAndType": "int"
            }
        ],
        "href": "javax/naming/directory/Attribute.html"
    },
    {
        "name": "Attribute",
        "constructors": [],
        "methods": [
            {
                "name": "getCategory()",
                "description": "Get the printing attribute class which is to be used as the \"category\"\n for this printing attribute value when it is added to an attribute set.",
                "modAndType": "Class<? extends Attribute>"
            },
            {
                "name": "getName()",
                "description": "Get the name of the category of which this attribute value is an\n instance.",
                "modAndType": "String"
            }
        ],
        "href": "javax/print/attribute/Attribute.html"
    },
    {
        "name": "Attribute",
        "constructors": [],
        "methods": [
            {
                "name": "getDTDType()",
                "description": "Gets the type of this attribute, default is\n the String \"CDATA\"",
                "modAndType": "String"
            },
            {
                "name": "getName()",
                "description": "Returns the QName for this attribute",
                "modAndType": "QName"
            },
            {
                "name": "getValue()",
                "description": "Gets the normalized value of this attribute",
                "modAndType": "String"
            },
            {
                "name": "isSpecified()",
                "description": "A flag indicating whether this attribute was actually\n specified in the start-tag of its element, or was defaulted from the schema.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/xml/stream/events/Attribute.html"
    },
    {
        "name": "AttributeChangeNotification",
        "constructors": [
            {
                "name": "AttributeChangeNotification(Object source,\n                           long sequenceNumber,\n                           long timeStamp,\n                           String msg,\n                           String attributeName,\n                           String attributeType,\n                           Object oldValue,\n                           Object newValue)",
                "description": "Constructs an attribute change notification object."
            }
        ],
        "methods": [
            {
                "name": "getAttributeName()",
                "description": "Gets the name of the attribute which has changed.",
                "modAndType": "String"
            },
            {
                "name": "getAttributeType()",
                "description": "Gets the type of the attribute which has changed.",
                "modAndType": "String"
            },
            {
                "name": "getNewValue()",
                "description": "Gets the new value of the attribute which has changed.",
                "modAndType": "Object"
            },
            {
                "name": "getOldValue()",
                "description": "Gets the old value of the attribute which has changed.",
                "modAndType": "Object"
            }
        ],
        "href": "javax/management/AttributeChangeNotification.html"
    },
    {
        "name": "AttributeChangeNotificationFilter",
        "constructors": [
            {
                "name": "AttributeChangeNotificationFilter()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "disableAllAttributes()",
                "description": "Disables all the attribute names.",
                "modAndType": "void"
            },
            {
                "name": "disableAttribute(String name)",
                "description": "Disables all the attribute change notifications the attribute name of which equals\n the specified attribute name to be sent to the listener.",
                "modAndType": "void"
            },
            {
                "name": "enableAttribute(String name)",
                "description": "Enables all the attribute change notifications the attribute name of which equals\n the specified name to be sent to the listener.",
                "modAndType": "void"
            },
            {
                "name": "getEnabledAttributes()",
                "description": "Gets all the enabled attribute names for this filter.",
                "modAndType": "Vector<String>"
            },
            {
                "name": "isNotificationEnabled(Notification notification)",
                "description": "Invoked before sending the specified notification to the listener.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/management/AttributeChangeNotificationFilter.html"
    },
    {
        "name": "AttributedCharacterIterator",
        "constructors": [],
        "methods": [
            {
                "name": "getAllAttributeKeys()",
                "description": "Returns the keys of all attributes defined on the\n iterator's text range.",
                "modAndType": "Set<AttributedCharacterIterator.Attribute>"
            },
            {
                "name": "getAttribute(AttributedCharacterIterator.Attribute attribute)",
                "description": "Returns the value of the named attribute for the current character.",
                "modAndType": "Object"
            },
            {
                "name": "getAttributes()",
                "description": "Returns a map with the attributes defined on the current\n character.",
                "modAndType": "Map<AttributedCharacterIterator.Attribute,Object>"
            },
            {
                "name": "getRunLimit()",
                "description": "Returns the index of the first character following the run\n with respect to all attributes containing the current character.",
                "modAndType": "int"
            },
            {
                "name": "getRunLimit(AttributedCharacterIterator.Attribute attribute)",
                "description": "Returns the index of the first character following the run\n with respect to the given attribute containing the current character.",
                "modAndType": "int"
            },
            {
                "name": "getRunLimit(Set<? extends AttributedCharacterIterator.Attribute> attributes)",
                "description": "Returns the index of the first character following the run\n with respect to the given attributes containing the current character.",
                "modAndType": "int"
            },
            {
                "name": "getRunStart()",
                "description": "Returns the index of the first character of the run\n with respect to all attributes containing the current character.",
                "modAndType": "int"
            },
            {
                "name": "getRunStart(AttributedCharacterIterator.Attribute attribute)",
                "description": "Returns the index of the first character of the run\n with respect to the given attribute containing the current character.",
                "modAndType": "int"
            },
            {
                "name": "getRunStart(Set<? extends AttributedCharacterIterator.Attribute> attributes)",
                "description": "Returns the index of the first character of the run\n with respect to the given attributes containing the current character.",
                "modAndType": "int"
            }
        ],
        "href": "java/text/AttributedCharacterIterator.html"
    },
    {
        "name": "AttributedCharacterIterator.Attribute",
        "constructors": [
            {
                "name": "protected Attribute(String name)",
                "description": "Constructs an Attribute with the given name."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Compares two objects for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getName()",
                "description": "Returns the name of the attribute.",
                "modAndType": "protected String"
            },
            {
                "name": "hashCode()",
                "description": "Returns a hash code value for the object.",
                "modAndType": "int"
            },
            {
                "name": "readResolve()",
                "description": "Resolves instances being deserialized to the predefined constants.",
                "modAndType": "protected Object"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of the object.",
                "modAndType": "String"
            }
        ],
        "href": "java/text/AttributedCharacterIterator.Attribute.html"
    },
    {
        "name": "AttributedString",
        "constructors": [
            {
                "name": "AttributedString(AttributedCharacterIterator text)",
                "description": "Constructs an AttributedString instance with the given attributed\n text represented by AttributedCharacterIterator."
            },
            {
                "name": "AttributedString(AttributedCharacterIterator text,\n                int beginIndex,\n                int endIndex)",
                "description": "Constructs an AttributedString instance with the subrange of\n the given attributed text represented by\n AttributedCharacterIterator."
            },
            {
                "name": "AttributedString(AttributedCharacterIterator text,\n                int beginIndex,\n                int endIndex,\n                AttributedCharacterIterator.Attribute[] attributes)",
                "description": "Constructs an AttributedString instance with the subrange of\n the given attributed text represented by\n AttributedCharacterIterator."
            },
            {
                "name": "AttributedString(String text)",
                "description": "Constructs an AttributedString instance with the given text."
            },
            {
                "name": "AttributedString(String text,\n                Map<? extends AttributedCharacterIterator.Attribute,?> attributes)",
                "description": "Constructs an AttributedString instance with the given text and attributes."
            }
        ],
        "methods": [
            {
                "name": "addAttribute(AttributedCharacterIterator.Attribute attribute,\n            Object value)",
                "description": "Adds an attribute to the entire string.",
                "modAndType": "void"
            },
            {
                "name": "addAttribute(AttributedCharacterIterator.Attribute attribute,\n            Object value,\n            int beginIndex,\n            int endIndex)",
                "description": "Adds an attribute to a subrange of the string.",
                "modAndType": "void"
            },
            {
                "name": "addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,\n             int beginIndex,\n             int endIndex)",
                "description": "Adds a set of attributes to a subrange of the string.",
                "modAndType": "void"
            },
            {
                "name": "getIterator()",
                "description": "Creates an AttributedCharacterIterator instance that provides access to the entire contents of\n this string.",
                "modAndType": "AttributedCharacterIterator"
            },
            {
                "name": "getIterator(AttributedCharacterIterator.Attribute[] attributes)",
                "description": "Creates an AttributedCharacterIterator instance that provides access to\n selected contents of this string.",
                "modAndType": "AttributedCharacterIterator"
            },
            {
                "name": "getIterator(AttributedCharacterIterator.Attribute[] attributes,\n           int beginIndex,\n           int endIndex)",
                "description": "Creates an AttributedCharacterIterator instance that provides access to\n selected contents of this string.",
                "modAndType": "AttributedCharacterIterator"
            }
        ],
        "href": "java/text/AttributedString.html"
    },
    {
        "name": "AttributeException",
        "constructors": [],
        "methods": [
            {
                "name": "getUnsupportedAttributes()",
                "description": "Returns the array of printing attribute classes for which the Print\n Service instance does not support the attribute at all, or null if\n there are no such attributes.",
                "modAndType": "Class[]"
            },
            {
                "name": "getUnsupportedValues()",
                "description": "Returns the array of printing attributes for which the Print Service\n instance supports the attribute but does not support that particular\n value of the attribute, or null if there are no such attribute values.",
                "modAndType": "Attribute[]"
            }
        ],
        "href": "javax/print/AttributeException.html"
    },
    {
        "name": "AttributeInUseException",
        "constructors": [
            {
                "name": "AttributeInUseException()",
                "description": "Constructs a new instance of AttributeInUseException."
            },
            {
                "name": "AttributeInUseException(String explanation)",
                "description": "Constructs a new instance of AttributeInUseException with\n an explanation."
            }
        ],
        "methods": [],
        "href": "javax/naming/directory/AttributeInUseException.html"
    },
    {
        "name": "AttributeList",
        "constructors": [
            {
                "name": "AttributeList()",
                "description": "Constructs an empty AttributeList."
            },
            {
                "name": "AttributeList(AttributeList list)",
                "description": "Constructs an AttributeList containing the\n elements of the AttributeList specified, in the\n order in which they are returned by the\n AttributeList's iterator."
            },
            {
                "name": "AttributeList(int initialCapacity)",
                "description": "Constructs an empty AttributeList with\n the initial capacity specified."
            },
            {
                "name": "AttributeList(List<Attribute> list)",
                "description": "Constructs an AttributeList containing the elements of the\n List specified, in the order in which they are returned by\n the List's iterator."
            }
        ],
        "methods": [
            {
                "name": "add(Attribute object)",
                "description": "Adds the Attribute specified as the last element of the list.",
                "modAndType": "void"
            },
            {
                "name": "add(int index,\n   Attribute object)",
                "description": "Inserts the attribute specified as an element at the position specified.",
                "modAndType": "void"
            },
            {
                "name": "add(int index,\n   Object element)",
                "description": "Inserts the specified element at the specified position in this\n list.",
                "modAndType": "void"
            },
            {
                "name": "add(Object element)",
                "description": "Appends the specified element to the end of this list.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(AttributeList list)",
                "description": "Appends all the elements in the AttributeList specified to\n the end of the list, in the order in which they are returned by the\n Iterator of the AttributeList specified.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(Collection<?> c)",
                "description": "Appends all of the elements in the specified collection to the end of\n this list, in the order that they are returned by the\n specified collection's Iterator.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(int index,\n      AttributeList list)",
                "description": "Inserts all of the elements in the AttributeList specified\n into this list, starting at the specified position, in the order in which\n they are returned by the Iterator of the AttributeList specified.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(int index,\n      Collection<?> c)",
                "description": "Inserts all of the elements in the specified collection into this\n list, starting at the specified position.",
                "modAndType": "boolean"
            },
            {
                "name": "asList()",
                "description": "Return a view of this list as a List<Attribute>.",
                "modAndType": "List<Attribute>"
            },
            {
                "name": "set(int index,\n   Attribute object)",
                "description": "Sets the element at the position specified to be the attribute specified.",
                "modAndType": "void"
            },
            {
                "name": "set(int index,\n   Object element)",
                "description": "Replaces the element at the specified position in this list with\n the specified element.",
                "modAndType": "Object"
            }
        ],
        "href": "javax/management/AttributeList.html"
    },
    {
        "name": "AttributeList",
        "constructors": [
            {
                "name": "AttributeList(String name)",
                "description": "Create an attribute list element."
            },
            {
                "name": "AttributeList(String name,\n             int type,\n             int modifier,\n             String value,\n             Vector<?> values,\n             AttributeList next)",
                "description": "Create an attribute list element."
            }
        ],
        "methods": [
            {
                "name": "getModifier()",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getName()",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "getNext()",
                "description": "",
                "modAndType": "AttributeList"
            },
            {
                "name": "getType()",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getValue()",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "getValues()",
                "description": "",
                "modAndType": "Enumeration<?>"
            },
            {
                "name": "name2type(String nm)",
                "description": "",
                "modAndType": "static int"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of the object.",
                "modAndType": "String"
            },
            {
                "name": "type2name(int tp)",
                "description": "",
                "modAndType": "static String"
            }
        ],
        "href": "javax/swing/text/html/parser/AttributeList.html"
    },
    {
        "name": "AttributeList",
        "constructors": [],
        "methods": [
            {
                "name": "getLength()",
                "description": "Deprecated. Return the number of attributes in this list.",
                "modAndType": "int"
            },
            {
                "name": "getName(int i)",
                "description": "Deprecated. Return the name of an attribute in this list (by position).",
                "modAndType": "String"
            },
            {
                "name": "getType(int i)",
                "description": "Deprecated. Return the type of an attribute in the list (by position).",
                "modAndType": "String"
            },
            {
                "name": "getType(String name)",
                "description": "Deprecated. Return the type of an attribute in the list (by name).",
                "modAndType": "String"
            },
            {
                "name": "getValue(int i)",
                "description": "Deprecated. Return the value of an attribute in the list (by position).",
                "modAndType": "String"
            },
            {
                "name": "getValue(String name)",
                "description": "Deprecated. Return the value of an attribute in the list (by name).",
                "modAndType": "String"
            }
        ],
        "href": "org/xml/sax/AttributeList.html"
    },
    {
        "name": "AttributeListImpl",
        "constructors": [
            {
                "name": "AttributeListImpl()",
                "description": "Deprecated. Create an empty attribute list."
            },
            {
                "name": "AttributeListImpl(AttributeList atts)",
                "description": "Deprecated. Construct a persistent copy of an existing attribute list."
            }
        ],
        "methods": [
            {
                "name": "addAttribute(String name,\n            String type,\n            String value)",
                "description": "Deprecated. Add an attribute to an attribute list.",
                "modAndType": "void"
            },
            {
                "name": "clear()",
                "description": "Deprecated. Clear the attribute list.",
                "modAndType": "void"
            },
            {
                "name": "getLength()",
                "description": "Deprecated. Return the number of attributes in the list.",
                "modAndType": "int"
            },
            {
                "name": "getName(int i)",
                "description": "Deprecated. Get the name of an attribute (by position).",
                "modAndType": "String"
            },
            {
                "name": "getType(int i)",
                "description": "Deprecated. Get the type of an attribute (by position).",
                "modAndType": "String"
            },
            {
                "name": "getType(String name)",
                "description": "Deprecated. Get the type of an attribute (by name).",
                "modAndType": "String"
            },
            {
                "name": "getValue(int i)",
                "description": "Deprecated. Get the value of an attribute (by position).",
                "modAndType": "String"
            },
            {
                "name": "getValue(String name)",
                "description": "Deprecated. Get the value of an attribute (by name).",
                "modAndType": "String"
            },
            {
                "name": "removeAttribute(String name)",
                "description": "Deprecated. Remove an attribute from the list.",
                "modAndType": "void"
            },
            {
                "name": "setAttributeList(AttributeList atts)",
                "description": "Deprecated. Set the attribute list, discarding previous contents.",
                "modAndType": "void"
            }
        ],
        "href": "org/xml/sax/helpers/AttributeListImpl.html"
    },
    {
        "name": "AttributeModificationException",
        "constructors": [
            {
                "name": "AttributeModificationException()",
                "description": "Constructs a new instance of AttributeModificationException."
            },
            {
                "name": "AttributeModificationException(String explanation)",
                "description": "Constructs a new instance of AttributeModificationException using\n an explanation."
            }
        ],
        "methods": [
            {
                "name": "getUnexecutedModifications()",
                "description": "Retrieves the unexecuted modification list.",
                "modAndType": "ModificationItem[]"
            },
            {
                "name": "setUnexecutedModifications(ModificationItem[] e)",
                "description": "Sets the unexecuted modification list to be e.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "The string representation of this exception consists of\n information about where the error occurred, and\n the first unexecuted modification.",
                "modAndType": "String"
            }
        ],
        "href": "javax/naming/directory/AttributeModificationException.html"
    },
    {
        "name": "AttributeNotFoundException",
        "constructors": [
            {
                "name": "AttributeNotFoundException()",
                "description": "Default constructor."
            },
            {
                "name": "AttributeNotFoundException(String message)",
                "description": "Constructor that allows a specific error message to be specified."
            }
        ],
        "methods": [],
        "href": "javax/management/AttributeNotFoundException.html"
    },
    {
        "name": "Attributes",
        "constructors": [
            {
                "name": "Attributes()",
                "description": "Constructs a new, empty Attributes object with default size."
            },
            {
                "name": "Attributes(Attributes attr)",
                "description": "Constructs a new Attributes object with the same attribute name-value\n mappings as in the specified Attributes."
            },
            {
                "name": "Attributes(int size)",
                "description": "Constructs a new, empty Attributes object with the specified\n initial size."
            }
        ],
        "methods": [
            {
                "name": "clear()",
                "description": "Removes all attributes from this Map.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Returns a copy of the Attributes, implemented as follows:",
                "modAndType": "Object"
            },
            {
                "name": "containsKey(Object name)",
                "description": "Returns true if this Map contains the specified attribute name (key).",
                "modAndType": "boolean"
            },
            {
                "name": "containsValue(Object value)",
                "description": "Returns true if this Map maps one or more attribute names (keys)\n to the specified value.",
                "modAndType": "boolean"
            },
            {
                "name": "entrySet()",
                "description": "Returns a Collection view of the attribute name-value mappings\n contained in this Map.",
                "modAndType": "Set<Map.Entry<Object,Object>>"
            },
            {
                "name": "equals(Object o)",
                "description": "Compares the specified Attributes object with this Map for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "get(Object name)",
                "description": "Returns the value of the specified attribute name, or null if the\n attribute name was not found.",
                "modAndType": "Object"
            },
            {
                "name": "getValue(Attributes.Name name)",
                "description": "Returns the value of the specified Attributes.Name, or null if the\n attribute was not found.",
                "modAndType": "String"
            },
            {
                "name": "getValue(String name)",
                "description": "Returns the value of the specified attribute name, specified as\n a string, or null if the attribute was not found.",
                "modAndType": "String"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this Map.",
                "modAndType": "int"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this Map contains no attributes.",
                "modAndType": "boolean"
            },
            {
                "name": "keySet()",
                "description": "Returns a Set view of the attribute names (keys) contained in this Map.",
                "modAndType": "Set<Object>"
            },
            {
                "name": "put(Object name,\n   Object value)",
                "description": "Associates the specified value with the specified attribute name\n (key) in this Map.",
                "modAndType": "Object"
            },
            {
                "name": "putAll(Map<?,?> attr)",
                "description": "Copies all of the attribute name-value mappings from the specified\n Attributes to this Map.",
                "modAndType": "void"
            },
            {
                "name": "putValue(String name,\n        String value)",
                "description": "Associates the specified value with the specified attribute name,\n specified as a String.",
                "modAndType": "String"
            },
            {
                "name": "remove(Object name)",
                "description": "Removes the attribute with the specified name (key) from this Map.",
                "modAndType": "Object"
            },
            {
                "name": "size()",
                "description": "Returns the number of attributes in this Map.",
                "modAndType": "int"
            },
            {
                "name": "values()",
                "description": "Returns a Collection view of the attribute values contained in this Map.",
                "modAndType": "Collection<Object>"
            }
        ],
        "href": "java/util/jar/Attributes.html"
    },
    {
        "name": "Attributes",
        "constructors": [],
        "methods": [
            {
                "name": "clone()",
                "description": "Makes a copy of the attribute set.",
                "modAndType": "Object"
            },
            {
                "name": "get(String attrID)",
                "description": "Retrieves the attribute with the given attribute id from the\n attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "getAll()",
                "description": "Retrieves an enumeration of the attributes in the attribute set.",
                "modAndType": "NamingEnumeration<? extends Attribute>"
            },
            {
                "name": "getIDs()",
                "description": "Retrieves an enumeration of the ids of the attributes in the\n attribute set.",
                "modAndType": "NamingEnumeration<String>"
            },
            {
                "name": "isCaseIgnored()",
                "description": "Determines whether the attribute set ignores the case of\n attribute identifiers when retrieving or adding attributes.",
                "modAndType": "boolean"
            },
            {
                "name": "put(Attribute attr)",
                "description": "Adds a new attribute to the attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "put(String attrID,\n   Object val)",
                "description": "Adds a new attribute to the attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "remove(String attrID)",
                "description": "Removes the attribute with the attribute id 'attrID' from\n the attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "size()",
                "description": "Retrieves the number of attributes in the attribute set.",
                "modAndType": "int"
            }
        ],
        "href": "javax/naming/directory/Attributes.html"
    },
    {
        "name": "Attributes",
        "constructors": [],
        "methods": [
            {
                "name": "getIndex(String qName)",
                "description": "Look up the index of an attribute by XML qualified (prefixed) name.",
                "modAndType": "int"
            },
            {
                "name": "getIndex(String uri,\n        String localName)",
                "description": "Look up the index of an attribute by Namespace name.",
                "modAndType": "int"
            },
            {
                "name": "getLength()",
                "description": "Return the number of attributes in the list.",
                "modAndType": "int"
            },
            {
                "name": "getLocalName(int index)",
                "description": "Look up an attribute's local name by index.",
                "modAndType": "String"
            },
            {
                "name": "getQName(int index)",
                "description": "Look up an attribute's XML qualified (prefixed) name by index.",
                "modAndType": "String"
            },
            {
                "name": "getType(int index)",
                "description": "Look up an attribute's type by index.",
                "modAndType": "String"
            },
            {
                "name": "getType(String qName)",
                "description": "Look up an attribute's type by XML qualified (prefixed) name.",
                "modAndType": "String"
            },
            {
                "name": "getType(String uri,\n       String localName)",
                "description": "Look up an attribute's type by Namespace name.",
                "modAndType": "String"
            },
            {
                "name": "getURI(int index)",
                "description": "Look up an attribute's Namespace URI by index.",
                "modAndType": "String"
            },
            {
                "name": "getValue(int index)",
                "description": "Look up an attribute's value by index.",
                "modAndType": "String"
            },
            {
                "name": "getValue(String qName)",
                "description": "Look up an attribute's value by XML qualified (prefixed) name.",
                "modAndType": "String"
            },
            {
                "name": "getValue(String uri,\n        String localName)",
                "description": "Look up an attribute's value by Namespace name.",
                "modAndType": "String"
            }
        ],
        "href": "org/xml/sax/Attributes.html"
    },
    {
        "name": "Attributes.Name",
        "constructors": [
            {
                "name": "Name(String name)",
                "description": "Constructs a new attribute name using the given string name."
            }
        ],
        "methods": [
            {
                "name": "equals(Object o)",
                "description": "Compares this attribute name to another for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "Computes the hash value for this attribute name.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Returns the attribute name as a String.",
                "modAndType": "String"
            }
        ],
        "href": "java/util/jar/Attributes.Name.html"
    },
    {
        "name": "Attributes2",
        "constructors": [],
        "methods": [
            {
                "name": "isDeclared(int index)",
                "description": "Returns false unless the attribute was declared in the DTD.",
                "modAndType": "boolean"
            },
            {
                "name": "isDeclared(String qName)",
                "description": "Returns false unless the attribute was declared in the DTD.",
                "modAndType": "boolean"
            },
            {
                "name": "isDeclared(String uri,\n          String localName)",
                "description": "Returns false unless the attribute was declared in the DTD.",
                "modAndType": "boolean"
            },
            {
                "name": "isSpecified(int index)",
                "description": "Returns true unless the attribute value was provided\n by DTD defaulting.",
                "modAndType": "boolean"
            },
            {
                "name": "isSpecified(String qName)",
                "description": "Returns true unless the attribute value was provided\n by DTD defaulting.",
                "modAndType": "boolean"
            },
            {
                "name": "isSpecified(String uri,\n           String localName)",
                "description": "Returns true unless the attribute value was provided\n by DTD defaulting.",
                "modAndType": "boolean"
            }
        ],
        "href": "org/xml/sax/ext/Attributes2.html"
    },
    {
        "name": "Attributes2Impl",
        "constructors": [
            {
                "name": "Attributes2Impl()",
                "description": "Construct a new, empty Attributes2Impl object."
            },
            {
                "name": "Attributes2Impl(Attributes atts)",
                "description": "Copy an existing Attributes or Attributes2 object."
            }
        ],
        "methods": [
            {
                "name": "addAttribute(String uri,\n            String localName,\n            String qName,\n            String type,\n            String value)",
                "description": "Add an attribute to the end of the list, setting its\n \"specified\" flag to true.",
                "modAndType": "void"
            },
            {
                "name": "isDeclared(int index)",
                "description": "Returns the current value of the attribute's \"declared\" flag.",
                "modAndType": "boolean"
            },
            {
                "name": "isDeclared(String qName)",
                "description": "Returns the current value of the attribute's \"declared\" flag.",
                "modAndType": "boolean"
            },
            {
                "name": "isDeclared(String uri,\n          String localName)",
                "description": "Returns the current value of the attribute's \"declared\" flag.",
                "modAndType": "boolean"
            },
            {
                "name": "isSpecified(int index)",
                "description": "Returns the current value of an attribute's \"specified\" flag.",
                "modAndType": "boolean"
            },
            {
                "name": "isSpecified(String qName)",
                "description": "Returns the current value of an attribute's \"specified\" flag.",
                "modAndType": "boolean"
            },
            {
                "name": "isSpecified(String uri,\n           String localName)",
                "description": "Returns the current value of an attribute's \"specified\" flag.",
                "modAndType": "boolean"
            },
            {
                "name": "removeAttribute(int index)",
                "description": "Remove an attribute from the list.",
                "modAndType": "void"
            },
            {
                "name": "setAttributes(Attributes atts)",
                "description": "Copy an entire Attributes object.",
                "modAndType": "void"
            },
            {
                "name": "setDeclared(int index,\n           boolean value)",
                "description": "Assign a value to the \"declared\" flag of a specific attribute.",
                "modAndType": "void"
            },
            {
                "name": "setSpecified(int index,\n            boolean value)",
                "description": "Assign a value to the \"specified\" flag of a specific attribute.",
                "modAndType": "void"
            }
        ],
        "href": "org/xml/sax/ext/Attributes2Impl.html"
    },
    {
        "name": "AttributeSet",
        "constructors": [],
        "methods": [
            {
                "name": "add(Attribute attribute)",
                "description": "Adds the specified attribute to this attribute set if it is not\n already present, first removing any existing value in the same\n attribute category as the specified attribute value.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(AttributeSet attributes)",
                "description": "Adds all of the elements in the specified set to this attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all attributes from this attribute set.",
                "modAndType": "void"
            },
            {
                "name": "containsKey(Class<?> category)",
                "description": "Returns true if this attribute set contains an\n attribute for the specified category.",
                "modAndType": "boolean"
            },
            {
                "name": "containsValue(Attribute attribute)",
                "description": "Returns true if this attribute set contains the given\n attribute value.",
                "modAndType": "boolean"
            },
            {
                "name": "equals(Object object)",
                "description": "Compares the specified object with this attribute set for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "get(Class<?> category)",
                "description": "Returns the attribute value which this attribute set contains in the\n given attribute category.",
                "modAndType": "Attribute"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this attribute set.",
                "modAndType": "int"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this attribute set contains no attributes.",
                "modAndType": "boolean"
            },
            {
                "name": "remove(Attribute attribute)",
                "description": "Removes the specified attribute from this attribute set if\n present.",
                "modAndType": "boolean"
            },
            {
                "name": "remove(Class<?> category)",
                "description": "Removes any attribute for this category from this attribute set if\n present.",
                "modAndType": "boolean"
            },
            {
                "name": "size()",
                "description": "Returns the number of attributes in this attribute set.",
                "modAndType": "int"
            },
            {
                "name": "toArray()",
                "description": "Returns an array of the attributes contained in this set.",
                "modAndType": "Attribute[]"
            }
        ],
        "href": "javax/print/attribute/AttributeSet.html"
    },
    {
        "name": "AttributeSet",
        "constructors": [],
        "methods": [
            {
                "name": "containsAttribute(Object name,\n                 Object value)",
                "description": "Returns true if this set defines an attribute with the same\n name and an equal value.",
                "modAndType": "boolean"
            },
            {
                "name": "containsAttributes(AttributeSet attributes)",
                "description": "Returns true if this set defines all the attributes from the\n given set with equal values.",
                "modAndType": "boolean"
            },
            {
                "name": "copyAttributes()",
                "description": "Returns an attribute set that is guaranteed not\n to change over time.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "getAttribute(Object key)",
                "description": "Fetches the value of the given attribute.",
                "modAndType": "Object"
            },
            {
                "name": "getAttributeCount()",
                "description": "Returns the number of attributes that are defined locally in this set.",
                "modAndType": "int"
            },
            {
                "name": "getAttributeNames()",
                "description": "Returns an enumeration over the names of the attributes that are\n defined locally in the set.",
                "modAndType": "Enumeration<?>"
            },
            {
                "name": "getResolveParent()",
                "description": "Gets the resolving parent.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "isDefined(Object attrName)",
                "description": "Checks whether the named attribute has a value specified in\n the set without resolving through another attribute\n set.",
                "modAndType": "boolean"
            },
            {
                "name": "isEqual(AttributeSet attr)",
                "description": "Determines if the two attribute sets are equivalent.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/swing/text/AttributeSet.html"
    },
    {
        "name": "AttributeSet.CharacterAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/AttributeSet.CharacterAttribute.html"
    },
    {
        "name": "AttributeSet.ColorAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/AttributeSet.ColorAttribute.html"
    },
    {
        "name": "AttributeSet.FontAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/AttributeSet.FontAttribute.html"
    },
    {
        "name": "AttributeSet.ParagraphAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/AttributeSet.ParagraphAttribute.html"
    },
    {
        "name": "AttributeSetUtilities",
        "constructors": [],
        "methods": [
            {
                "name": "synchronizedView(AttributeSet attributeSet)",
                "description": "Creates a synchronized view of the given attribute set.",
                "modAndType": "static AttributeSet"
            },
            {
                "name": "synchronizedView(DocAttributeSet attributeSet)",
                "description": "Creates a synchronized view of the given doc attribute set.",
                "modAndType": "static DocAttributeSet"
            },
            {
                "name": "synchronizedView(PrintJobAttributeSet attributeSet)",
                "description": "Creates a synchronized view of the given print job attribute set.",
                "modAndType": "static PrintJobAttributeSet"
            },
            {
                "name": "synchronizedView(PrintRequestAttributeSet attributeSet)",
                "description": "Creates a synchronized view of the given print request attribute set.",
                "modAndType": "static PrintRequestAttributeSet"
            },
            {
                "name": "synchronizedView(PrintServiceAttributeSet attributeSet)",
                "description": "Creates a synchronized view of the given print service attribute set.",
                "modAndType": "static PrintServiceAttributeSet"
            },
            {
                "name": "unmodifiableView(AttributeSet attributeSet)",
                "description": "Creates an unmodifiable view of the given attribute set.",
                "modAndType": "static AttributeSet"
            },
            {
                "name": "unmodifiableView(DocAttributeSet attributeSet)",
                "description": "Creates an unmodifiable view of the given doc attribute set.",
                "modAndType": "static DocAttributeSet"
            },
            {
                "name": "unmodifiableView(PrintJobAttributeSet attributeSet)",
                "description": "Creates an unmodifiable view of the given print job attribute set.",
                "modAndType": "static PrintJobAttributeSet"
            },
            {
                "name": "unmodifiableView(PrintRequestAttributeSet attributeSet)",
                "description": "Creates an unmodifiable view of the given print request attribute set.",
                "modAndType": "static PrintRequestAttributeSet"
            },
            {
                "name": "unmodifiableView(PrintServiceAttributeSet attributeSet)",
                "description": "Creates an unmodifiable view of the given print service attribute set.",
                "modAndType": "static PrintServiceAttributeSet"
            },
            {
                "name": "verifyAttributeCategory(Object object,\n                       Class<?> interfaceName)",
                "description": "Verify that the given object is a Class that\n implements the given interface, which is assumed to be interface Attribute or a subinterface thereof.",
                "modAndType": "static Class<?>"
            },
            {
                "name": "verifyAttributeValue(Object object,\n                    Class<?> interfaceName)",
                "description": "Verify that the given object is an instance of the given interface, which\n is assumed to be interface Attribute or a subinterface\n thereof.",
                "modAndType": "static Attribute"
            },
            {
                "name": "verifyCategoryForValue(Class<?> category,\n                      Attribute attribute)",
                "description": "Verify that the given attribute category object is equal to the\n category of the given attribute value object.",
                "modAndType": "static void"
            }
        ],
        "href": "javax/print/attribute/AttributeSetUtilities.html"
    },
    {
        "name": "AttributesImpl",
        "constructors": [
            {
                "name": "AttributesImpl()",
                "description": "Construct a new, empty AttributesImpl object."
            },
            {
                "name": "AttributesImpl(Attributes atts)",
                "description": "Copy an existing Attributes object."
            }
        ],
        "methods": [
            {
                "name": "addAttribute(String uri,\n            String localName,\n            String qName,\n            String type,\n            String value)",
                "description": "Add an attribute to the end of the list.",
                "modAndType": "void"
            },
            {
                "name": "clear()",
                "description": "Clear the attribute list for reuse.",
                "modAndType": "void"
            },
            {
                "name": "getIndex(String qName)",
                "description": "Look up an attribute's index by qualified (prefixed) name.",
                "modAndType": "int"
            },
            {
                "name": "getIndex(String uri,\n        String localName)",
                "description": "Look up an attribute's index by Namespace name.",
                "modAndType": "int"
            },
            {
                "name": "getLength()",
                "description": "Return the number of attributes in the list.",
                "modAndType": "int"
            },
            {
                "name": "getLocalName(int index)",
                "description": "Return an attribute's local name.",
                "modAndType": "String"
            },
            {
                "name": "getQName(int index)",
                "description": "Return an attribute's qualified (prefixed) name.",
                "modAndType": "String"
            },
            {
                "name": "getType(int index)",
                "description": "Return an attribute's type by index.",
                "modAndType": "String"
            },
            {
                "name": "getType(String qName)",
                "description": "Look up an attribute's type by qualified (prefixed) name.",
                "modAndType": "String"
            },
            {
                "name": "getType(String uri,\n       String localName)",
                "description": "Look up an attribute's type by Namespace-qualified name.",
                "modAndType": "String"
            },
            {
                "name": "getURI(int index)",
                "description": "Return an attribute's Namespace URI.",
                "modAndType": "String"
            },
            {
                "name": "getValue(int index)",
                "description": "Return an attribute's value by index.",
                "modAndType": "String"
            },
            {
                "name": "getValue(String qName)",
                "description": "Look up an attribute's value by qualified (prefixed) name.",
                "modAndType": "String"
            },
            {
                "name": "getValue(String uri,\n        String localName)",
                "description": "Look up an attribute's value by Namespace-qualified name.",
                "modAndType": "String"
            },
            {
                "name": "removeAttribute(int index)",
                "description": "Remove an attribute from the list.",
                "modAndType": "void"
            },
            {
                "name": "setAttribute(int index,\n            String uri,\n            String localName,\n            String qName,\n            String type,\n            String value)",
                "description": "Set an attribute in the list.",
                "modAndType": "void"
            },
            {
                "name": "setAttributes(Attributes atts)",
                "description": "Copy an entire Attributes object.",
                "modAndType": "void"
            },
            {
                "name": "setLocalName(int index,\n            String localName)",
                "description": "Set the local name of a specific attribute.",
                "modAndType": "void"
            },
            {
                "name": "setQName(int index,\n        String qName)",
                "description": "Set the qualified name of a specific attribute.",
                "modAndType": "void"
            },
            {
                "name": "setType(int index,\n       String type)",
                "description": "Set the type of a specific attribute.",
                "modAndType": "void"
            },
            {
                "name": "setURI(int index,\n      String uri)",
                "description": "Set the Namespace URI of a specific attribute.",
                "modAndType": "void"
            },
            {
                "name": "setValue(int index,\n        String value)",
                "description": "Set the value of a specific attribute.",
                "modAndType": "void"
            }
        ],
        "href": "org/xml/sax/helpers/AttributesImpl.html"
    },
    {
        "name": "AttributeValueExp",
        "constructors": [
            {
                "name": "AttributeValueExp()",
                "description": "Deprecated. \nAn instance created with this constructor cannot be\n used in a query.\n"
            },
            {
                "name": "AttributeValueExp(String attr)",
                "description": "Creates a new AttributeValueExp representing the\n specified object attribute, named attr."
            }
        ],
        "methods": [
            {
                "name": "apply(ObjectName name)",
                "description": "Applies the AttributeValueExp on an MBean.",
                "modAndType": "ValueExp"
            },
            {
                "name": "getAttribute(ObjectName name)",
                "description": "Return the value of the given attribute in the named MBean.",
                "modAndType": "protected Object"
            },
            {
                "name": "getAttributeName()",
                "description": "Returns a string representation of the name of the attribute.",
                "modAndType": "String"
            },
            {
                "name": "setMBeanServer(MBeanServer s)",
                "description": "Deprecated. \nThis method has no effect.  The MBean Server used to\n obtain an attribute value is QueryEval.getMBeanServer().\n",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns the string representing its value.",
                "modAndType": "String"
            }
        ],
        "href": "javax/management/AttributeValueExp.html"
    },
    {
        "name": "AttributeView",
        "constructors": [],
        "methods": [
            {
                "name": "name()",
                "description": "Returns the name of the attribute view.",
                "modAndType": "String"
            }
        ],
        "href": "java/nio/file/attribute/AttributeView.html"
    },
    {
        "name": "AudioClip",
        "constructors": [],
        "methods": [
            {
                "name": "loop()",
                "description": "Starts playing this audio clip in a loop.",
                "modAndType": "void"
            },
            {
                "name": "play()",
                "description": "Starts playing this audio clip.",
                "modAndType": "void"
            },
            {
                "name": "stop()",
                "description": "Stops playing this audio clip.",
                "modAndType": "void"
            }
        ],
        "href": "java/applet/AudioClip.html"
    },
    {
        "name": "AudioFileFormat",
        "constructors": [
            {
                "name": " AudioFileFormat(AudioFileFormat.Type type,\n               AudioFormat format,\n               int frameLength)",
                "description": "Constructs an audio file format object."
            },
            {
                "name": " AudioFileFormat(AudioFileFormat.Type type,\n               AudioFormat format,\n               int frameLength,\n               Map<String,Object> properties)",
                "description": "Construct an audio file format object with a set of\n defined properties."
            },
            {
                "name": "protected AudioFileFormat(AudioFileFormat.Type type,\n               int byteLength,\n               AudioFormat format,\n               int frameLength)",
                "description": "Constructs an audio file format object."
            }
        ],
        "methods": [
            {
                "name": "getByteLength()",
                "description": "Obtains the size in bytes of the entire audio file (not just its audio data).",
                "modAndType": "int"
            },
            {
                "name": "getFormat()",
                "description": "Obtains the format of the audio data contained in the audio file.",
                "modAndType": "AudioFormat"
            },
            {
                "name": "getFrameLength()",
                "description": "Obtains the length of the audio data contained in the file, expressed in sample frames.",
                "modAndType": "int"
            },
            {
                "name": "getProperty(String key)",
                "description": "Obtain the property value specified by the key.",
                "modAndType": "Object"
            },
            {
                "name": "getType()",
                "description": "Obtains the audio file type, such as WAVE or AU.",
                "modAndType": "AudioFileFormat.Type"
            },
            {
                "name": "properties()",
                "description": "Obtain an unmodifiable map of properties.",
                "modAndType": "Map<String,Object>"
            },
            {
                "name": "toString()",
                "description": "Provides a string representation of the file format.",
                "modAndType": "String"
            }
        ],
        "href": "javax/sound/sampled/AudioFileFormat.html"
    },
    {
        "name": "AudioFileFormat.Type",
        "constructors": [
            {
                "name": "Type(String name,\n    String extension)",
                "description": "Constructs a file type."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Finalizes the equals method",
                "modAndType": "boolean"
            },
            {
                "name": "getExtension()",
                "description": "Obtains the common file name extension for this file type.",
                "modAndType": "String"
            },
            {
                "name": "hashCode()",
                "description": "Finalizes the hashCode method",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Provides the file type's name as the String representation\n of the file type.",
                "modAndType": "String"
            }
        ],
        "href": "javax/sound/sampled/AudioFileFormat.Type.html"
    },
    {
        "name": "AudioFileReader",
        "constructors": [
            {
                "name": "AudioFileReader()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getAudioFileFormat(File file)",
                "description": "Obtains the audio file format of the File provided.",
                "modAndType": "abstract AudioFileFormat"
            },
            {
                "name": "getAudioFileFormat(InputStream stream)",
                "description": "Obtains the audio file format of the input stream provided.",
                "modAndType": "abstract AudioFileFormat"
            },
            {
                "name": "getAudioFileFormat(URL url)",
                "description": "Obtains the audio file format of the URL provided.",
                "modAndType": "abstract AudioFileFormat"
            },
            {
                "name": "getAudioInputStream(File file)",
                "description": "Obtains an audio input stream from the File provided.",
                "modAndType": "abstract AudioInputStream"
            },
            {
                "name": "getAudioInputStream(InputStream stream)",
                "description": "Obtains an audio input stream from the input stream provided.",
                "modAndType": "abstract AudioInputStream"
            },
            {
                "name": "getAudioInputStream(URL url)",
                "description": "Obtains an audio input stream from the URL provided.",
                "modAndType": "abstract AudioInputStream"
            }
        ],
        "href": "javax/sound/sampled/spi/AudioFileReader.html"
    },
    {
        "name": "AudioFileWriter",
        "constructors": [
            {
                "name": "AudioFileWriter()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getAudioFileTypes()",
                "description": "Obtains the file types for which file writing support is provided by this\n audio file writer.",
                "modAndType": "abstract AudioFileFormat.Type[]"
            },
            {
                "name": "getAudioFileTypes(AudioInputStream stream)",
                "description": "Obtains the file types that this audio file writer can write from the\n audio input stream specified.",
                "modAndType": "abstract AudioFileFormat.Type[]"
            },
            {
                "name": "isFileTypeSupported(AudioFileFormat.Type fileType)",
                "description": "Indicates whether file writing support for the specified file type is provided\n by this audio file writer.",
                "modAndType": "boolean"
            },
            {
                "name": "isFileTypeSupported(AudioFileFormat.Type fileType,\n                   AudioInputStream stream)",
                "description": "Indicates whether an audio file of the type specified can be written\n from the audio input stream indicated.",
                "modAndType": "boolean"
            },
            {
                "name": "write(AudioInputStream stream,\n     AudioFileFormat.Type fileType,\n     File out)",
                "description": "Writes a stream of bytes representing an audio file of the file format\n indicated to the external file provided.",
                "modAndType": "abstract int"
            },
            {
                "name": "write(AudioInputStream stream,\n     AudioFileFormat.Type fileType,\n     OutputStream out)",
                "description": "Writes a stream of bytes representing an audio file of the file type\n indicated to the output stream provided.",
                "modAndType": "abstract int"
            }
        ],
        "href": "javax/sound/sampled/spi/AudioFileWriter.html"
    },
    {
        "name": "AudioFormat",
        "constructors": [
            {
                "name": "AudioFormat(AudioFormat.Encoding encoding,\n           float sampleRate,\n           int sampleSizeInBits,\n           int channels,\n           int frameSize,\n           float frameRate,\n           boolean bigEndian)",
                "description": "Constructs an AudioFormat with the given parameters."
            },
            {
                "name": "AudioFormat(AudioFormat.Encoding encoding,\n           float sampleRate,\n           int sampleSizeInBits,\n           int channels,\n           int frameSize,\n           float frameRate,\n           boolean bigEndian,\n           Map<String,Object> properties)",
                "description": "Constructs an AudioFormat with the given parameters."
            },
            {
                "name": "AudioFormat(float sampleRate,\n           int sampleSizeInBits,\n           int channels,\n           boolean signed,\n           boolean bigEndian)",
                "description": "Constructs an AudioFormat with a linear PCM encoding and\n the given parameters."
            }
        ],
        "methods": [
            {
                "name": "getChannels()",
                "description": "Obtains the number of channels.",
                "modAndType": "int"
            },
            {
                "name": "getEncoding()",
                "description": "Obtains the type of encoding for sounds in this format.",
                "modAndType": "AudioFormat.Encoding"
            },
            {
                "name": "getFrameRate()",
                "description": "Obtains the frame rate in frames per second.",
                "modAndType": "float"
            },
            {
                "name": "getFrameSize()",
                "description": "Obtains the frame size in bytes.",
                "modAndType": "int"
            },
            {
                "name": "getProperty(String key)",
                "description": "Obtain the property value specified by the key.",
                "modAndType": "Object"
            },
            {
                "name": "getSampleRate()",
                "description": "Obtains the sample rate.",
                "modAndType": "float"
            },
            {
                "name": "getSampleSizeInBits()",
                "description": "Obtains the size of a sample.",
                "modAndType": "int"
            },
            {
                "name": "isBigEndian()",
                "description": "Indicates whether the audio data is stored in big-endian or little-endian\n byte order.",
                "modAndType": "boolean"
            },
            {
                "name": "matches(AudioFormat format)",
                "description": "Indicates whether this format matches the one specified.",
                "modAndType": "boolean"
            },
            {
                "name": "properties()",
                "description": "Obtain an unmodifiable map of properties.",
                "modAndType": "Map<String,Object>"
            },
            {
                "name": "toString()",
                "description": "Returns a string that describes the format, such as:\n \"PCM SIGNED 22050 Hz 16 bit mono big-endian\".",
                "modAndType": "String"
            }
        ],
        "href": "javax/sound/sampled/AudioFormat.html"
    },
    {
        "name": "AudioFormat.Encoding",
        "constructors": [
            {
                "name": "Encoding(String name)",
                "description": "Constructs a new encoding."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Finalizes the equals method",
                "modAndType": "boolean"
            },
            {
                "name": "hashCode()",
                "description": "Finalizes the hashCode method",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Provides the String representation of the encoding.",
                "modAndType": "String"
            }
        ],
        "href": "javax/sound/sampled/AudioFormat.Encoding.html"
    },
    {
        "name": "AudioInputStream",
        "constructors": [
            {
                "name": "AudioInputStream(InputStream stream,\n                AudioFormat format,\n                long length)",
                "description": "Constructs an audio input stream that has the requested format and length in sample frames,\n using audio data from the specified input stream."
            },
            {
                "name": "AudioInputStream(TargetDataLine line)",
                "description": "Constructs an audio input stream that reads its data from the target\n data line indicated."
            }
        ],
        "methods": [
            {
                "name": "available()",
                "description": "Returns the maximum number of bytes that can be read (or skipped over) from this\n audio input stream without blocking.",
                "modAndType": "int"
            },
            {
                "name": "close()",
                "description": "Closes this audio input stream and releases any system resources associated\n with the stream.",
                "modAndType": "void"
            },
            {
                "name": "getFormat()",
                "description": "Obtains the audio format of the sound data in this audio input stream.",
                "modAndType": "AudioFormat"
            },
            {
                "name": "getFrameLength()",
                "description": "Obtains the length of the stream, expressed in sample frames rather than bytes.",
                "modAndType": "long"
            },
            {
                "name": "mark(int readlimit)",
                "description": "Marks the current position in this audio input stream.",
                "modAndType": "void"
            },
            {
                "name": "markSupported()",
                "description": "Tests whether this audio input stream supports the mark and\n reset methods.",
                "modAndType": "boolean"
            },
            {
                "name": "read()",
                "description": "Reads the next byte of data from the audio input stream.",
                "modAndType": "int"
            },
            {
                "name": "read(byte[] b)",
                "description": "Reads some number of bytes from the audio input stream and stores them into\n the buffer array b.",
                "modAndType": "int"
            },
            {
                "name": "read(byte[] b,\n    int off,\n    int len)",
                "description": "Reads up to a specified maximum number of bytes of data from the audio\n stream, putting them into the given byte array.",
                "modAndType": "int"
            },
            {
                "name": "reset()",
                "description": "Repositions this audio input stream to the position it had at the time its\n mark method was last invoked.",
                "modAndType": "void"
            },
            {
                "name": "skip(long n)",
                "description": "Skips over and discards a specified number of bytes from this\n audio input stream.",
                "modAndType": "long"
            }
        ],
        "href": "javax/sound/sampled/AudioInputStream.html"
    },
    {
        "name": "AudioPermission",
        "constructors": [
            {
                "name": "AudioPermission(String name)",
                "description": "Creates a new AudioPermission object that has the specified\n symbolic name, such as \"play\" or \"record\"."
            },
            {
                "name": "AudioPermission(String name,\n               String actions)",
                "description": "Creates a new AudioPermission object that has the specified\n symbolic name, such as \"play\" or \"record\"."
            }
        ],
        "methods": [],
        "href": "javax/sound/sampled/AudioPermission.html"
    },
    {
        "name": "AudioSystem",
        "constructors": [],
        "methods": [
            {
                "name": "getAudioFileFormat(File file)",
                "description": "Obtains the audio file format of the specified File.",
                "modAndType": "static AudioFileFormat"
            },
            {
                "name": "getAudioFileFormat(InputStream stream)",
                "description": "Obtains the audio file format of the provided input stream.",
                "modAndType": "static AudioFileFormat"
            },
            {
                "name": "getAudioFileFormat(URL url)",
                "description": "Obtains the audio file format of the specified URL.",
                "modAndType": "static AudioFileFormat"
            },
            {
                "name": "getAudioFileTypes()",
                "description": "Obtains the file types for which file writing support is provided by the system.",
                "modAndType": "static AudioFileFormat.Type[]"
            },
            {
                "name": "getAudioFileTypes(AudioInputStream stream)",
                "description": "Obtains the file types that the system can write from the\n audio input stream specified.",
                "modAndType": "static AudioFileFormat.Type[]"
            },
            {
                "name": "getAudioInputStream(AudioFormat.Encoding targetEncoding,\n                   AudioInputStream sourceStream)",
                "description": "Obtains an audio input stream of the indicated encoding, by converting the\n provided audio input stream.",
                "modAndType": "static AudioInputStream"
            },
            {
                "name": "getAudioInputStream(AudioFormat targetFormat,\n                   AudioInputStream sourceStream)",
                "description": "Obtains an audio input stream of the indicated format, by converting the\n provided audio input stream.",
                "modAndType": "static AudioInputStream"
            },
            {
                "name": "getAudioInputStream(File file)",
                "description": "Obtains an audio input stream from the provided File.",
                "modAndType": "static AudioInputStream"
            },
            {
                "name": "getAudioInputStream(InputStream stream)",
                "description": "Obtains an audio input stream from the provided input stream.",
                "modAndType": "static AudioInputStream"
            },
            {
                "name": "getAudioInputStream(URL url)",
                "description": "Obtains an audio input stream from the URL provided.",
                "modAndType": "static AudioInputStream"
            },
            {
                "name": "getClip()",
                "description": "Obtains a clip that can be used for playing back\n an audio file or an audio stream.",
                "modAndType": "static Clip"
            },
            {
                "name": "getClip(Mixer.Info mixerInfo)",
                "description": "Obtains a clip from the specified mixer that can be\n used for playing back an audio file or an audio stream.",
                "modAndType": "static Clip"
            },
            {
                "name": "getLine(Line.Info info)",
                "description": "Obtains a line that matches the description in the specified\n Line.Info object.",
                "modAndType": "static Line"
            },
            {
                "name": "getMixer(Mixer.Info info)",
                "description": "Obtains the requested audio mixer.",
                "modAndType": "static Mixer"
            },
            {
                "name": "getMixerInfo()",
                "description": "Obtains an array of mixer info objects that represents\n the set of audio mixers that are currently installed on the system.",
                "modAndType": "static Mixer.Info[]"
            },
            {
                "name": "getSourceDataLine(AudioFormat format)",
                "description": "Obtains a source data line that can be used for playing back\n audio data in the format specified by the\n AudioFormat object.",
                "modAndType": "static SourceDataLine"
            },
            {
                "name": "getSourceDataLine(AudioFormat format,\n                 Mixer.Info mixerinfo)",
                "description": "Obtains a source data line that can be used for playing back\n audio data in the format specified by the\n AudioFormat object, provided by the mixer\n specified by the Mixer.Info object.",
                "modAndType": "static SourceDataLine"
            },
            {
                "name": "getSourceLineInfo(Line.Info info)",
                "description": "Obtains information about all source lines of a particular type that are supported\n by the installed mixers.",
                "modAndType": "static Line.Info[]"
            },
            {
                "name": "getTargetDataLine(AudioFormat format)",
                "description": "Obtains a target data line that can be used for recording\n audio data in the format specified by the\n AudioFormat object.",
                "modAndType": "static TargetDataLine"
            },
            {
                "name": "getTargetDataLine(AudioFormat format,\n                 Mixer.Info mixerinfo)",
                "description": "Obtains a target data line that can be used for recording\n audio data in the format specified by the\n AudioFormat object, provided by the mixer\n specified by the Mixer.Info object.",
                "modAndType": "static TargetDataLine"
            },
            {
                "name": "getTargetEncodings(AudioFormat.Encoding sourceEncoding)",
                "description": "Obtains the encodings that the system can obtain from an\n audio input stream with the specified encoding using the set\n of installed format converters.",
                "modAndType": "static AudioFormat.Encoding[]"
            },
            {
                "name": "getTargetEncodings(AudioFormat sourceFormat)",
                "description": "Obtains the encodings that the system can obtain from an\n audio input stream with the specified format using the set\n of installed format converters.",
                "modAndType": "static AudioFormat.Encoding[]"
            },
            {
                "name": "getTargetFormats(AudioFormat.Encoding targetEncoding,\n                AudioFormat sourceFormat)",
                "description": "Obtains the formats that have a particular encoding and that the system can\n obtain from a stream of the specified format using the set of\n installed format converters.",
                "modAndType": "static AudioFormat[]"
            },
            {
                "name": "getTargetLineInfo(Line.Info info)",
                "description": "Obtains information about all target lines of a particular type that are supported\n by the installed mixers.",
                "modAndType": "static Line.Info[]"
            },
            {
                "name": "isConversionSupported(AudioFormat.Encoding targetEncoding,\n                     AudioFormat sourceFormat)",
                "description": "Indicates whether an audio input stream of the specified encoding\n can be obtained from an audio input stream that has the specified\n format.",
                "modAndType": "static boolean"
            },
            {
                "name": "isConversionSupported(AudioFormat targetFormat,\n                     AudioFormat sourceFormat)",
                "description": "Indicates whether an audio input stream of a specified format\n can be obtained from an audio input stream of another specified format.",
                "modAndType": "static boolean"
            },
            {
                "name": "isFileTypeSupported(AudioFileFormat.Type fileType)",
                "description": "Indicates whether file writing support for the specified file type is provided\n by the system.",
                "modAndType": "static boolean"
            },
            {
                "name": "isFileTypeSupported(AudioFileFormat.Type fileType,\n                   AudioInputStream stream)",
                "description": "Indicates whether an audio file of the specified file type can be written\n from the indicated audio input stream.",
                "modAndType": "static boolean"
            },
            {
                "name": "isLineSupported(Line.Info info)",
                "description": "Indicates whether the system supports any lines that match\n the specified Line.Info object.",
                "modAndType": "static boolean"
            },
            {
                "name": "write(AudioInputStream stream,\n     AudioFileFormat.Type fileType,\n     File out)",
                "description": "Writes a stream of bytes representing an audio file of the specified file type\n to the external file provided.",
                "modAndType": "static int"
            },
            {
                "name": "write(AudioInputStream stream,\n     AudioFileFormat.Type fileType,\n     OutputStream out)",
                "description": "Writes a stream of bytes representing an audio file of the specified file type\n to the output stream provided.",
                "modAndType": "static int"
            }
        ],
        "href": "javax/sound/sampled/AudioSystem.html"
    },
    {
        "name": "AuthenticationException",
        "constructors": [
            {
                "name": "AuthenticationException()",
                "description": "Constructs a new instance of AuthenticationException."
            },
            {
                "name": "AuthenticationException(String explanation)",
                "description": "Constructs a new instance of AuthenticationException using the\n explanation supplied."
            }
        ],
        "methods": [],
        "href": "javax/naming/AuthenticationException.html"
    },
    {
        "name": "AuthenticationException",
        "constructors": [
            {
                "name": "AuthenticationException()",
                "description": "Constructs a new instance of AuthenticationException."
            },
            {
                "name": "AuthenticationException(String detail)",
                "description": "Constructs a new instance of AuthenticationException\n with a detailed message."
            },
            {
                "name": "AuthenticationException(String detail,\n                       Throwable ex)",
                "description": "Constructs a new instance of AuthenticationException with a detailed message\n and a root exception."
            }
        ],
        "methods": [],
        "href": "javax/security/sasl/AuthenticationException.html"
    },
    {
        "name": "AuthenticationNotSupportedException",
        "constructors": [
            {
                "name": "AuthenticationNotSupportedException()",
                "description": "Constructs a new instance of AuthenticationNotSupportedException\n all name resolution fields and explanation initialized to null."
            },
            {
                "name": "AuthenticationNotSupportedException(String explanation)",
                "description": "Constructs a new instance of AuthenticationNotSupportedException using\n an explanation."
            }
        ],
        "methods": [],
        "href": "javax/naming/AuthenticationNotSupportedException.html"
    },
    {
        "name": "Authenticator",
        "constructors": [
            {
                "name": "Authenticator()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getPasswordAuthentication()",
                "description": "Called when password authorization is needed.",
                "modAndType": "protected PasswordAuthentication"
            },
            {
                "name": "getRequestingHost()",
                "description": "Gets the hostname of the\n site or proxy requesting authentication, or null\n if not available.",
                "modAndType": "protected String"
            },
            {
                "name": "getRequestingPort()",
                "description": "Gets the port number for the requested connection.",
                "modAndType": "protected int"
            },
            {
                "name": "getRequestingPrompt()",
                "description": "Gets the prompt string given by the requestor.",
                "modAndType": "protected String"
            },
            {
                "name": "getRequestingProtocol()",
                "description": "Give the protocol that's requesting the connection.",
                "modAndType": "protected String"
            },
            {
                "name": "getRequestingScheme()",
                "description": "Gets the scheme of the requestor (the HTTP scheme\n for an HTTP firewall, for example).",
                "modAndType": "protected String"
            },
            {
                "name": "getRequestingSite()",
                "description": "Gets the InetAddress of the\n site requesting authorization, or null\n if not available.",
                "modAndType": "protected InetAddress"
            },
            {
                "name": "getRequestingURL()",
                "description": "Returns the URL that resulted in this\n request for authentication.",
                "modAndType": "protected URL"
            },
            {
                "name": "getRequestorType()",
                "description": "Returns whether the requestor is a Proxy or a Server.",
                "modAndType": "protected Authenticator.RequestorType"
            },
            {
                "name": "requestPasswordAuthentication(InetAddress addr,\n                             int port,\n                             String protocol,\n                             String prompt,\n                             String scheme)",
                "description": "Ask the authenticator that has been registered with the system\n for a password.",
                "modAndType": "static PasswordAuthentication"
            },
            {
                "name": "requestPasswordAuthentication(String host,\n                             InetAddress addr,\n                             int port,\n                             String protocol,\n                             String prompt,\n                             String scheme)",
                "description": "Ask the authenticator that has been registered with the system\n for a password.",
                "modAndType": "static PasswordAuthentication"
            },
            {
                "name": "requestPasswordAuthentication(String host,\n                             InetAddress addr,\n                             int port,\n                             String protocol,\n                             String prompt,\n                             String scheme,\n                             URL url,\n                             Authenticator.RequestorType reqType)",
                "description": "Ask the authenticator that has been registered with the system\n for a password.",
                "modAndType": "static PasswordAuthentication"
            },
            {
                "name": "setDefault(Authenticator a)",
                "description": "Sets the authenticator that will be used by the networking code\n when a proxy or an HTTP server asks for authentication.",
                "modAndType": "static void"
            }
        ],
        "href": "java/net/Authenticator.html"
    },
    {
        "name": "Authenticator.RequestorType",
        "constructors": [],
        "methods": [
            {
                "name": "valueOf(String name)",
                "description": "Returns the enum constant of this type with the specified name.",
                "modAndType": "static Authenticator.RequestorType"
            },
            {
                "name": "values()",
                "description": "Returns an array containing the constants of this enum type, in\nthe order they are declared.",
                "modAndType": "static Authenticator.RequestorType[]"
            }
        ],
        "href": "java/net/Authenticator.RequestorType.html"
    },
    {
        "name": "AuthorizeCallback",
        "constructors": [
            {
                "name": "AuthorizeCallback(String authnID,\n                 String authzID)",
                "description": "Constructs an instance of AuthorizeCallback."
            }
        ],
        "methods": [
            {
                "name": "getAuthenticationID()",
                "description": "Returns the authentication id to check.",
                "modAndType": "String"
            },
            {
                "name": "getAuthorizationID()",
                "description": "Returns the authorization id to check.",
                "modAndType": "String"
            },
            {
                "name": "getAuthorizedID()",
                "description": "Returns the id of the authorized user.",
                "modAndType": "String"
            },
            {
                "name": "isAuthorized()",
                "description": "Determines whether the authentication id is allowed to\n act on behalf of the authorization id.",
                "modAndType": "boolean"
            },
            {
                "name": "setAuthorized(boolean ok)",
                "description": "Sets whether the authorization is allowed.",
                "modAndType": "void"
            },
            {
                "name": "setAuthorizedID(String id)",
                "description": "Sets the id of the authorized entity.",
                "modAndType": "void"
            }
        ],
        "href": "javax/security/sasl/AuthorizeCallback.html"
    },
    {
        "name": "AuthPermission",
        "constructors": [
            {
                "name": "AuthPermission(String name)",
                "description": "Creates a new AuthPermission with the specified name."
            },
            {
                "name": "AuthPermission(String name,\n              String actions)",
                "description": "Creates a new AuthPermission object with the specified name."
            }
        ],
        "methods": [],
        "href": "javax/security/auth/AuthPermission.html"
    },
    {
        "name": "AuthProvider",
        "constructors": [
            {
                "name": "protected AuthProvider(String name,\n            double version,\n            String info)",
                "description": "Constructs a provider with the specified name, version number,\n and information."
            }
        ],
        "methods": [
            {
                "name": "login(Subject subject,\n     CallbackHandler handler)",
                "description": "Log in to this provider.",
                "modAndType": "abstract void"
            },
            {
                "name": "logout()",
                "description": "Log out from this provider.",
                "modAndType": "abstract void"
            },
            {
                "name": "setCallbackHandler(CallbackHandler handler)",
                "description": "Set a CallbackHandler.",
                "modAndType": "abstract void"
            }
        ],
        "href": "java/security/AuthProvider.html"
    },
    {
        "name": "AutoCloseable",
        "constructors": [],
        "methods": [
            {
                "name": "close()",
                "description": "Closes this resource, relinquishing any underlying resources.",
                "modAndType": "void"
            }
        ],
        "href": "java/lang/AutoCloseable.html"
    },
    {
        "name": "Autoscroll",
        "constructors": [],
        "methods": [
            {
                "name": "autoscroll(Point cursorLocn)",
                "description": "notify the Component to autoscroll",
                "modAndType": "void"
            },
            {
                "name": "getAutoscrollInsets()",
                "description": "This method returns the Insets describing\n the autoscrolling region or border relative\n to the geometry of the implementing Component.",
                "modAndType": "Insets"
            }
        ],
        "href": "java/awt/dnd/Autoscroll.html"
    },
    {
        "name": "AWTError",
        "constructors": [
            {
                "name": "AWTError(String msg)",
                "description": "Constructs an instance of AWTError with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "java/awt/AWTError.html"
    },
    {
        "name": "AWTEvent",
        "constructors": [
            {
                "name": "AWTEvent(Event event)",
                "description": "Constructs an AWTEvent object from the parameters of a 1.0-style event."
            },
            {
                "name": "AWTEvent(Object source,\n        int id)",
                "description": "Constructs an AWTEvent object with the specified source object and type."
            }
        ],
        "methods": [
            {
                "name": "consume()",
                "description": "Consumes this event, if this event can be consumed.",
                "modAndType": "protected void"
            },
            {
                "name": "getID()",
                "description": "Returns the event type.",
                "modAndType": "int"
            },
            {
                "name": "isConsumed()",
                "description": "Returns whether this event has been consumed.",
                "modAndType": "protected boolean"
            },
            {
                "name": "paramString()",
                "description": "Returns a string representing the state of this Event.",
                "modAndType": "String"
            },
            {
                "name": "setSource(Object newSource)",
                "description": "Retargets an event to a new source.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns a String representation of this object.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/AWTEvent.html"
    },
    {
        "name": "AWTEventListener",
        "constructors": [],
        "methods": [
            {
                "name": "eventDispatched(AWTEvent event)",
                "description": "Invoked when an event is dispatched in the AWT.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/event/AWTEventListener.html"
    },
    {
        "name": "AWTEventListenerProxy",
        "constructors": [
            {
                "name": "AWTEventListenerProxy(long eventMask,\n                     AWTEventListener listener)",
                "description": "Constructor which binds the AWTEventListener\n to a specific event mask."
            }
        ],
        "methods": [
            {
                "name": "eventDispatched(AWTEvent event)",
                "description": "Forwards the AWT event to the listener delegate.",
                "modAndType": "void"
            },
            {
                "name": "getEventMask()",
                "description": "Returns the event mask associated with the listener.",
                "modAndType": "long"
            }
        ],
        "href": "java/awt/event/AWTEventListenerProxy.html"
    },
    {
        "name": "AWTEventMulticaster",
        "constructors": [
            {
                "name": "protected AWTEventMulticaster(EventListener a,\n                   EventListener b)",
                "description": "Creates an event multicaster instance which chains listener-a\n with listener-b."
            }
        ],
        "methods": [
            {
                "name": "actionPerformed(ActionEvent e)",
                "description": "Handles the actionPerformed event by invoking the\n actionPerformed methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "add(ActionListener a,\n   ActionListener b)",
                "description": "Adds action-listener-a with action-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static ActionListener"
            },
            {
                "name": "add(AdjustmentListener a,\n   AdjustmentListener b)",
                "description": "Adds adjustment-listener-a with adjustment-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static AdjustmentListener"
            },
            {
                "name": "add(ComponentListener a,\n   ComponentListener b)",
                "description": "Adds component-listener-a with component-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static ComponentListener"
            },
            {
                "name": "add(ContainerListener a,\n   ContainerListener b)",
                "description": "Adds container-listener-a with container-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static ContainerListener"
            },
            {
                "name": "add(FocusListener a,\n   FocusListener b)",
                "description": "Adds focus-listener-a with focus-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static FocusListener"
            },
            {
                "name": "add(HierarchyBoundsListener a,\n   HierarchyBoundsListener b)",
                "description": "Adds hierarchy-bounds-listener-a with hierarchy-bounds-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static HierarchyBoundsListener"
            },
            {
                "name": "add(HierarchyListener a,\n   HierarchyListener b)",
                "description": "Adds hierarchy-listener-a with hierarchy-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static HierarchyListener"
            },
            {
                "name": "add(InputMethodListener a,\n   InputMethodListener b)",
                "description": "Adds input-method-listener-a with input-method-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static InputMethodListener"
            },
            {
                "name": "add(ItemListener a,\n   ItemListener b)",
                "description": "Adds item-listener-a with item-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static ItemListener"
            },
            {
                "name": "add(KeyListener a,\n   KeyListener b)",
                "description": "Adds key-listener-a with key-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static KeyListener"
            },
            {
                "name": "add(MouseListener a,\n   MouseListener b)",
                "description": "Adds mouse-listener-a with mouse-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static MouseListener"
            },
            {
                "name": "add(MouseMotionListener a,\n   MouseMotionListener b)",
                "description": "Adds mouse-motion-listener-a with mouse-motion-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static MouseMotionListener"
            },
            {
                "name": "add(MouseWheelListener a,\n   MouseWheelListener b)",
                "description": "Adds mouse-wheel-listener-a with mouse-wheel-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static MouseWheelListener"
            },
            {
                "name": "add(TextListener a,\n   TextListener b)",
                "description": "",
                "modAndType": "static TextListener"
            },
            {
                "name": "add(WindowFocusListener a,\n   WindowFocusListener b)",
                "description": "Adds window-focus-listener-a with window-focus-listener-b\n and returns the resulting multicast listener.",
                "modAndType": "static WindowFocusListener"
            },
            {
                "name": "add(WindowListener a,\n   WindowListener b)",
                "description": "Adds window-listener-a with window-listener-b and\n returns the resulting multicast listener.",
                "modAndType": "static WindowListener"
            },
            {
                "name": "add(WindowStateListener a,\n   WindowStateListener b)",
                "description": "Adds window-state-listener-a with window-state-listener-b\n and returns the resulting multicast listener.",
                "modAndType": "static WindowStateListener"
            },
            {
                "name": "addInternal(EventListener a,\n           EventListener b)",
                "description": "Returns the resulting multicast listener from adding listener-a\n and listener-b together.",
                "modAndType": "protected static EventListener"
            },
            {
                "name": "adjustmentValueChanged(AdjustmentEvent e)",
                "description": "Handles the adjustmentValueChanged event by invoking the\n adjustmentValueChanged methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "ancestorMoved(HierarchyEvent e)",
                "description": "Handles the ancestorMoved event by invoking the\n ancestorMoved methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "ancestorResized(HierarchyEvent e)",
                "description": "Handles the ancestorResized event by invoking the\n ancestorResized methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "caretPositionChanged(InputMethodEvent e)",
                "description": "Handles the caretPositionChanged event by invoking the\n caretPositionChanged methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "componentAdded(ContainerEvent e)",
                "description": "Handles the componentAdded container event by invoking the\n componentAdded methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "componentHidden(ComponentEvent e)",
                "description": "Handles the componentHidden event by invoking the\n componentHidden methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "componentMoved(ComponentEvent e)",
                "description": "Handles the componentMoved event by invoking the\n componentMoved methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "componentRemoved(ContainerEvent e)",
                "description": "Handles the componentRemoved container event by invoking the\n componentRemoved methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "componentResized(ComponentEvent e)",
                "description": "Handles the componentResized event by invoking the\n componentResized methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "componentShown(ComponentEvent e)",
                "description": "Handles the componentShown event by invoking the\n componentShown methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "focusGained(FocusEvent e)",
                "description": "Handles the focusGained event by invoking the\n focusGained methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "focusLost(FocusEvent e)",
                "description": "Handles the focusLost event by invoking the\n focusLost methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "getListeners(EventListener l,\n            Class<T> listenerType)",
                "description": "Returns an array of all the objects chained as\n FooListeners by the specified\n java.util.EventListener.",
                "modAndType": "static <T extends EventListener>T[]"
            },
            {
                "name": "hierarchyChanged(HierarchyEvent e)",
                "description": "Handles the hierarchyChanged event by invoking the\n hierarchyChanged methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "inputMethodTextChanged(InputMethodEvent e)",
                "description": "Handles the inputMethodTextChanged event by invoking the\n inputMethodTextChanged methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "itemStateChanged(ItemEvent e)",
                "description": "Handles the itemStateChanged event by invoking the\n itemStateChanged methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "keyPressed(KeyEvent e)",
                "description": "Handles the keyPressed event by invoking the\n keyPressed methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "keyReleased(KeyEvent e)",
                "description": "Handles the keyReleased event by invoking the\n keyReleased methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "keyTyped(KeyEvent e)",
                "description": "Handles the keyTyped event by invoking the\n keyTyped methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseClicked(MouseEvent e)",
                "description": "Handles the mouseClicked event by invoking the\n mouseClicked methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseDragged(MouseEvent e)",
                "description": "Handles the mouseDragged event by invoking the\n mouseDragged methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseEntered(MouseEvent e)",
                "description": "Handles the mouseEntered event by invoking the\n mouseEntered methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseExited(MouseEvent e)",
                "description": "Handles the mouseExited event by invoking the\n mouseExited methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseMoved(MouseEvent e)",
                "description": "Handles the mouseMoved event by invoking the\n mouseMoved methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mousePressed(MouseEvent e)",
                "description": "Handles the mousePressed event by invoking the\n mousePressed methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseReleased(MouseEvent e)",
                "description": "Handles the mouseReleased event by invoking the\n mouseReleased methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "mouseWheelMoved(MouseWheelEvent e)",
                "description": "Handles the mouseWheelMoved event by invoking the\n mouseWheelMoved methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "remove(ActionListener l,\n      ActionListener oldl)",
                "description": "Removes the old action-listener from action-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static ActionListener"
            },
            {
                "name": "remove(AdjustmentListener l,\n      AdjustmentListener oldl)",
                "description": "Removes the old adjustment-listener from adjustment-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static AdjustmentListener"
            },
            {
                "name": "remove(ComponentListener l,\n      ComponentListener oldl)",
                "description": "Removes the old component-listener from component-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static ComponentListener"
            },
            {
                "name": "remove(ContainerListener l,\n      ContainerListener oldl)",
                "description": "Removes the old container-listener from container-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static ContainerListener"
            },
            {
                "name": "remove(EventListener oldl)",
                "description": "Removes a listener from this multicaster.",
                "modAndType": "protected EventListener"
            },
            {
                "name": "remove(FocusListener l,\n      FocusListener oldl)",
                "description": "Removes the old focus-listener from focus-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static FocusListener"
            },
            {
                "name": "remove(HierarchyBoundsListener l,\n      HierarchyBoundsListener oldl)",
                "description": "Removes the old hierarchy-bounds-listener from\n hierarchy-bounds-listener-l and returns the resulting multicast\n listener.",
                "modAndType": "static HierarchyBoundsListener"
            },
            {
                "name": "remove(HierarchyListener l,\n      HierarchyListener oldl)",
                "description": "Removes the old hierarchy-listener from hierarchy-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static HierarchyListener"
            },
            {
                "name": "remove(InputMethodListener l,\n      InputMethodListener oldl)",
                "description": "Removes the old input-method-listener from input-method-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static InputMethodListener"
            },
            {
                "name": "remove(ItemListener l,\n      ItemListener oldl)",
                "description": "Removes the old item-listener from item-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static ItemListener"
            },
            {
                "name": "remove(KeyListener l,\n      KeyListener oldl)",
                "description": "Removes the old key-listener from key-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static KeyListener"
            },
            {
                "name": "remove(MouseListener l,\n      MouseListener oldl)",
                "description": "Removes the old mouse-listener from mouse-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static MouseListener"
            },
            {
                "name": "remove(MouseMotionListener l,\n      MouseMotionListener oldl)",
                "description": "Removes the old mouse-motion-listener from mouse-motion-listener-l\n and returns the resulting multicast listener.",
                "modAndType": "static MouseMotionListener"
            },
            {
                "name": "remove(MouseWheelListener l,\n      MouseWheelListener oldl)",
                "description": "Removes the old mouse-wheel-listener from mouse-wheel-listener-l\n and returns the resulting multicast listener.",
                "modAndType": "static MouseWheelListener"
            },
            {
                "name": "remove(TextListener l,\n      TextListener oldl)",
                "description": "",
                "modAndType": "static TextListener"
            },
            {
                "name": "remove(WindowFocusListener l,\n      WindowFocusListener oldl)",
                "description": "Removes the old window-focus-listener from window-focus-listener-l\n and returns the resulting multicast listener.",
                "modAndType": "static WindowFocusListener"
            },
            {
                "name": "remove(WindowListener l,\n      WindowListener oldl)",
                "description": "Removes the old window-listener from window-listener-l and\n returns the resulting multicast listener.",
                "modAndType": "static WindowListener"
            },
            {
                "name": "remove(WindowStateListener l,\n      WindowStateListener oldl)",
                "description": "Removes the old window-state-listener from window-state-listener-l\n and returns the resulting multicast listener.",
                "modAndType": "static WindowStateListener"
            },
            {
                "name": "removeInternal(EventListener l,\n              EventListener oldl)",
                "description": "Returns the resulting multicast listener after removing the\n old listener from listener-l.",
                "modAndType": "protected static EventListener"
            },
            {
                "name": "save(ObjectOutputStream s,\n    String k,\n    EventListener l)",
                "description": "",
                "modAndType": "protected static void"
            },
            {
                "name": "saveInternal(ObjectOutputStream s,\n            String k)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "textValueChanged(TextEvent e)",
                "description": "Invoked when the value of the text has changed.",
                "modAndType": "void"
            },
            {
                "name": "windowActivated(WindowEvent e)",
                "description": "Handles the windowActivated event by invoking the\n windowActivated methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowClosed(WindowEvent e)",
                "description": "Handles the windowClosed event by invoking the\n windowClosed methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowClosing(WindowEvent e)",
                "description": "Handles the windowClosing event by invoking the\n windowClosing methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowDeactivated(WindowEvent e)",
                "description": "Handles the windowDeactivated event by invoking the\n windowDeactivated methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowDeiconified(WindowEvent e)",
                "description": "Handles the windowDeiconfied event by invoking the\n windowDeiconified methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowGainedFocus(WindowEvent e)",
                "description": "Handles the windowGainedFocus event by invoking the windowGainedFocus\n methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowIconified(WindowEvent e)",
                "description": "Handles the windowIconified event by invoking the\n windowIconified methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowLostFocus(WindowEvent e)",
                "description": "Handles the windowLostFocus event by invoking the windowLostFocus\n methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowOpened(WindowEvent e)",
                "description": "Handles the windowOpened event by invoking the\n windowOpened methods on listener-a and listener-b.",
                "modAndType": "void"
            },
            {
                "name": "windowStateChanged(WindowEvent e)",
                "description": "Handles the windowStateChanged event by invoking the\n windowStateChanged methods on listener-a and listener-b.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/AWTEventMulticaster.html"
    },
    {
        "name": "AWTException",
        "constructors": [
            {
                "name": "AWTException(String msg)",
                "description": "Constructs an instance of AWTException with the\n specified detail message."
            }
        ],
        "methods": [],
        "href": "java/awt/AWTException.html"
    },
    {
        "name": "AWTKeyStroke",
        "constructors": [
            {
                "name": "protected AWTKeyStroke()",
                "description": "Constructs an AWTKeyStroke with default values."
            },
            {
                "name": "protected AWTKeyStroke(char keyChar,\n            int keyCode,\n            int modifiers,\n            boolean onKeyRelease)",
                "description": "Constructs an AWTKeyStroke with the specified\n values."
            }
        ],
        "methods": [
            {
                "name": "equals(Object anObject)",
                "description": "Returns true if this object is identical to the specified object.",
                "modAndType": "boolean"
            },
            {
                "name": "getAWTKeyStroke(char keyChar)",
                "description": "Returns a shared instance of an AWTKeyStroke\n that represents a KEY_TYPED event for the\n specified character.",
                "modAndType": "static AWTKeyStroke"
            },
            {
                "name": "getAWTKeyStroke(Character keyChar,\n               int modifiers)",
                "description": "Returns a shared instance of an AWTKeyStroke\n that represents a KEY_TYPED event for the\n specified Character object and a set of modifiers.",
                "modAndType": "static AWTKeyStroke"
            },
            {
                "name": "getAWTKeyStroke(int keyCode,\n               int modifiers)",
                "description": "Returns a shared instance of an AWTKeyStroke,\n given a numeric key code and a set of modifiers.",
                "modAndType": "static AWTKeyStroke"
            },
            {
                "name": "getAWTKeyStroke(int keyCode,\n               int modifiers,\n               boolean onKeyRelease)",
                "description": "Returns a shared instance of an AWTKeyStroke,\n given a numeric key code and a set of modifiers, specifying\n whether the key is activated when it is pressed or released.",
                "modAndType": "static AWTKeyStroke"
            },
            {
                "name": "getAWTKeyStroke(String s)",
                "description": "Parses a string and returns an AWTKeyStroke.",
                "modAndType": "static AWTKeyStroke"
            },
            {
                "name": "getAWTKeyStrokeForEvent(KeyEvent anEvent)",
                "description": "Returns an AWTKeyStroke which represents the\n stroke which generated a given KeyEvent.",
                "modAndType": "static AWTKeyStroke"
            },
            {
                "name": "getKeyChar()",
                "description": "Returns the character for this AWTKeyStroke.",
                "modAndType": "char"
            },
            {
                "name": "getKeyCode()",
                "description": "Returns the numeric key code for this AWTKeyStroke.",
                "modAndType": "int"
            },
            {
                "name": "getKeyEventType()",
                "description": "Returns the type of KeyEvent which corresponds to\n this AWTKeyStroke.",
                "modAndType": "int"
            },
            {
                "name": "getModifiers()",
                "description": "Returns the modifier keys for this AWTKeyStroke.",
                "modAndType": "int"
            },
            {
                "name": "hashCode()",
                "description": "Returns a numeric value for this object that is likely to be unique,\n making it a good choice as the index value in a hash table.",
                "modAndType": "int"
            },
            {
                "name": "isOnKeyRelease()",
                "description": "Returns whether this AWTKeyStroke represents a key release.",
                "modAndType": "boolean"
            },
            {
                "name": "readResolve()",
                "description": "Returns a cached instance of AWTKeyStroke (or a subclass of\n AWTKeyStroke) which is equal to this instance.",
                "modAndType": "protected Object"
            },
            {
                "name": "registerSubclass(Class<?> subclass)",
                "description": "Registers a new class which the factory methods in\n AWTKeyStroke will use when generating new\n instances of AWTKeyStrokes.",
                "modAndType": "protected static void"
            },
            {
                "name": "toString()",
                "description": "Returns a string that displays and identifies this object's properties.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/AWTKeyStroke.html"
    },
    {
        "name": "AWTPermission",
        "constructors": [
            {
                "name": "AWTPermission(String name)",
                "description": "Creates a new AWTPermission with the specified name."
            },
            {
                "name": "AWTPermission(String name,\n             String actions)",
                "description": "Creates a new AWTPermission object with the specified name."
            }
        ],
        "methods": [],
        "href": "java/awt/AWTPermission.html"
    },
    {
        "name": "BackingStoreException",
        "constructors": [
            {
                "name": "BackingStoreException(String s)",
                "description": "Constructs a BackingStoreException with the specified detail message."
            },
            {
                "name": "BackingStoreException(Throwable cause)",
                "description": "Constructs a BackingStoreException with the specified cause."
            }
        ],
        "methods": [],
        "href": "java/util/prefs/BackingStoreException.html"
    },
    {
        "name": "BAD_CONTEXT",
        "constructors": [
            {
                "name": "BAD_CONTEXT()",
                "description": "Constructs a BAD_CONTEXT exception\n with a default minor code\n of 0 and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_CONTEXT(int minor,\n           CompletionStatus completed)",
                "description": "Constructs a BAD_CONTEXT exception\n with the specified\n minor code and completion status."
            },
            {
                "name": "BAD_CONTEXT(String s)",
                "description": "Constructs a BAD_CONTEXT exception\n with the specified detail message, a minor code\n of 0 and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_CONTEXT(String s,\n           int minor,\n           CompletionStatus completed)",
                "description": "Constructs a BAD_CONTEXT exception\n with the specified detail\n message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/BAD_CONTEXT.html"
    },
    {
        "name": "BAD_INV_ORDER",
        "constructors": [
            {
                "name": "BAD_INV_ORDER()",
                "description": "Constructs a BAD_INV_ORDER exception with a default\n minor code of 0 and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_INV_ORDER(int minor,\n             CompletionStatus completed)",
                "description": "Constructs a BAD_INV_ORDER exceptionBAD_INV_ORDER with the specified\n minor code and completion status."
            },
            {
                "name": "BAD_INV_ORDER(String s)",
                "description": "Constructs a BAD_INV_ORDER exception with the specified detail\n message, a minor code of 0, and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_INV_ORDER(String s,\n             int minor,\n             CompletionStatus completed)",
                "description": "Constructs a BAD_INV_ORDER exception with the specified detail\n message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/BAD_INV_ORDER.html"
    },
    {
        "name": "BAD_OPERATION",
        "constructors": [
            {
                "name": "BAD_OPERATION()",
                "description": "Constructs a BAD_OPERATION exception with a default\n minor code of 0 and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_OPERATION(int minor,\n             CompletionStatus completed)",
                "description": "Constructs a BAD_OPERATION exception with the specified\n minor code and completion status."
            },
            {
                "name": "BAD_OPERATION(String s)",
                "description": "Constructs a BAD_OPERATION exception with the specified detail\n message, a minor code of 0, and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_OPERATION(String s,\n             int minor,\n             CompletionStatus completed)",
                "description": "Constructs a BAD_OPERATION exception with the specified detail\n message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/BAD_OPERATION.html"
    },
    {
        "name": "BAD_PARAM",
        "constructors": [
            {
                "name": "BAD_PARAM()",
                "description": "Constructs a BAD_PARAM exception with a default\n minor code of 0 and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_PARAM(int minor,\n         CompletionStatus completed)",
                "description": "Constructs a BAD_PARAM exception with the specified\n minor code and completion status."
            },
            {
                "name": "BAD_PARAM(String s)",
                "description": "Constructs a BAD_PARAM exception with the specified detail\n message, a minor code of 0, and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_PARAM(String s,\n         int minor,\n         CompletionStatus completed)",
                "description": "Constructs a BAD_PARAM exception with the specified detail\n message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/BAD_PARAM.html"
    },
    {
        "name": "BAD_POLICY",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/BAD_POLICY.html"
    },
    {
        "name": "BAD_POLICY_TYPE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/BAD_POLICY_TYPE.html"
    },
    {
        "name": "BAD_POLICY_VALUE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/BAD_POLICY_VALUE.html"
    },
    {
        "name": "BAD_QOS",
        "constructors": [
            {
                "name": "BAD_QOS()",
                "description": "Constructs an BAD_QOS exception with\n minor code set to 0 and CompletionStatus set to COMPLETED_NO."
            },
            {
                "name": "BAD_QOS(int minorCode,\n       CompletionStatus completionStatus)",
                "description": "Constructs an BAD_QOS exception with the\n specified minor code and completion status."
            },
            {
                "name": "BAD_QOS(String detailMessage)",
                "description": "Constructs an BAD_QOS exception with the\n specified message."
            },
            {
                "name": "BAD_QOS(String detailMessage,\n       int minorCode,\n       CompletionStatus completionStatus)",
                "description": "Constructs an BAD_QOS exception with the\n specified message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/BAD_QOS.html"
    },
    {
        "name": "BAD_TYPECODE",
        "constructors": [
            {
                "name": "BAD_TYPECODE()",
                "description": "Constructs a BAD_TYPECODE exception with a default\n minor code of 0 and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_TYPECODE(int minor,\n            CompletionStatus completed)",
                "description": "Constructs a BAD_TYPECODE exception with the specified\n minor code and completion status."
            },
            {
                "name": "BAD_TYPECODE(String s)",
                "description": "Constructs a BAD_TYPECODE exception with the specified detail,\n a minor code of 0, and a completion state of COMPLETED_NO."
            },
            {
                "name": "BAD_TYPECODE(String s,\n            int minor,\n            CompletionStatus completed)",
                "description": "Constructs a BAD_TYPECODE exception with the specified detail\n message, minor code, and completion status."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/BAD_TYPECODE.html"
    },
    {
        "name": "BadAttributeValueExpException",
        "constructors": [
            {
                "name": "BadAttributeValueExpException(Object val)",
                "description": "Constructs a BadAttributeValueExpException using the specified Object to\n create the toString() value."
            }
        ],
        "methods": [
            {
                "name": "toString()",
                "description": "Returns the string representing the object.",
                "modAndType": "String"
            }
        ],
        "href": "javax/management/BadAttributeValueExpException.html"
    },
    {
        "name": "BadBinaryOpValueExpException",
        "constructors": [
            {
                "name": "BadBinaryOpValueExpException(ValueExp exp)",
                "description": "Constructs a BadBinaryOpValueExpException with the specified ValueExp."
            }
        ],
        "methods": [
            {
                "name": "getExp()",
                "description": "Returns the ValueExp that originated the exception.",
                "modAndType": "ValueExp"
            },
            {
                "name": "toString()",
                "description": "Returns the string representing the object.",
                "modAndType": "String"
            }
        ],
        "href": "javax/management/BadBinaryOpValueExpException.html"
    },
    {
        "name": "BadKind",
        "constructors": [
            {
                "name": "BadKind()",
                "description": "Constructs a BadKind exception with no reason message."
            },
            {
                "name": "BadKind(String reason)",
                "description": "Constructs a BadKind exception with the specified\n reason message."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/TypeCodePackage/BadKind.html"
    },
    {
        "name": "BadLocationException",
        "constructors": [
            {
                "name": "BadLocationException(String s,\n                    int offs)",
                "description": "Creates a new BadLocationException object."
            }
        ],
        "methods": [
            {
                "name": "offsetRequested()",
                "description": "Returns the offset into the document that was not legal.",
                "modAndType": "int"
            }
        ],
        "href": "javax/swing/text/BadLocationException.html"
    },
    {
        "name": "BadPaddingException",
        "constructors": [
            {
                "name": "BadPaddingException()",
                "description": "Constructs a BadPaddingException with no detail\n message."
            },
            {
                "name": "BadPaddingException(String msg)",
                "description": "Constructs a BadPaddingException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "javax/crypto/BadPaddingException.html"
    },
    {
        "name": "BadStringOperationException",
        "constructors": [
            {
                "name": "BadStringOperationException(String message)",
                "description": "Constructs a BadStringOperationException with the specified detail\n message."
            }
        ],
        "methods": [
            {
                "name": "toString()",
                "description": "Returns the string representing the object.",
                "modAndType": "String"
            }
        ],
        "href": "javax/management/BadStringOperationException.html"
    },
    {
        "name": "BandCombineOp",
        "constructors": [
            {
                "name": "BandCombineOp(float[][] matrix,\n             RenderingHints hints)",
                "description": "Constructs a BandCombineOp with the specified matrix."
            }
        ],
        "methods": [
            {
                "name": "createCompatibleDestRaster(Raster src)",
                "description": "Creates a zeroed destination Raster with the correct size\n and number of bands.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "filter(Raster src,\n      WritableRaster dst)",
                "description": "Transforms the Raster using the matrix specified in the\n constructor.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "getBounds2D(Raster src)",
                "description": "Returns the bounding box of the transformed destination.",
                "modAndType": "Rectangle2D"
            },
            {
                "name": "getMatrix()",
                "description": "Returns a copy of the linear combination matrix.",
                "modAndType": "float[][]"
            },
            {
                "name": "getPoint2D(Point2D srcPt,\n          Point2D dstPt)",
                "description": "Returns the location of the corresponding destination point given a\n point in the source Raster.",
                "modAndType": "Point2D"
            },
            {
                "name": "getRenderingHints()",
                "description": "Returns the rendering hints for this operation.",
                "modAndType": "RenderingHints"
            }
        ],
        "href": "java/awt/image/BandCombineOp.html"
    },
    {
        "name": "BandedSampleModel",
        "constructors": [
            {
                "name": "BandedSampleModel(int dataType,\n                 int w,\n                 int h,\n                 int numBands)",
                "description": "Constructs a BandedSampleModel with the specified parameters."
            },
            {
                "name": "BandedSampleModel(int dataType,\n                 int w,\n                 int h,\n                 int scanlineStride,\n                 int[] bankIndices,\n                 int[] bandOffsets)",
                "description": "Constructs a BandedSampleModel with the specified parameters."
            }
        ],
        "methods": [
            {
                "name": "createCompatibleSampleModel(int w,\n                           int h)",
                "description": "Creates a new BandedSampleModel with the specified\n width and height.",
                "modAndType": "SampleModel"
            },
            {
                "name": "createDataBuffer()",
                "description": "Creates a DataBuffer that corresponds to this BandedSampleModel,\n The DataBuffer's data type, number of banks, and size\n will be consistent with this BandedSampleModel.",
                "modAndType": "DataBuffer"
            },
            {
                "name": "createSubsetSampleModel(int[] bands)",
                "description": "Creates a new BandedSampleModel with a subset of the bands of this\n BandedSampleModel.",
                "modAndType": "SampleModel"
            },
            {
                "name": "getDataElements(int x,\n               int y,\n               Object obj,\n               DataBuffer data)",
                "description": "Returns data for a single pixel in a primitive array of type\n TransferType.",
                "modAndType": "Object"
            },
            {
                "name": "getPixel(int x,\n        int y,\n        int[] iArray,\n        DataBuffer data)",
                "description": "Returns all samples for the specified pixel in an int array.",
                "modAndType": "int[]"
            },
            {
                "name": "getPixels(int x,\n         int y,\n         int w,\n         int h,\n         int[] iArray,\n         DataBuffer data)",
                "description": "Returns all samples for the specified rectangle of pixels in\n an int array, one sample per data array element.",
                "modAndType": "int[]"
            },
            {
                "name": "getSample(int x,\n         int y,\n         int b,\n         DataBuffer data)",
                "description": "Returns as int the sample in a specified band for the pixel\n located at (x,y).",
                "modAndType": "int"
            },
            {
                "name": "getSampleDouble(int x,\n               int y,\n               int b,\n               DataBuffer data)",
                "description": "Returns the sample in a specified band\n for a pixel located at (x,y) as a double.",
                "modAndType": "double"
            },
            {
                "name": "getSampleFloat(int x,\n              int y,\n              int b,\n              DataBuffer data)",
                "description": "Returns the sample in a specified band\n for the pixel located at (x,y) as a float.",
                "modAndType": "float"
            },
            {
                "name": "getSamples(int x,\n          int y,\n          int w,\n          int h,\n          int b,\n          int[] iArray,\n          DataBuffer data)",
                "description": "Returns the samples in a specified band for the specified rectangle\n of pixels in an int array, one sample per data array element.",
                "modAndType": "int[]"
            },
            {
                "name": "hashCode()",
                "description": "Returns a hash code value for the object.",
                "modAndType": "int"
            },
            {
                "name": "setDataElements(int x,\n               int y,\n               Object obj,\n               DataBuffer data)",
                "description": "Sets the data for a single pixel in the specified DataBuffer from a\n primitive array of type TransferType.",
                "modAndType": "void"
            },
            {
                "name": "setPixel(int x,\n        int y,\n        int[] iArray,\n        DataBuffer data)",
                "description": "Sets a pixel in the DataBuffer using an int array of samples for input.",
                "modAndType": "void"
            },
            {
                "name": "setPixels(int x,\n         int y,\n         int w,\n         int h,\n         int[] iArray,\n         DataBuffer data)",
                "description": "Sets all samples for a rectangle of pixels from an int array containing\n one sample per array element.",
                "modAndType": "void"
            },
            {
                "name": "setSample(int x,\n         int y,\n         int b,\n         double s,\n         DataBuffer data)",
                "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a double for input.",
                "modAndType": "void"
            },
            {
                "name": "setSample(int x,\n         int y,\n         int b,\n         float s,\n         DataBuffer data)",
                "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using a float for input.",
                "modAndType": "void"
            },
            {
                "name": "setSample(int x,\n         int y,\n         int b,\n         int s,\n         DataBuffer data)",
                "description": "Sets a sample in the specified band for the pixel located at (x,y)\n in the DataBuffer using an int for input.",
                "modAndType": "void"
            },
            {
                "name": "setSamples(int x,\n          int y,\n          int w,\n          int h,\n          int b,\n          int[] iArray,\n          DataBuffer data)",
                "description": "Sets the samples in the specified band for the specified rectangle\n of pixels from an int array containing one sample per data array element.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/image/BandedSampleModel.html"
    },
    {
        "name": "Base64",
        "constructors": [],
        "methods": [
            {
                "name": "getDecoder()",
                "description": "Returns a Base64.Decoder that decodes using the\n Basic type base64 encoding scheme.",
                "modAndType": "static Base64.Decoder"
            },
            {
                "name": "getEncoder()",
                "description": "Returns a Base64.Encoder that encodes using the\n Basic type base64 encoding scheme.",
                "modAndType": "static Base64.Encoder"
            },
            {
                "name": "getMimeDecoder()",
                "description": "Returns a Base64.Decoder that decodes using the\n MIME type base64 decoding scheme.",
                "modAndType": "static Base64.Decoder"
            },
            {
                "name": "getMimeEncoder()",
                "description": "Returns a Base64.Encoder that encodes using the\n MIME type base64 encoding scheme.",
                "modAndType": "static Base64.Encoder"
            },
            {
                "name": "getMimeEncoder(int lineLength,\n              byte[] lineSeparator)",
                "description": "Returns a Base64.Encoder that encodes using the\n MIME type base64 encoding scheme\n with specified line length and line separators.",
                "modAndType": "static Base64.Encoder"
            },
            {
                "name": "getUrlDecoder()",
                "description": "Returns a Base64.Decoder that decodes using the\n URL and Filename safe type base64\n encoding scheme.",
                "modAndType": "static Base64.Decoder"
            },
            {
                "name": "getUrlEncoder()",
                "description": "Returns a Base64.Encoder that encodes using the\n URL and Filename safe type base64\n encoding scheme.",
                "modAndType": "static Base64.Encoder"
            }
        ],
        "href": "java/util/Base64.html"
    },
    {
        "name": "Base64.Decoder",
        "constructors": [],
        "methods": [
            {
                "name": "decode(byte[] src)",
                "description": "Decodes all bytes from the input byte array using the Base64\n encoding scheme, writing the results into a newly-allocated output\n byte array.",
                "modAndType": "byte[]"
            },
            {
                "name": "decode(byte[] src,\n      byte[] dst)",
                "description": "Decodes all bytes from the input byte array using the Base64\n encoding scheme, writing the results into the given output byte array,\n starting at offset 0.",
                "modAndType": "int"
            },
            {
                "name": "decode(ByteBuffer buffer)",
                "description": "Decodes all bytes from the input byte buffer using the Base64\n encoding scheme, writing the results into a newly-allocated ByteBuffer.",
                "modAndType": "ByteBuffer"
            },
            {
                "name": "decode(String src)",
                "description": "Decodes a Base64 encoded String into a newly-allocated byte array\n using the Base64 encoding scheme.",
                "modAndType": "byte[]"
            },
            {
                "name": "wrap(InputStream is)",
                "description": "Returns an input stream for decoding Base64 encoded byte stream.",
                "modAndType": "InputStream"
            }
        ],
        "href": "java/util/Base64.Decoder.html"
    },
    {
        "name": "Base64.Encoder",
        "constructors": [],
        "methods": [
            {
                "name": "encode(byte[] src)",
                "description": "Encodes all bytes from the specified byte array into a newly-allocated\n byte array using the Base64 encoding scheme.",
                "modAndType": "byte[]"
            },
            {
                "name": "encode(byte[] src,\n      byte[] dst)",
                "description": "Encodes all bytes from the specified byte array using the\n Base64 encoding scheme, writing the resulting bytes to the\n given output byte array, starting at offset 0.",
                "modAndType": "int"
            },
            {
                "name": "encode(ByteBuffer buffer)",
                "description": "Encodes all remaining bytes from the specified byte buffer into\n a newly-allocated ByteBuffer using the Base64 encoding\n scheme.",
                "modAndType": "ByteBuffer"
            },
            {
                "name": "encodeToString(byte[] src)",
                "description": "Encodes the specified byte array into a String using the Base64\n encoding scheme.",
                "modAndType": "String"
            },
            {
                "name": "withoutPadding()",
                "description": "Returns an encoder instance that encodes equivalently to this one,\n but without adding any padding character at the end of the encoded\n byte data.",
                "modAndType": "Base64.Encoder"
            },
            {
                "name": "wrap(OutputStream os)",
                "description": "Wraps an output stream for encoding byte data using the Base64\n encoding scheme.",
                "modAndType": "OutputStream"
            }
        ],
        "href": "java/util/Base64.Encoder.html"
    },
    {
        "name": "BaseRowSet",
        "constructors": [
            {
                "name": "BaseRowSet()",
                "description": "Constructs a new BaseRowSet object initialized with\n a default Vector object for its listeners\n field."
            }
        ],
        "methods": [
            {
                "name": "addRowSetListener(RowSetListener listener)",
                "description": "The listener will be notified whenever an event occurs on this RowSet\n object.",
                "modAndType": "void"
            },
            {
                "name": "clearParameters()",
                "description": "Clears all of the current parameter values in this RowSet\n object's internal representation of the parameters to be set in\n this RowSet object's command when it is executed.",
                "modAndType": "void"
            },
            {
                "name": "getCommand()",
                "description": "Retrieves the SQL query that is the command for this\n RowSet object.",
                "modAndType": "String"
            },
            {
                "name": "getConcurrency()",
                "description": "Returns the concurrency for this RowSet object.",
                "modAndType": "int"
            },
            {
                "name": "getDataSourceName()",
                "description": "Returns the logical name that when supplied to a naming service\n that uses the Java Naming and Directory Interface (JNDI) API, will\n retrieve a javax.sql.DataSource object.",
                "modAndType": "String"
            },
            {
                "name": "getEscapeProcessing()",
                "description": "Ascertains whether escape processing is enabled for this\n RowSet object.",
                "modAndType": "boolean"
            },
            {
                "name": "getFetchDirection()",
                "description": "Retrieves this RowSet object's current setting for the\n fetch direction.",
                "modAndType": "int"
            },
            {
                "name": "getFetchSize()",
                "description": "Returns the fetch size for this RowSet object.",
                "modAndType": "int"
            },
            {
                "name": "getMaxFieldSize()",
                "description": "Retrieves the maximum number of bytes that can be used for a column\n value in this RowSet object.",
                "modAndType": "int"
            },
            {
                "name": "getMaxRows()",
                "description": "Retrieves the maximum number of rows that this RowSet object may contain.",
                "modAndType": "int"
            },
            {
                "name": "getParams()",
                "description": "Retrieves an array containing the parameter values (both Objects and\n primitives) that have been set for this\n RowSet object's command and throws an SQLException object\n if all parameters have not been set.",
                "modAndType": "Object[]"
            },
            {
                "name": "getPassword()",
                "description": "Returns the password used to create a database connection for this\n RowSet object.",
                "modAndType": "String"
            },
            {
                "name": "getQueryTimeout()",
                "description": "Retrieves the maximum number of seconds the driver will wait for a\n query to execute.",
                "modAndType": "int"
            },
            {
                "name": "getShowDeleted()",
                "description": "Retrieves a boolean indicating whether rows marked\n for deletion appear in the set of current rows.",
                "modAndType": "boolean"
            },
            {
                "name": "getTransactionIsolation()",
                "description": "Returns the transaction isolation property for this\n RowSet object's connection.",
                "modAndType": "int"
            },
            {
                "name": "getType()",
                "description": "Returns the type of this RowSet object.",
                "modAndType": "int"
            },
            {
                "name": "getTypeMap()",
                "description": "Retrieves the type map associated with the Connection\n object for this RowSet object.",
                "modAndType": "Map<String,Class<?>>"
            },
            {
                "name": "getUrl()",
                "description": "Retrieves the JDBC URL that this RowSet object's\n javax.sql.Reader object uses to make a connection\n with a relational database using a JDBC technology-enabled driver.",
                "modAndType": "String"
            },
            {
                "name": "getUsername()",
                "description": "Returns the user name used to create a database connection.",
                "modAndType": "String"
            },
            {
                "name": "initParams()",
                "description": "Performs the necessary internal configurations and initializations\n to allow any JDBC RowSet implementation to start using\n the standard facilities provided by a BaseRowSet\n instance.",
                "modAndType": "protected void"
            },
            {
                "name": "isReadOnly()",
                "description": "Returns a boolean indicating whether this\n RowSet object is read-only.",
                "modAndType": "boolean"
            },
            {
                "name": "notifyCursorMoved()",
                "description": "Notifies all of the listeners registered with this\n RowSet object that its cursor has moved.",
                "modAndType": "protected void"
            },
            {
                "name": "notifyRowChanged()",
                "description": "Notifies all of the listeners registered with this RowSet object that\n one of its rows has changed.",
                "modAndType": "protected void"
            },
            {
                "name": "notifyRowSetChanged()",
                "description": "Notifies all of the listeners registered with this RowSet\n object that its entire contents have changed.",
                "modAndType": "protected void"
            },
            {
                "name": "removeRowSetListener(RowSetListener listener)",
                "description": "Removes the designated object from this RowSet object's list of listeners.",
                "modAndType": "void"
            },
            {
                "name": "setArray(int parameterIndex,\n        Array array)",
                "description": "Sets the designated parameter to an Array object in the\n Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setAsciiStream(int parameterIndex,\n              InputStream x)",
                "description": "Sets the designated parameter in this RowSet object's command\n to the given input stream.",
                "modAndType": "void"
            },
            {
                "name": "setAsciiStream(int parameterIndex,\n              InputStream x,\n              int length)",
                "description": "Sets the designated parameter to the given\n java.io.InputStream object,\n which will have the specified number of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setAsciiStream(String parameterName,\n              InputStream x)",
                "description": "Sets the designated parameter to the given input stream.",
                "modAndType": "void"
            },
            {
                "name": "setAsciiStream(String parameterName,\n              InputStream x,\n              int length)",
                "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setBigDecimal(int parameterIndex,\n             BigDecimal x)",
                "description": "Sets the designated parameter to the given\n java.lang.BigDecimal value.",
                "modAndType": "void"
            },
            {
                "name": "setBigDecimal(String parameterName,\n             BigDecimal x)",
                "description": "Sets the designated parameter to the given\n java.math.BigDecimal value.",
                "modAndType": "void"
            },
            {
                "name": "setBinaryStream(int parameterIndex,\n               InputStream x)",
                "description": "Sets the designated parameter in this RowSet object's command\n to the given input stream.",
                "modAndType": "void"
            },
            {
                "name": "setBinaryStream(int parameterIndex,\n               InputStream x,\n               int length)",
                "description": "Sets the designated parameter to the given java.io.InputStream\n object, which will have the specified number of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setBinaryStream(String parameterName,\n               InputStream x)",
                "description": "Sets the designated parameter to the given input stream.",
                "modAndType": "void"
            },
            {
                "name": "setBinaryStream(String parameterName,\n               InputStream x,\n               int length)",
                "description": "Sets the designated parameter to the given input stream, which will have\n the specified number of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setBlob(int parameterIndex,\n       Blob x)",
                "description": "Sets the designated parameter to the given Blob object in\n the Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setBlob(int parameterIndex,\n       InputStream inputStream)",
                "description": "Sets the designated parameter to a InputStream object.",
                "modAndType": "void"
            },
            {
                "name": "setBlob(int parameterIndex,\n       InputStream inputStream,\n       long length)",
                "description": "Sets the designated parameter to a InputStream object.",
                "modAndType": "void"
            },
            {
                "name": "setBlob(String parameterName,\n       Blob x)",
                "description": "Sets the designated parameter to the given java.sql.Blob object.",
                "modAndType": "void"
            },
            {
                "name": "setBlob(String parameterName,\n       InputStream inputStream)",
                "description": "Sets the designated parameter to a InputStream object.",
                "modAndType": "void"
            },
            {
                "name": "setBlob(String parameterName,\n       InputStream inputStream,\n       long length)",
                "description": "Sets the designated parameter to a InputStream object.",
                "modAndType": "void"
            },
            {
                "name": "setBoolean(int parameterIndex,\n          boolean x)",
                "description": "Sets the designated parameter to the given boolean in the\n Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setBoolean(String parameterName,\n          boolean x)",
                "description": "Sets the designated parameter to the given Java boolean value.",
                "modAndType": "void"
            },
            {
                "name": "setByte(int parameterIndex,\n       byte x)",
                "description": "Sets the designated parameter to the given byte in the Java\n programming language.",
                "modAndType": "void"
            },
            {
                "name": "setByte(String parameterName,\n       byte x)",
                "description": "Sets the designated parameter to the given Java byte value.",
                "modAndType": "void"
            },
            {
                "name": "setBytes(int parameterIndex,\n        byte[] x)",
                "description": "Sets the designated parameter to the given array of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setBytes(String parameterName,\n        byte[] x)",
                "description": "Sets the designated parameter to the given Java array of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setCharacterStream(int parameterIndex,\n                  Reader reader)",
                "description": "Sets the designated parameter in this RowSet object's command\n to the given Reader\n object.",
                "modAndType": "void"
            },
            {
                "name": "setCharacterStream(int parameterIndex,\n                  Reader reader,\n                  int length)",
                "description": "Sets the designated parameter to the given java.io.Reader\n object, which will have the specified number of characters.",
                "modAndType": "void"
            },
            {
                "name": "setCharacterStream(String parameterName,\n                  Reader reader)",
                "description": "Sets the designated parameter to the given Reader\n object.",
                "modAndType": "void"
            },
            {
                "name": "setCharacterStream(String parameterName,\n                  Reader reader,\n                  int length)",
                "description": "Sets the designated parameter to the given Reader\n object, which is the given number of characters long.",
                "modAndType": "void"
            },
            {
                "name": "setClob(int parameterIndex,\n       Clob x)",
                "description": "Sets the designated parameter to the given Clob object in\n the Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setClob(int parameterIndex,\n       Reader reader)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setClob(int parameterIndex,\n       Reader reader,\n       long length)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setClob(String parameterName,\n       Clob x)",
                "description": "Sets the designated parameter to the given java.sql.Clob object.",
                "modAndType": "void"
            },
            {
                "name": "setClob(String parameterName,\n       Reader reader)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setClob(String parameterName,\n       Reader reader,\n       long length)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setCommand(String cmd)",
                "description": "Sets this RowSet object's command property to\n the given String object and clears the parameters, if any,\n that were set for the previous command.",
                "modAndType": "void"
            },
            {
                "name": "setConcurrency(int concurrency)",
                "description": "Sets the concurrency for this RowSet object to\n the specified concurrency.",
                "modAndType": "void"
            },
            {
                "name": "setDataSourceName(String name)",
                "description": "Sets the DataSource name property for this RowSet\n object to the given logical name and sets this RowSet object's\n Url property to null.",
                "modAndType": "void"
            },
            {
                "name": "setDate(int parameterIndex,\n       Date x)",
                "description": "Sets the designated parameter to the given java.sql.Date\n value.",
                "modAndType": "void"
            },
            {
                "name": "setDate(int parameterIndex,\n       Date x,\n       Calendar cal)",
                "description": "Sets the designated parameter to the given java.sql.Date\n object.",
                "modAndType": "void"
            },
            {
                "name": "setDate(String parameterName,\n       Date x)",
                "description": "Sets the designated parameter to the given java.sql.Date value\n using the default time zone of the virtual machine that is running\n the application.",
                "modAndType": "void"
            },
            {
                "name": "setDate(String parameterName,\n       Date x,\n       Calendar cal)",
                "description": "Sets the designated parameter to the given java.sql.Date value,\n using the given Calendar object.",
                "modAndType": "void"
            },
            {
                "name": "setDouble(int parameterIndex,\n         double x)",
                "description": "Sets the designated parameter to the given double in the\n Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setDouble(String parameterName,\n         double x)",
                "description": "Sets the designated parameter to the given Java double value.",
                "modAndType": "void"
            },
            {
                "name": "setEscapeProcessing(boolean enable)",
                "description": "Sets to the given boolean whether or not the driver will\n scan for escape syntax and do escape substitution before sending SQL\n statements to the database.",
                "modAndType": "void"
            },
            {
                "name": "setFetchDirection(int direction)",
                "description": "Gives the driver a performance hint as to the direction in\n which the rows in this RowSet object will be\n processed.",
                "modAndType": "void"
            },
            {
                "name": "setFetchSize(int rows)",
                "description": "Sets the fetch size for this RowSet object to the given number of\n rows.",
                "modAndType": "void"
            },
            {
                "name": "setFloat(int parameterIndex,\n        float x)",
                "description": "Sets the designated parameter to the given float in the\n Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setFloat(String parameterName,\n        float x)",
                "description": "Sets the designated parameter to the given Java float value.",
                "modAndType": "void"
            },
            {
                "name": "setInt(int parameterIndex,\n      int x)",
                "description": "Sets the designated parameter to an int in the Java\n programming language.",
                "modAndType": "void"
            },
            {
                "name": "setInt(String parameterName,\n      int x)",
                "description": "Sets the designated parameter to the given Java int value.",
                "modAndType": "void"
            },
            {
                "name": "setLong(int parameterIndex,\n       long x)",
                "description": "Sets the designated parameter to the given long in the Java\n programming language.",
                "modAndType": "void"
            },
            {
                "name": "setLong(String parameterName,\n       long x)",
                "description": "Sets the designated parameter to the given Java long value.",
                "modAndType": "void"
            },
            {
                "name": "setMaxFieldSize(int max)",
                "description": "Sets the maximum number of bytes that can be used for a column\n value in this RowSet object to the given number.",
                "modAndType": "void"
            },
            {
                "name": "setMaxRows(int max)",
                "description": "Sets the maximum number of rows that this RowSet object may contain to\n the given number.",
                "modAndType": "void"
            },
            {
                "name": "setNCharacterStream(int parameterIndex,\n                   Reader value)",
                "description": "Sets the designated parameter in this RowSet object's command\n to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNCharacterStream(int parameterIndex,\n                   Reader value,\n                   long length)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNCharacterStream(String parameterName,\n                   Reader value)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNCharacterStream(String parameterName,\n                   Reader value,\n                   long length)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNClob(int parameterIndex,\n        NClob value)",
                "description": "Sets the designated parameter to a java.sql.NClob object.",
                "modAndType": "void"
            },
            {
                "name": "setNClob(int parameterIndex,\n        Reader reader)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNClob(int parameterIndex,\n        Reader reader,\n        long length)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNClob(String parameterName,\n        NClob value)",
                "description": "Sets the designated parameter to a java.sql.NClob object.",
                "modAndType": "void"
            },
            {
                "name": "setNClob(String parameterName,\n        Reader reader)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNClob(String parameterName,\n        Reader reader,\n        long length)",
                "description": "Sets the designated parameter to a Reader object.",
                "modAndType": "void"
            },
            {
                "name": "setNString(int parameterIndex,\n          String value)",
                "description": "Sets the designated parameter to the given String object.",
                "modAndType": "void"
            },
            {
                "name": "setNString(String parameterName,\n          String value)",
                "description": "Sets the designated parameter to the given String object.",
                "modAndType": "void"
            },
            {
                "name": "setNull(int parameterIndex,\n       int sqlType)",
                "description": "Sets the designated parameter to SQL NULL.",
                "modAndType": "void"
            },
            {
                "name": "setNull(int parameterIndex,\n       int sqlType,\n       String typeName)",
                "description": "Sets the designated parameter to SQL NULL.",
                "modAndType": "void"
            },
            {
                "name": "setNull(String parameterName,\n       int sqlType)",
                "description": "Sets the designated parameter to SQL NULL.",
                "modAndType": "void"
            },
            {
                "name": "setNull(String parameterName,\n       int sqlType,\n       String typeName)",
                "description": "Sets the designated parameter to SQL NULL.",
                "modAndType": "void"
            },
            {
                "name": "setObject(int parameterIndex,\n         Object x)",
                "description": "Sets the designated parameter to an Object in the Java\n programming language.",
                "modAndType": "void"
            },
            {
                "name": "setObject(int parameterIndex,\n         Object x,\n         int targetSqlType)",
                "description": "Sets the value of the designated parameter with the given\n Object value.",
                "modAndType": "void"
            },
            {
                "name": "setObject(int parameterIndex,\n         Object x,\n         int targetSqlType,\n         int scale)",
                "description": "Sets the designated parameter to an Object in the Java\n programming language.",
                "modAndType": "void"
            },
            {
                "name": "setObject(String parameterName,\n         Object x)",
                "description": "Sets the value of the designated parameter with the given object.",
                "modAndType": "void"
            },
            {
                "name": "setObject(String parameterName,\n         Object x,\n         int targetSqlType)",
                "description": "Sets the value of the designated parameter with the given object.",
                "modAndType": "void"
            },
            {
                "name": "setObject(String parameterName,\n         Object x,\n         int targetSqlType,\n         int scale)",
                "description": "Sets the value of the designated parameter with the given object.",
                "modAndType": "void"
            },
            {
                "name": "setPassword(String pass)",
                "description": "Sets the password used to create a database connection for this\n RowSet object to the given String\n object.",
                "modAndType": "void"
            },
            {
                "name": "setQueryTimeout(int seconds)",
                "description": "Sets to the given number the maximum number of seconds the driver will\n wait for a query to execute.",
                "modAndType": "void"
            },
            {
                "name": "setReadOnly(boolean value)",
                "description": "Sets this RowSet object's readOnly  property to the given boolean.",
                "modAndType": "void"
            },
            {
                "name": "setRef(int parameterIndex,\n      Ref ref)",
                "description": "Sets the designated parameter to the given Ref object in\n the Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setRowId(int parameterIndex,\n        RowId x)",
                "description": "Sets the designated parameter to the given java.sql.RowId object.",
                "modAndType": "void"
            },
            {
                "name": "setRowId(String parameterName,\n        RowId x)",
                "description": "Sets the designated parameter to the given java.sql.RowId object.",
                "modAndType": "void"
            },
            {
                "name": "setShort(int parameterIndex,\n        short x)",
                "description": "Sets the designated parameter to the given short in the\n Java programming language.",
                "modAndType": "void"
            },
            {
                "name": "setShort(String parameterName,\n        short x)",
                "description": "Sets the designated parameter to the given Java short value.",
                "modAndType": "void"
            },
            {
                "name": "setShowDeleted(boolean value)",
                "description": "Sets the property showDeleted to the given\n boolean value, which determines whether\n rows marked for deletion appear in the set of current rows.",
                "modAndType": "void"
            },
            {
                "name": "setSQLXML(int parameterIndex,\n         SQLXML xmlObject)",
                "description": "Sets the designated parameter to the given java.sql.SQLXML object.",
                "modAndType": "void"
            },
            {
                "name": "setSQLXML(String parameterName,\n         SQLXML xmlObject)",
                "description": "Sets the designated parameter to the given java.sql.SQLXML object.",
                "modAndType": "void"
            },
            {
                "name": "setString(int parameterIndex,\n         String x)",
                "description": "Sets the designated parameter to the given String\n value.",
                "modAndType": "void"
            },
            {
                "name": "setString(String parameterName,\n         String x)",
                "description": "Sets the designated parameter to the given Java String value.",
                "modAndType": "void"
            },
            {
                "name": "setTime(int parameterIndex,\n       Time x)",
                "description": "Sets the designated parameter to the given java.sql.Time\n value.",
                "modAndType": "void"
            },
            {
                "name": "setTime(int parameterIndex,\n       Time x,\n       Calendar cal)",
                "description": "Sets the designated parameter to the given java.sql.Time\n object.",
                "modAndType": "void"
            },
            {
                "name": "setTime(String parameterName,\n       Time x)",
                "description": "Sets the designated parameter to the given java.sql.Time value.",
                "modAndType": "void"
            },
            {
                "name": "setTime(String parameterName,\n       Time x,\n       Calendar cal)",
                "description": "Sets the designated parameter to the given java.sql.Time value,\n using the given Calendar object.",
                "modAndType": "void"
            },
            {
                "name": "setTimestamp(int parameterIndex,\n            Timestamp x)",
                "description": "Sets the designated parameter to the given\n java.sql.Timestamp value.",
                "modAndType": "void"
            },
            {
                "name": "setTimestamp(int parameterIndex,\n            Timestamp x,\n            Calendar cal)",
                "description": "Sets the designated parameter to the given\n java.sql.Timestamp object.",
                "modAndType": "void"
            },
            {
                "name": "setTimestamp(String parameterName,\n            Timestamp x)",
                "description": "Sets the designated parameter to the given java.sql.Timestamp value.",
                "modAndType": "void"
            },
            {
                "name": "setTimestamp(String parameterName,\n            Timestamp x,\n            Calendar cal)",
                "description": "Sets the designated parameter to the given java.sql.Timestamp value,\n using the given Calendar object.",
                "modAndType": "void"
            },
            {
                "name": "setTransactionIsolation(int level)",
                "description": "Sets the transaction isolation property for this JDBC RowSet object to the given\n constant.",
                "modAndType": "void"
            },
            {
                "name": "setType(int type)",
                "description": "Sets the type for this RowSet object to the specified type.",
                "modAndType": "void"
            },
            {
                "name": "setTypeMap(Map<String,Class<?>> map)",
                "description": "Installs the given java.util.Map object as the type map\n associated with the Connection object for this\n RowSet object.",
                "modAndType": "void"
            },
            {
                "name": "setUnicodeStream(int parameterIndex,\n                InputStream x,\n                int length)",
                "description": "Deprecated. \ngetCharacterStream should be used in its place\n",
                "modAndType": "void"
            },
            {
                "name": "setURL(int parameterIndex,\n      URL x)",
                "description": "Sets the designated parameter to the given java.net.URL value.",
                "modAndType": "void"
            },
            {
                "name": "setUrl(String url)",
                "description": "Sets the Url property for this RowSet object\n to the given String object and sets the dataSource name\n property to null.",
                "modAndType": "void"
            },
            {
                "name": "setUsername(String name)",
                "description": "Sets the username property for this RowSet object\n to the given user name.",
                "modAndType": "void"
            }
        ],
        "href": "javax/sql/rowset/BaseRowSet.html"
    },
    {
        "name": "BaseStream",
        "constructors": [],
        "methods": [
            {
                "name": "close()",
                "description": "Closes this stream, causing all close handlers for this stream pipeline\n to be called.",
                "modAndType": "void"
            },
            {
                "name": "isParallel()",
                "description": "Returns whether this stream, if a terminal operation were to be executed,\n would execute in parallel.",
                "modAndType": "boolean"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator for the elements of this stream.",
                "modAndType": "Iterator<T>"
            },
            {
                "name": "onClose(Runnable closeHandler)",
                "description": "Returns an equivalent stream with an additional close handler.",
                "modAndType": "S"
            },
            {
                "name": "parallel()",
                "description": "Returns an equivalent stream that is parallel.",
                "modAndType": "S"
            },
            {
                "name": "sequential()",
                "description": "Returns an equivalent stream that is sequential.",
                "modAndType": "S"
            },
            {
                "name": "spliterator()",
                "description": "Returns a spliterator for the elements of this stream.",
                "modAndType": "Spliterator<T>"
            },
            {
                "name": "unordered()",
                "description": "Returns an equivalent stream that is\n unordered.",
                "modAndType": "S"
            }
        ],
        "href": "java/util/stream/BaseStream.html"
    },
    {
        "name": "BasicArrowButton",
        "constructors": [
            {
                "name": "BasicArrowButton(int direction)",
                "description": "Creates a BasicArrowButton whose arrow\n is drawn in the specified direction."
            },
            {
                "name": "BasicArrowButton(int direction,\n                Color background,\n                Color shadow,\n                Color darkShadow,\n                Color highlight)",
                "description": "Creates a BasicArrowButton whose arrow\n is drawn in the specified direction and with the specified\n colors."
            }
        ],
        "methods": [
            {
                "name": "getDirection()",
                "description": "Returns the direction of the arrow.",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSize()",
                "description": "Returns the maximum size of the BasicArrowButton.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize()",
                "description": "Returns the minimum size of the BasicArrowButton.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize()",
                "description": "Returns the preferred size of the BasicArrowButton.",
                "modAndType": "Dimension"
            },
            {
                "name": "isFocusTraversable()",
                "description": "Returns whether the arrow button should get the focus.",
                "modAndType": "boolean"
            },
            {
                "name": "paint(Graphics g)",
                "description": "Invoked by Swing to draw components.",
                "modAndType": "void"
            },
            {
                "name": "paintTriangle(Graphics g,\n             int x,\n             int y,\n             int size,\n             int direction,\n             boolean isEnabled)",
                "description": "Paints a triangle.",
                "modAndType": "void"
            },
            {
                "name": "setDirection(int direction)",
                "description": "Sets the direction of the arrow.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicArrowButton.html"
    },
    {
        "name": "BasicAttribute",
        "constructors": [
            {
                "name": "BasicAttribute(String id)",
                "description": "Constructs a new instance of an unordered attribute with no value."
            },
            {
                "name": "BasicAttribute(String id,\n              boolean ordered)",
                "description": "Constructs a new instance of a possibly ordered attribute with no value."
            },
            {
                "name": "BasicAttribute(String id,\n              Object value)",
                "description": "Constructs a new instance of an unordered attribute with a single value."
            },
            {
                "name": "BasicAttribute(String id,\n              Object value,\n              boolean ordered)",
                "description": "Constructs a new instance of a possibly ordered attribute with a\n single value."
            }
        ],
        "methods": [
            {
                "name": "add(int ix,\n   Object attrVal)",
                "description": "Adds an attribute value to the ordered list of attribute values.",
                "modAndType": "void"
            },
            {
                "name": "add(Object attrVal)",
                "description": "Adds a new value to this attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "clear()",
                "description": "Removes all values from this attribute.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Creates and returns a copy of this object.",
                "modAndType": "Object"
            },
            {
                "name": "contains(Object attrVal)",
                "description": "Determines whether a value is in this attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "equals(Object obj)",
                "description": "Determines whether obj is equal to this attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "get()",
                "description": "Retrieves one of this attribute's values.",
                "modAndType": "Object"
            },
            {
                "name": "get(int ix)",
                "description": "Retrieves the attribute value from the ordered list of attribute values.",
                "modAndType": "Object"
            },
            {
                "name": "getAll()",
                "description": "Retrieves an enumeration of this attribute's values.",
                "modAndType": "NamingEnumeration<?>"
            },
            {
                "name": "getAttributeDefinition()",
                "description": "Retrieves this attribute's schema definition.",
                "modAndType": "DirContext"
            },
            {
                "name": "getAttributeSyntaxDefinition()",
                "description": "Retrieves the syntax definition associated with this attribute.",
                "modAndType": "DirContext"
            },
            {
                "name": "getID()",
                "description": "Retrieves the id of this attribute.",
                "modAndType": "String"
            },
            {
                "name": "hashCode()",
                "description": "Calculates the hash code of this attribute.",
                "modAndType": "int"
            },
            {
                "name": "isOrdered()",
                "description": "Determines whether this attribute's values are ordered.",
                "modAndType": "boolean"
            },
            {
                "name": "remove(int ix)",
                "description": "Removes an attribute value from the ordered list of attribute values.",
                "modAndType": "Object"
            },
            {
                "name": "remove(Object attrval)",
                "description": "Removes a specified value from this attribute.",
                "modAndType": "boolean"
            },
            {
                "name": "set(int ix,\n   Object attrVal)",
                "description": "Sets an attribute value in the ordered list of attribute values.",
                "modAndType": "Object"
            },
            {
                "name": "size()",
                "description": "Retrieves the number of values in this attribute.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Generates the string representation of this attribute.",
                "modAndType": "String"
            }
        ],
        "href": "javax/naming/directory/BasicAttribute.html"
    },
    {
        "name": "BasicAttributes",
        "constructors": [
            {
                "name": "BasicAttributes()",
                "description": "Constructs a new instance of Attributes."
            },
            {
                "name": "BasicAttributes(boolean ignoreCase)",
                "description": "Constructs a new instance of Attributes."
            },
            {
                "name": "BasicAttributes(String attrID,\n               Object val)",
                "description": "Constructs a new instance of Attributes with one attribute."
            },
            {
                "name": "BasicAttributes(String attrID,\n               Object val,\n               boolean ignoreCase)",
                "description": "Constructs a new instance of Attributes with one attribute."
            }
        ],
        "methods": [
            {
                "name": "clone()",
                "description": "Creates and returns a copy of this object.",
                "modAndType": "Object"
            },
            {
                "name": "equals(Object obj)",
                "description": "Determines whether this BasicAttributes is equal to another\n Attributes\n Two Attributes are equal if they are both instances of\n Attributes,\n treat the case of attribute IDs the same way, and contain the\n same attributes.",
                "modAndType": "boolean"
            },
            {
                "name": "get(String attrID)",
                "description": "Retrieves the attribute with the given attribute id from the\n attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "getAll()",
                "description": "Retrieves an enumeration of the attributes in the attribute set.",
                "modAndType": "NamingEnumeration<Attribute>"
            },
            {
                "name": "getIDs()",
                "description": "Retrieves an enumeration of the ids of the attributes in the\n attribute set.",
                "modAndType": "NamingEnumeration<String>"
            },
            {
                "name": "hashCode()",
                "description": "Calculates the hash code of this BasicAttributes.",
                "modAndType": "int"
            },
            {
                "name": "isCaseIgnored()",
                "description": "Determines whether the attribute set ignores the case of\n attribute identifiers when retrieving or adding attributes.",
                "modAndType": "boolean"
            },
            {
                "name": "put(Attribute attr)",
                "description": "Adds a new attribute to the attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "put(String attrID,\n   Object val)",
                "description": "Adds a new attribute to the attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "remove(String attrID)",
                "description": "Removes the attribute with the attribute id 'attrID' from\n the attribute set.",
                "modAndType": "Attribute"
            },
            {
                "name": "size()",
                "description": "Retrieves the number of attributes in the attribute set.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Generates the string representation of this attribute set.",
                "modAndType": "String"
            }
        ],
        "href": "javax/naming/directory/BasicAttributes.html"
    },
    {
        "name": "BasicBorders",
        "constructors": [
            {
                "name": "BasicBorders()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getButtonBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getInternalFrameBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getMenuBarBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getProgressBarBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getRadioButtonBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getSplitPaneBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getSplitPaneDividerBorder()",
                "description": "Returns a border instance for a JSplitPane divider",
                "modAndType": "static Border"
            },
            {
                "name": "getTextFieldBorder()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getToggleButtonBorder()",
                "description": "",
                "modAndType": "static Border"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.html"
    },
    {
        "name": "BasicBorders.ButtonBorder",
        "constructors": [
            {
                "name": "ButtonBorder(Color shadow,\n            Color darkShadow,\n            Color highlight,\n            Color lightHighlight)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.ButtonBorder.html"
    },
    {
        "name": "BasicBorders.FieldBorder",
        "constructors": [
            {
                "name": "FieldBorder(Color shadow,\n           Color darkShadow,\n           Color highlight,\n           Color lightHighlight)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.FieldBorder.html"
    },
    {
        "name": "BasicBorders.MarginBorder",
        "constructors": [
            {
                "name": "MarginBorder()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.MarginBorder.html"
    },
    {
        "name": "BasicBorders.MenuBarBorder",
        "constructors": [
            {
                "name": "MenuBarBorder(Color shadow,\n             Color highlight)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.MenuBarBorder.html"
    },
    {
        "name": "BasicBorders.RadioButtonBorder",
        "constructors": [
            {
                "name": "RadioButtonBorder(Color shadow,\n                 Color darkShadow,\n                 Color highlight,\n                 Color lightHighlight)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.RadioButtonBorder.html"
    },
    {
        "name": "BasicBorders.RolloverButtonBorder",
        "constructors": [
            {
                "name": "RolloverButtonBorder(Color shadow,\n                    Color darkShadow,\n                    Color highlight,\n                    Color lightHighlight)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int w,\n           int h)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.RolloverButtonBorder.html"
    },
    {
        "name": "BasicBorders.SplitPaneBorder",
        "constructors": [
            {
                "name": "SplitPaneBorder(Color highlight,\n               Color shadow)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c)",
                "description": "Returns the insets of the border.",
                "modAndType": "Insets"
            },
            {
                "name": "isBorderOpaque()",
                "description": "Returns whether or not the border is opaque.",
                "modAndType": "boolean"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "Paints the border for the specified component with the specified\n position and size.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.SplitPaneBorder.html"
    },
    {
        "name": "BasicBorders.ToggleButtonBorder",
        "constructors": [
            {
                "name": "ToggleButtonBorder(Color shadow,\n                  Color darkShadow,\n                  Color highlight,\n                  Color lightHighlight)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitializes the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "This default implementation does no painting.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicBorders.ToggleButtonBorder.html"
    },
    {
        "name": "BasicButtonListener",
        "constructors": [
            {
                "name": "BasicButtonListener(AbstractButton b)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "checkOpacity(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "focusGained(FocusEvent e)",
                "description": "Invoked when a component gains the keyboard focus.",
                "modAndType": "void"
            },
            {
                "name": "focusLost(FocusEvent e)",
                "description": "Invoked when a component loses the keyboard focus.",
                "modAndType": "void"
            },
            {
                "name": "installKeyboardActions(JComponent c)",
                "description": "Register default key actions: pressing space to \"click\" a\n button and registring the keyboard mnemonic (if any).",
                "modAndType": "void"
            },
            {
                "name": "mouseClicked(MouseEvent e)",
                "description": "Invoked when the mouse button has been clicked (pressed\n and released) on a component.",
                "modAndType": "void"
            },
            {
                "name": "mouseDragged(MouseEvent e)",
                "description": "Invoked when a mouse button is pressed on a component and then\n dragged.",
                "modAndType": "void"
            },
            {
                "name": "mouseEntered(MouseEvent e)",
                "description": "Invoked when the mouse enters a component.",
                "modAndType": "void"
            },
            {
                "name": "mouseExited(MouseEvent e)",
                "description": "Invoked when the mouse exits a component.",
                "modAndType": "void"
            },
            {
                "name": "mouseMoved(MouseEvent e)",
                "description": "Invoked when the mouse cursor has been moved onto a component\n but no buttons have been pushed.",
                "modAndType": "void"
            },
            {
                "name": "mousePressed(MouseEvent e)",
                "description": "Invoked when a mouse button has been pressed on a component.",
                "modAndType": "void"
            },
            {
                "name": "mouseReleased(MouseEvent e)",
                "description": "Invoked when a mouse button has been released on a component.",
                "modAndType": "void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent e)",
                "description": "This method gets called when a bound property is changed.",
                "modAndType": "void"
            },
            {
                "name": "stateChanged(ChangeEvent e)",
                "description": "Invoked when the target of the listener has changed its state.",
                "modAndType": "void"
            },
            {
                "name": "uninstallKeyboardActions(JComponent c)",
                "description": "Unregister's default key actions",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicButtonListener.html"
    },
    {
        "name": "BasicButtonUI",
        "constructors": [
            {
                "name": "BasicButtonUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "clearTextShiftOffset()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createButtonListener(AbstractButton b)",
                "description": "",
                "modAndType": "protected BasicButtonListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getDefaultTextIconGap(AbstractButton b)",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "getTextShiftOffset()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "installDefaults(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintButtonPressed(Graphics g,\n                  AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintFocus(Graphics g,\n          AbstractButton b,\n          Rectangle viewRect,\n          Rectangle textRect,\n          Rectangle iconRect)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintIcon(Graphics g,\n         JComponent c,\n         Rectangle iconRect)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintText(Graphics g,\n         AbstractButton b,\n         Rectangle textRect,\n         String text)",
                "description": "Method which renders the text of the current button.",
                "modAndType": "protected void"
            },
            {
                "name": "paintText(Graphics g,\n         JComponent c,\n         Rectangle textRect,\n         String text)",
                "description": "As of Java 2 platform v 1.4 this method should not be used or overriden.",
                "modAndType": "protected void"
            },
            {
                "name": "setTextShiftOffset()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicButtonUI.html"
    },
    {
        "name": "BasicCheckBoxMenuItemUI",
        "constructors": [
            {
                "name": "BasicCheckBoxMenuItemUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "processMouseEvent(JMenuItem item,\n                 MouseEvent e,\n                 MenuElement[] path,\n                 MenuSelectionManager manager)",
                "description": "",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicCheckBoxMenuItemUI.html"
    },
    {
        "name": "BasicCheckBoxUI",
        "constructors": [
            {
                "name": "BasicCheckBoxUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent b)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "String"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicCheckBoxUI.html"
    },
    {
        "name": "BasicColorChooserUI",
        "constructors": [
            {
                "name": "BasicColorChooserUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createDefaultChoosers()",
                "description": "",
                "modAndType": "protected AbstractColorChooserPanel[]"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installPreviewPanel()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaultChoosers()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallPreviewPanel()",
                "description": "Removes installed preview panel from the UI delegate.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicColorChooserUI.html"
    },
    {
        "name": "BasicComboBoxEditor",
        "constructors": [
            {
                "name": "BasicComboBoxEditor()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addActionListener(ActionListener l)",
                "description": "Add an ActionListener.",
                "modAndType": "void"
            },
            {
                "name": "createEditorComponent()",
                "description": "Creates the internal editor component.",
                "modAndType": "protected JTextField"
            },
            {
                "name": "focusGained(FocusEvent e)",
                "description": "Invoked when a component gains the keyboard focus.",
                "modAndType": "void"
            },
            {
                "name": "focusLost(FocusEvent e)",
                "description": "Invoked when a component loses the keyboard focus.",
                "modAndType": "void"
            },
            {
                "name": "getEditorComponent()",
                "description": "Return the component that should be added to the tree hierarchy for\n this editor",
                "modAndType": "Component"
            },
            {
                "name": "getItem()",
                "description": "Return the edited item",
                "modAndType": "Object"
            },
            {
                "name": "removeActionListener(ActionListener l)",
                "description": "Remove an ActionListener",
                "modAndType": "void"
            },
            {
                "name": "selectAll()",
                "description": "Ask the editor to start editing and to select everything",
                "modAndType": "void"
            },
            {
                "name": "setItem(Object anObject)",
                "description": "Sets the item that should be edited.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicComboBoxEditor.html"
    },
    {
        "name": "BasicComboBoxEditor.UIResource",
        "constructors": [
            {
                "name": "UIResource()",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/basic/BasicComboBoxEditor.UIResource.html"
    },
    {
        "name": "BasicComboBoxRenderer",
        "constructors": [
            {
                "name": "BasicComboBoxRenderer()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getListCellRendererComponent(JList list,\n                            Object value,\n                            int index,\n                            boolean isSelected,\n                            boolean cellHasFocus)",
                "description": "Return a component that has been configured to display the specified\n value.",
                "modAndType": "Component"
            },
            {
                "name": "getPreferredSize()",
                "description": "If the preferredSize has been set to a\n non-null value just returns it.",
                "modAndType": "Dimension"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicComboBoxRenderer.html"
    },
    {
        "name": "BasicComboBoxRenderer.UIResource",
        "constructors": [
            {
                "name": "UIResource()",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/basic/BasicComboBoxRenderer.UIResource.html"
    },
    {
        "name": "BasicComboBoxUI",
        "constructors": [
            {
                "name": "BasicComboBoxUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addEditor()",
                "description": "This public method is implementation specific and should be private.",
                "modAndType": "void"
            },
            {
                "name": "configureArrowButton()",
                "description": "This public method is implementation specific and should be private.",
                "modAndType": "void"
            },
            {
                "name": "configureEditor()",
                "description": "This protected method is implementation specific and should be private.",
                "modAndType": "protected void"
            },
            {
                "name": "createArrowButton()",
                "description": "Creates a button which will be used as the control to show or hide\n the popup portion of the combo box.",
                "modAndType": "protected JButton"
            },
            {
                "name": "createEditor()",
                "description": "Creates the default editor that will be used in editable combo boxes.",
                "modAndType": "protected ComboBoxEditor"
            },
            {
                "name": "createFocusListener()",
                "description": "Creates a FocusListener which will be added to the combo box.",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createItemListener()",
                "description": "Creates an ItemListener which will be added to the\n combo box.",
                "modAndType": "protected ItemListener"
            },
            {
                "name": "createKeyListener()",
                "description": "Creates a KeyListener which will be added to the\n combo box.",
                "modAndType": "protected KeyListener"
            },
            {
                "name": "createLayoutManager()",
                "description": "Creates a layout manager for managing the components which make up the\n combo box.",
                "modAndType": "protected LayoutManager"
            },
            {
                "name": "createListDataListener()",
                "description": "Creates a list data listener which will be added to the\n ComboBoxModel.",
                "modAndType": "protected ListDataListener"
            },
            {
                "name": "createPopup()",
                "description": "Creates the popup portion of the combo box.",
                "modAndType": "protected ComboPopup"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates a PropertyChangeListener which will be added to\n the combo box.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createRenderer()",
                "description": "Creates the default renderer that will be used in a non-editiable combo\n box.",
                "modAndType": "protected ListCellRenderer"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getAccessibleChild(JComponent c,\n                  int i)",
                "description": "Returns the ith Accessible child of the object.",
                "modAndType": "Accessible"
            },
            {
                "name": "getAccessibleChildrenCount(JComponent c)",
                "description": "Returns the number of accessible children in the object.",
                "modAndType": "int"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getDefaultSize()",
                "description": "Return the default size of an empty display area of the combo box using\n the current renderer and font.",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getDisplaySize()",
                "description": "Returns the calculated size of the display area.",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getInsets()",
                "description": "Gets the insets from the JComboBox.",
                "modAndType": "protected Insets"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "The minimum size is the size of the display area plus insets plus the button.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getSizeForComponent(Component comp)",
                "description": "Returns the size a component would have if used as a cell renderer.",
                "modAndType": "protected Dimension"
            },
            {
                "name": "installComponents()",
                "description": "Creates and initializes the components which make up the\n aggregate combo box.",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "Installs the default colors, default font, default renderer, and default\n editor into the JComboBox.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "Adds keyboard actions to the JComboBox.",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Creates and installs listeners for the combo box and its model.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isFocusTraversable(JComboBox c)",
                "description": "Determines if the JComboBox is focus traversable.",
                "modAndType": "boolean"
            },
            {
                "name": "isNavigationKey(int keyCode)",
                "description": "Returns whether or not the supplied keyCode maps to a key that is used for\n navigation.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isPopupVisible(JComboBox c)",
                "description": "Tells if the popup is visible or not.",
                "modAndType": "boolean"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintCurrentValue(Graphics g,\n                 Rectangle bounds,\n                 boolean hasFocus)",
                "description": "Paints the currently selected item.",
                "modAndType": "void"
            },
            {
                "name": "paintCurrentValueBackground(Graphics g,\n                           Rectangle bounds,\n                           boolean hasFocus)",
                "description": "Paints the background of the currently selected item.",
                "modAndType": "void"
            },
            {
                "name": "rectangleForCurrentValue()",
                "description": "Returns the area that is reserved for drawing the currently selected item.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "removeEditor()",
                "description": "This public method is implementation specific and should be private.",
                "modAndType": "void"
            },
            {
                "name": "selectNextPossibleValue()",
                "description": "Selects the next item in the list.",
                "modAndType": "protected void"
            },
            {
                "name": "selectPreviousPossibleValue()",
                "description": "Selects the previous item in the list.",
                "modAndType": "protected void"
            },
            {
                "name": "setPopupVisible(JComboBox c,\n               boolean v)",
                "description": "Hides the popup.",
                "modAndType": "void"
            },
            {
                "name": "toggleOpenClose()",
                "description": "Hides the popup if it is showing and shows the popup if it is hidden.",
                "modAndType": "protected void"
            },
            {
                "name": "unconfigureArrowButton()",
                "description": "This public method is implementation specific and should be private.",
                "modAndType": "void"
            },
            {
                "name": "unconfigureEditor()",
                "description": "This protected method is implementation specific and should be private.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallComponents()",
                "description": "The aggregate components which comprise the combo box are\n unregistered and uninitialized.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "Uninstalls the default colors, default font, default renderer,\n and default editor from the combo box.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "Removes the focus InputMap and ActionMap.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Removes the installed listeners from the combo box and its model.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicComboBoxUI.html"
    },
    {
        "name": "BasicComboPopup",
        "constructors": [
            {
                "name": "BasicComboPopup(JComboBox combo)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "autoScrollDown()",
                "description": "This protected method is implementation specific and should be private.",
                "modAndType": "protected void"
            },
            {
                "name": "autoScrollUp()",
                "description": "This protected method is implementation specific and should be private.",
                "modAndType": "protected void"
            },
            {
                "name": "computePopupBounds(int px,\n                  int py,\n                  int pw,\n                  int ph)",
                "description": "Calculate the placement and size of the popup portion of the combo box based\n on the combo box location and the enclosing screen bounds.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "configureList()",
                "description": "Configures the list which is used to hold the combo box items in the\n popup.",
                "modAndType": "protected void"
            },
            {
                "name": "configurePopup()",
                "description": "Configures the popup portion of the combo box.",
                "modAndType": "protected void"
            },
            {
                "name": "configureScroller()",
                "description": "Configures the scrollable portion which holds the list within\n the combo box popup.",
                "modAndType": "protected void"
            },
            {
                "name": "convertMouseEvent(MouseEvent e)",
                "description": "",
                "modAndType": "protected MouseEvent"
            },
            {
                "name": "createItemListener()",
                "description": "Creates an ItemListener which will be added to the\n combo box.",
                "modAndType": "protected ItemListener"
            },
            {
                "name": "createKeyListener()",
                "description": "Creates the key listener that will be added to the combo box.",
                "modAndType": "protected KeyListener"
            },
            {
                "name": "createList()",
                "description": "Creates the JList used in the popup to display\n the items in the combo box model.",
                "modAndType": "protected JList"
            },
            {
                "name": "createListDataListener()",
                "description": "Creates a list data listener which will be added to the\n ComboBoxModel.",
                "modAndType": "protected ListDataListener"
            },
            {
                "name": "createListMouseListener()",
                "description": "Creates a mouse listener that watches for mouse events in\n the popup's list.",
                "modAndType": "protected MouseListener"
            },
            {
                "name": "createListMouseMotionListener()",
                "description": "Creates a mouse motion listener that watches for mouse motion\n events in the popup's list.",
                "modAndType": "protected MouseMotionListener"
            },
            {
                "name": "createListSelectionListener()",
                "description": "Creates a list selection listener that watches for selection changes in\n the popup's list.",
                "modAndType": "protected ListSelectionListener"
            },
            {
                "name": "createMouseListener()",
                "description": "Creates a listener\n that will watch for mouse-press and release events on the combo box.",
                "modAndType": "protected MouseListener"
            },
            {
                "name": "createMouseMotionListener()",
                "description": "Creates the mouse motion listener which will be added to the combo\n box.",
                "modAndType": "protected MouseMotionListener"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates a PropertyChangeListener which will be added to\n the combo box.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createScroller()",
                "description": "Creates the scroll pane which houses the scrollable list.",
                "modAndType": "protected JScrollPane"
            },
            {
                "name": "delegateFocus(MouseEvent e)",
                "description": "This is is a utility method that helps event handlers figure out where to\n send the focus when the popup is brought up.",
                "modAndType": "protected void"
            },
            {
                "name": "firePopupMenuCanceled()",
                "description": "Notifies PopupMenuListeners that this popup menu is\n cancelled.",
                "modAndType": "protected void"
            },
            {
                "name": "firePopupMenuWillBecomeInvisible()",
                "description": "Notifies PopupMenuListeners that this popup menu will\n become invisible.",
                "modAndType": "protected void"
            },
            {
                "name": "firePopupMenuWillBecomeVisible()",
                "description": "Notifies PopupMenuListeners that this popup menu will\n become visible.",
                "modAndType": "protected void"
            },
            {
                "name": "getAccessibleContext()",
                "description": "Gets the AccessibleContext associated with this BasicComboPopup.",
                "modAndType": "AccessibleContext"
            },
            {
                "name": "getKeyListener()",
                "description": "Implementation of ComboPopup.getKeyListener().",
                "modAndType": "KeyListener"
            },
            {
                "name": "getList()",
                "description": "Implementation of ComboPopup.getList().",
                "modAndType": "JList"
            },
            {
                "name": "getMouseListener()",
                "description": "Implementation of ComboPopup.getMouseListener().",
                "modAndType": "MouseListener"
            },
            {
                "name": "getMouseMotionListener()",
                "description": "Implementation of ComboPopup.getMouseMotionListener().",
                "modAndType": "MouseMotionListener"
            },
            {
                "name": "getPopupHeightForRowCount(int maxRowCount)",
                "description": "Retrieves the height of the popup based on the current\n ListCellRenderer and the maximum row count.",
                "modAndType": "protected int"
            },
            {
                "name": "hide()",
                "description": "Implementation of ComboPopup.hide().",
                "modAndType": "void"
            },
            {
                "name": "installComboBoxListeners()",
                "description": "This method adds the necessary listeners to the JComboBox.",
                "modAndType": "protected void"
            },
            {
                "name": "installComboBoxModelListeners(ComboBoxModel model)",
                "description": "Installs the listeners on the combo box model.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListListeners()",
                "description": "Adds the listeners to the list control.",
                "modAndType": "protected void"
            },
            {
                "name": "isFocusTraversable()",
                "description": "Overridden to unconditionally return false.",
                "modAndType": "boolean"
            },
            {
                "name": "show()",
                "description": "Implementation of ComboPopup.show().",
                "modAndType": "void"
            },
            {
                "name": "startAutoScrolling(int direction)",
                "description": "This protected method is implementation specific and should be private.",
                "modAndType": "protected void"
            },
            {
                "name": "stopAutoScrolling()",
                "description": "This protected method is implementation specific and should be private.",
                "modAndType": "protected void"
            },
            {
                "name": "togglePopup()",
                "description": "Makes the popup visible if it is hidden and makes it hidden if it is\n visible.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallComboBoxModelListeners(ComboBoxModel model)",
                "description": "Removes the listeners from the combo box model",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallingUI()",
                "description": "Called when the UI is uninstalling.",
                "modAndType": "void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "updateListBoxSelectionForEvent(MouseEvent anEvent,\n                              boolean shouldScroll)",
                "description": "A utility method used by the event listeners.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicComboPopup.html"
    },
    {
        "name": "BasicControl",
        "constructors": [
            {
                "name": "BasicControl(String id)",
                "description": "Constructs a non-critical control."
            },
            {
                "name": "BasicControl(String id,\n            boolean criticality,\n            byte[] value)",
                "description": "Constructs a control using the supplied arguments."
            }
        ],
        "methods": [
            {
                "name": "getEncodedValue()",
                "description": "Retrieves the control's ASN.1 BER encoded value.",
                "modAndType": "byte[]"
            },
            {
                "name": "getID()",
                "description": "Retrieves the control's object identifier string.",
                "modAndType": "String"
            },
            {
                "name": "isCritical()",
                "description": "Determines the control's criticality.",
                "modAndType": "boolean"
            }
        ],
        "href": "javax/naming/ldap/BasicControl.html"
    },
    {
        "name": "BasicDesktopIconUI",
        "constructors": [
            {
                "name": "BasicDesktopIconUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createMouseInputListener()",
                "description": "",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "deiconize()",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "getInsets(JComponent c)",
                "description": "",
                "modAndType": "Insets"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Desktop icons can not be resized.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicDesktopIconUI.html"
    },
    {
        "name": "BasicDesktopPaneUI",
        "constructors": [
            {
                "name": "BasicDesktopPaneUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createPropertyChangeListener()",
                "description": "Returns the PropertyChangeListener to install on\n the JDesktopPane.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDesktopManager()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Installs the PropertyChangeListener returned from\n createPropertyChangeListener on the\n JDesktopPane.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "registerKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDesktopManager()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Uninstalls the PropertyChangeListener returned from\n createPropertyChangeListener from the\n JDesktopPane.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            },
            {
                "name": "unregisterKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicDesktopPaneUI.html"
    },
    {
        "name": "BasicDirectoryModel",
        "constructors": [
            {
                "name": "BasicDirectoryModel(JFileChooser filechooser)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addPropertyChangeListener(PropertyChangeListener listener)",
                "description": "Adds a PropertyChangeListener to the listener list.",
                "modAndType": "void"
            },
            {
                "name": "contains(Object o)",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "fireContentsChanged()",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "firePropertyChange(String propertyName,\n                  Object oldValue,\n                  Object newValue)",
                "description": "Support for reporting bound property changes for boolean properties.",
                "modAndType": "protected void"
            },
            {
                "name": "getDirectories()",
                "description": "",
                "modAndType": "Vector<File>"
            },
            {
                "name": "getElementAt(int index)",
                "description": "Returns the value at the specified index.",
                "modAndType": "Object"
            },
            {
                "name": "getFiles()",
                "description": "",
                "modAndType": "Vector<File>"
            },
            {
                "name": "getPropertyChangeListeners()",
                "description": "Returns an array of all the property change listeners\n registered on this component.",
                "modAndType": "PropertyChangeListener[]"
            },
            {
                "name": "getSize()",
                "description": "Returns the length of the list.",
                "modAndType": "int"
            },
            {
                "name": "indexOf(Object o)",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "intervalAdded(ListDataEvent e)",
                "description": "Obsolete - not used.",
                "modAndType": "void"
            },
            {
                "name": "intervalRemoved(ListDataEvent e)",
                "description": "Obsolete - not used.",
                "modAndType": "void"
            },
            {
                "name": "invalidateFileCache()",
                "description": "This method is used to interrupt file loading thread.",
                "modAndType": "void"
            },
            {
                "name": "lt(File a,\n  File b)",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "propertyChange(PropertyChangeEvent e)",
                "description": "This method gets called when a bound property is changed.",
                "modAndType": "void"
            },
            {
                "name": "removePropertyChangeListener(PropertyChangeListener listener)",
                "description": "Removes a PropertyChangeListener from the listener list.",
                "modAndType": "void"
            },
            {
                "name": "renameFile(File oldFile,\n          File newFile)",
                "description": "Renames a file in the underlying file system.",
                "modAndType": "boolean"
            },
            {
                "name": "sort(Vector<? extends File> v)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "validateFileCache()",
                "description": "",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicDirectoryModel.html"
    },
    {
        "name": "BasicEditorPaneUI",
        "constructors": [
            {
                "name": "BasicEditorPaneUI()",
                "description": "Creates a new BasicEditorPaneUI."
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "Creates a UI for the JTextPane.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getEditorKit(JTextComponent tc)",
                "description": "Fetches the EditorKit for the UI.",
                "modAndType": "EditorKit"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Fetches the name used as a key to lookup properties through the\n UIManager.",
                "modAndType": "protected String"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Installs the UI for a component.",
                "modAndType": "void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent evt)",
                "description": "This method gets called when a bound property is changed\n on the associated JTextComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Deinstalls the UI for a component.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicEditorPaneUI.html"
    },
    {
        "name": "BasicFileAttributes",
        "constructors": [],
        "methods": [
            {
                "name": "creationTime()",
                "description": "Returns the creation time.",
                "modAndType": "FileTime"
            },
            {
                "name": "fileKey()",
                "description": "Returns an object that uniquely identifies the given file, or null if a file key is not available.",
                "modAndType": "Object"
            },
            {
                "name": "isDirectory()",
                "description": "Tells whether the file is a directory.",
                "modAndType": "boolean"
            },
            {
                "name": "isOther()",
                "description": "Tells whether the file is something other than a regular file, directory,\n or symbolic link.",
                "modAndType": "boolean"
            },
            {
                "name": "isRegularFile()",
                "description": "Tells whether the file is a regular file with opaque content.",
                "modAndType": "boolean"
            },
            {
                "name": "isSymbolicLink()",
                "description": "Tells whether the file is a symbolic link.",
                "modAndType": "boolean"
            },
            {
                "name": "lastAccessTime()",
                "description": "Returns the time of last access.",
                "modAndType": "FileTime"
            },
            {
                "name": "lastModifiedTime()",
                "description": "Returns the time of last modification.",
                "modAndType": "FileTime"
            },
            {
                "name": "size()",
                "description": "Returns the size of the file (in bytes).",
                "modAndType": "long"
            }
        ],
        "href": "java/nio/file/attribute/BasicFileAttributes.html"
    },
    {
        "name": "BasicFileAttributeView",
        "constructors": [],
        "methods": [
            {
                "name": "name()",
                "description": "Returns the name of the attribute view.",
                "modAndType": "String"
            },
            {
                "name": "readAttributes()",
                "description": "Reads the basic file attributes as a bulk operation.",
                "modAndType": "BasicFileAttributes"
            },
            {
                "name": "setTimes(FileTime lastModifiedTime,\n        FileTime lastAccessTime,\n        FileTime createTime)",
                "description": "Updates any or all of the file's last modified time, last access time,\n and create time attributes.",
                "modAndType": "void"
            }
        ],
        "href": "java/nio/file/attribute/BasicFileAttributeView.html"
    },
    {
        "name": "BasicFileChooserUI",
        "constructors": [
            {
                "name": "BasicFileChooserUI(JFileChooser b)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "clearIconCache()",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "createDoubleClickListener(JFileChooser fc,\n                         JList list)",
                "description": "",
                "modAndType": "protected MouseListener"
            },
            {
                "name": "createListSelectionListener(JFileChooser fc)",
                "description": "",
                "modAndType": "ListSelectionListener"
            },
            {
                "name": "createModel()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createPropertyChangeListener(JFileChooser fc)",
                "description": "",
                "modAndType": "PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "Creates a BasicFileChooserUI implementation\n for the specified component.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "ensureFileIsVisible(JFileChooser fc,\n                   File f)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "getAcceptAllFileFilter(JFileChooser fc)",
                "description": "Returns the default accept all file filter",
                "modAndType": "FileFilter"
            },
            {
                "name": "getAccessoryPanel()",
                "description": "",
                "modAndType": "JPanel"
            },
            {
                "name": "getApproveButton(JFileChooser fc)",
                "description": "",
                "modAndType": "protected JButton"
            },
            {
                "name": "getApproveButtonMnemonic(JFileChooser fc)",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getApproveButtonText(JFileChooser fc)",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "getApproveButtonToolTipText(JFileChooser fc)",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "getApproveSelectionAction()",
                "description": "",
                "modAndType": "Action"
            },
            {
                "name": "getCancelSelectionAction()",
                "description": "",
                "modAndType": "Action"
            },
            {
                "name": "getChangeToParentDirectoryAction()",
                "description": "",
                "modAndType": "Action"
            },
            {
                "name": "getDefaultButton(JFileChooser fc)",
                "description": "Returns default button for current LookAndFeel.",
                "modAndType": "JButton"
            },
            {
                "name": "getDialogTitle(JFileChooser fc)",
                "description": "Returns the title of this dialog",
                "modAndType": "String"
            },
            {
                "name": "getDirectory()",
                "description": "Property to remember the directory that is currently selected in the UI.",
                "modAndType": "protected File"
            },
            {
                "name": "getDirectoryName()",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "getFileChooser()",
                "description": "",
                "modAndType": "JFileChooser"
            },
            {
                "name": "getFileName()",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "getFileView(JFileChooser fc)",
                "description": "",
                "modAndType": "FileView"
            },
            {
                "name": "getGoHomeAction()",
                "description": "",
                "modAndType": "Action"
            },
            {
                "name": "getModel()",
                "description": "",
                "modAndType": "BasicDirectoryModel"
            },
            {
                "name": "getNewFolderAction()",
                "description": "",
                "modAndType": "Action"
            },
            {
                "name": "getUpdateAction()",
                "description": "",
                "modAndType": "Action"
            },
            {
                "name": "installComponents(JFileChooser fc)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "installDefaults(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installIcons(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installStrings(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isDirectorySelected()",
                "description": "Property to remember whether a directory is currently selected in the UI.",
                "modAndType": "protected boolean"
            },
            {
                "name": "rescanCurrentDirectory(JFileChooser fc)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setDirectory(File f)",
                "description": "Property to remember the directory that is currently selected in the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "setDirectoryName(String dirname)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setDirectorySelected(boolean b)",
                "description": "Property to remember whether a directory is currently selected in the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "setFileName(String filename)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents(JFileChooser fc)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallIcons(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallStrings(JFileChooser fc)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicFileChooserUI.html"
    },
    {
        "name": "BasicFormattedTextFieldUI",
        "constructors": [
            {
                "name": "BasicFormattedTextFieldUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "Creates a UI for a JFormattedTextField.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Fetches the name used as a key to lookup properties through the\n UIManager.",
                "modAndType": "protected String"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicFormattedTextFieldUI.html"
    },
    {
        "name": "BasicGraphicsUtils",
        "constructors": [
            {
                "name": "BasicGraphicsUtils()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "drawBezel(Graphics g,\n         int x,\n         int y,\n         int w,\n         int h,\n         boolean isPressed,\n         boolean isDefault,\n         Color shadow,\n         Color darkShadow,\n         Color highlight,\n         Color lightHighlight)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "drawDashedRect(Graphics g,\n              int x,\n              int y,\n              int width,\n              int height)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "drawEtchedRect(Graphics g,\n              int x,\n              int y,\n              int w,\n              int h,\n              Color shadow,\n              Color darkShadow,\n              Color highlight,\n              Color lightHighlight)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "drawGroove(Graphics g,\n          int x,\n          int y,\n          int w,\n          int h,\n          Color shadow,\n          Color highlight)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "drawLoweredBezel(Graphics g,\n                int x,\n                int y,\n                int w,\n                int h,\n                Color shadow,\n                Color darkShadow,\n                Color highlight,\n                Color lightHighlight)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "drawString(Graphics g,\n          String text,\n          int underlinedChar,\n          int x,\n          int y)",
                "description": "Draw a string with the graphics g at location (x,y)\n  just like g.drawString would.",
                "modAndType": "static void"
            },
            {
                "name": "drawStringUnderlineCharAt(Graphics g,\n                         String text,\n                         int underlinedIndex,\n                         int x,\n                         int y)",
                "description": "Draw a string with the graphics g at location\n (x, y)\n just like g.drawString would.",
                "modAndType": "static void"
            },
            {
                "name": "getEtchedInsets()",
                "description": "Returns the amount of space taken up by a border drawn by\n drawEtchedRect()",
                "modAndType": "static Insets"
            },
            {
                "name": "getGrooveInsets()",
                "description": "Returns the amount of space taken up by a border drawn by\n drawGroove()",
                "modAndType": "static Insets"
            },
            {
                "name": "getPreferredButtonSize(AbstractButton b,\n                      int textIconGap)",
                "description": "",
                "modAndType": "static Dimension"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicGraphicsUtils.html"
    },
    {
        "name": "BasicHTML",
        "constructors": [
            {
                "name": "BasicHTML()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createHTMLView(JComponent c,\n              String html)",
                "description": "Create an html renderer for the given component and\n string of html.",
                "modAndType": "static View"
            },
            {
                "name": "getHTMLBaseline(View view,\n               int w,\n               int h)",
                "description": "Returns the baseline for the html renderer.",
                "modAndType": "static int"
            },
            {
                "name": "isHTMLString(String s)",
                "description": "Check the given string to see if it should trigger the\n html rendering logic in a non-text component that supports\n html rendering.",
                "modAndType": "static boolean"
            },
            {
                "name": "updateRenderer(JComponent c,\n              String text)",
                "description": "Stash the HTML render for the given text into the client\n properties of the given JComponent.",
                "modAndType": "static void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicHTML.html"
    },
    {
        "name": "BasicIconFactory",
        "constructors": [
            {
                "name": "BasicIconFactory()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createEmptyFrameIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getCheckBoxIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getCheckBoxMenuItemIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getMenuArrowIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getMenuItemArrowIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getMenuItemCheckIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getRadioButtonIcon()",
                "description": "",
                "modAndType": "static Icon"
            },
            {
                "name": "getRadioButtonMenuItemIcon()",
                "description": "",
                "modAndType": "static Icon"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicIconFactory.html"
    },
    {
        "name": "BasicInternalFrameTitlePane",
        "constructors": [
            {
                "name": "BasicInternalFrameTitlePane(JInternalFrame f)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addSubComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "addSystemMenuItems(JMenu systemMenu)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "assembleSystemMenu()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createButtons()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createLayout()",
                "description": "",
                "modAndType": "protected LayoutManager"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createSystemMenu()",
                "description": "",
                "modAndType": "protected JMenu"
            },
            {
                "name": "createSystemMenuBar()",
                "description": "",
                "modAndType": "protected JMenuBar"
            },
            {
                "name": "enableActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "getTitle(String text,\n        FontMetrics fm,\n        int availTextWidth)",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installTitlePane()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintComponent(Graphics g)",
                "description": "Calls the UI delegate's paint method, if the UI delegate\n is non-null.",
                "modAndType": "void"
            },
            {
                "name": "paintTitleBackground(Graphics g)",
                "description": "Invoked from paintComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "postClosingEvent(JInternalFrame frame)",
                "description": "Post a WINDOW_CLOSING-like event to the frame, so that it can\n be treated like a regular Frame.",
                "modAndType": "protected void"
            },
            {
                "name": "setButtonIcons()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "showSystemMenu()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicInternalFrameTitlePane.html"
    },
    {
        "name": "BasicInternalFrameUI",
        "constructors": [
            {
                "name": "BasicInternalFrameUI(JInternalFrame b)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "activateFrame(JInternalFrame f)",
                "description": "This method is called when the frame becomes selected.",
                "modAndType": "protected void"
            },
            {
                "name": "closeFrame(JInternalFrame f)",
                "description": "This method is called when the user wants to close the frame.",
                "modAndType": "protected void"
            },
            {
                "name": "createBorderListener(JInternalFrame w)",
                "description": "",
                "modAndType": "protected MouseInputAdapter"
            },
            {
                "name": "createComponentListener()",
                "description": "",
                "modAndType": "protected ComponentListener"
            },
            {
                "name": "createDesktopManager()",
                "description": "",
                "modAndType": "protected DesktopManager"
            },
            {
                "name": "createEastPane(JInternalFrame w)",
                "description": "",
                "modAndType": "protected JComponent"
            },
            {
                "name": "createGlassPaneDispatcher()",
                "description": "",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createInternalFrameListener()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createLayoutManager()",
                "description": "",
                "modAndType": "protected LayoutManager"
            },
            {
                "name": "createNorthPane(JInternalFrame w)",
                "description": "",
                "modAndType": "protected JComponent"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createSouthPane(JInternalFrame w)",
                "description": "",
                "modAndType": "protected JComponent"
            },
            {
                "name": "createUI(JComponent b)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "createWestPane(JInternalFrame w)",
                "description": "",
                "modAndType": "protected JComponent"
            },
            {
                "name": "deactivateFrame(JInternalFrame f)",
                "description": "This method is called when the frame is no longer selected.",
                "modAndType": "protected void"
            },
            {
                "name": "deiconifyFrame(JInternalFrame f)",
                "description": "This method is called when the user wants to deiconify the frame.",
                "modAndType": "protected void"
            },
            {
                "name": "deinstallMouseHandlers(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "getDesktopManager()",
                "description": "Returns the proper DesktopManager.",
                "modAndType": "protected DesktopManager"
            },
            {
                "name": "getEastPane()",
                "description": "",
                "modAndType": "JComponent"
            },
            {
                "name": "getMaximumSize(JComponent x)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent x)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getNorthPane()",
                "description": "",
                "modAndType": "JComponent"
            },
            {
                "name": "getPreferredSize(JComponent x)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getSouthPane()",
                "description": "",
                "modAndType": "JComponent"
            },
            {
                "name": "getWestPane()",
                "description": "",
                "modAndType": "JComponent"
            },
            {
                "name": "iconifyFrame(JInternalFrame f)",
                "description": "This method is called when the user wants to iconify the frame.",
                "modAndType": "protected void"
            },
            {
                "name": "installComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installMouseHandlers(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isKeyBindingActive()",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "isKeyBindingRegistered()",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "maximizeFrame(JInternalFrame f)",
                "description": "This method is called when the user wants to maximize the frame.",
                "modAndType": "protected void"
            },
            {
                "name": "minimizeFrame(JInternalFrame f)",
                "description": "This method is called when the user wants to minimize the frame.",
                "modAndType": "protected void"
            },
            {
                "name": "replacePane(JComponent currentPane,\n           JComponent newPane)",
                "description": "Installs necessary mouse handlers on newPane\n and adds it to the frame.",
                "modAndType": "protected void"
            },
            {
                "name": "setEastPane(JComponent c)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setKeyBindingActive(boolean b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setKeyBindingRegistered(boolean b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setNorthPane(JComponent c)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setSouthPane(JComponent c)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setupMenuCloseKey()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setupMenuOpenKey()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setWestPane(JComponent c)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicInternalFrameUI.html"
    },
    {
        "name": "BasicLabelUI",
        "constructors": [
            {
                "name": "BasicLabelUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installComponents(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions(JLabel l)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "layoutCL(JLabel label,\n        FontMetrics fontMetrics,\n        String text,\n        Icon icon,\n        Rectangle viewR,\n        Rectangle iconR,\n        Rectangle textR)",
                "description": "Forwards the call to SwingUtilities.layoutCompoundLabel().",
                "modAndType": "protected String"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the label text with the foreground color, if the label is opaque\n then paints the entire background with the background color.",
                "modAndType": "void"
            },
            {
                "name": "paintDisabledText(JLabel l,\n                 Graphics g,\n                 String s,\n                 int textX,\n                 int textY)",
                "description": "Paint clippedText at textX, textY with background.lighter() and then\n shifted down and to the right by one pixel with background.darker().",
                "modAndType": "protected void"
            },
            {
                "name": "paintEnabledText(JLabel l,\n                Graphics g,\n                String s,\n                int textX,\n                int textY)",
                "description": "Paint clippedText at textX, textY with the labels foreground color.",
                "modAndType": "protected void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent e)",
                "description": "This method gets called when a bound property is changed.",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JLabel c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicLabelUI.html"
    },
    {
        "name": "BasicListUI",
        "constructors": [
            {
                "name": "BasicListUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "convertRowToY(int row)",
                "description": "Return the JList relative Y coordinate of the origin of the specified\n row or -1 if row isn't valid.",
                "modAndType": "protected int"
            },
            {
                "name": "convertYToRow(int y0)",
                "description": "Convert the JList relative coordinate to the row that contains it,\n based on the current layout.",
                "modAndType": "protected int"
            },
            {
                "name": "createFocusListener()",
                "description": "",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createListDataListener()",
                "description": "Creates an instance of ListDataListener that's added to\n the JLists by model as needed.",
                "modAndType": "protected ListDataListener"
            },
            {
                "name": "createListSelectionListener()",
                "description": "Creates an instance of ListSelectionHandler that's added to\n the JLists by selectionModel as needed.",
                "modAndType": "protected ListSelectionListener"
            },
            {
                "name": "createMouseInputListener()",
                "description": "Creates a delegate that implements MouseInputListener.",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates an instance of PropertyChangeHandler that's added to\n the JList by installUI().",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent list)",
                "description": "Returns a new instance of BasicListUI.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getCellBounds(JList list,\n             int index1,\n             int index2)",
                "description": "Returns the bounding rectangle, in the given list's coordinate system,\n for the range of cells specified by the two indices.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "The preferredSize of the list depends upon the layout orientation.",
                "modAndType": "Dimension"
            },
            {
                "name": "getRowHeight(int row)",
                "description": "Returns the height of the specified row based on the current layout.",
                "modAndType": "protected int"
            },
            {
                "name": "indexToLocation(JList list,\n               int index)",
                "description": "Returns the origin in the given JList, of the specified item,\n in the list's coordinate system.",
                "modAndType": "Point"
            },
            {
                "name": "installDefaults()",
                "description": "Initializes list properties such as font, foreground, and background,\n and adds the CellRendererPane.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "Registers the keyboard bindings on the JList that the\n BasicListUI is associated with.",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Creates and installs the listeners for the JList, its model, and its\n selectionModel.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Initializes this.list by calling installDefaults(),\n installListeners(), and installKeyboardActions()\n in order.",
                "modAndType": "void"
            },
            {
                "name": "locationToIndex(JList list,\n               Point location)",
                "description": "Returns the cell index in the specified JList closest to the\n given location in the list's coordinate system.",
                "modAndType": "int"
            },
            {
                "name": "maybeUpdateLayoutState()",
                "description": "If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset\n updateLayoutStateNeeded.",
                "modAndType": "protected void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paint the rows that intersect the Graphics objects clipRect.",
                "modAndType": "void"
            },
            {
                "name": "paintCell(Graphics g,\n         int row,\n         Rectangle rowBounds,\n         ListCellRenderer cellRenderer,\n         ListModel dataModel,\n         ListSelectionModel selModel,\n         int leadIndex)",
                "description": "Paint one List cell: compute the relevant state, get the \"rubber stamp\"\n cell renderer component, and then use the CellRendererPane to paint it.",
                "modAndType": "protected void"
            },
            {
                "name": "selectNextIndex()",
                "description": "Selected the previous row and force it to be visible.",
                "modAndType": "protected void"
            },
            {
                "name": "selectPreviousIndex()",
                "description": "Selected the previous row and force it to be visible.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "Sets the list properties that have not been explicitly overridden to\n null.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "Unregisters keyboard actions installed from\n installKeyboardActions.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Removes the listeners from the JList, its model, and its\n selectionModel.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Uninitializes this.list by calling uninstallListeners(),\n uninstallKeyboardActions(), and uninstallDefaults()\n in order.",
                "modAndType": "void"
            },
            {
                "name": "updateLayoutState()",
                "description": "Recompute the value of cellHeight or cellHeights based\n and cellWidth, based on the current font and the current\n values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicListUI.html"
    },
    {
        "name": "BasicLookAndFeel",
        "constructors": [
            {
                "name": "BasicLookAndFeel()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createAudioAction(Object key)",
                "description": "Creates and returns an Action used to play a sound.",
                "modAndType": "protected Action"
            },
            {
                "name": "getAudioActionMap()",
                "description": "Returns an ActionMap containing the audio actions\n for this look and feel.",
                "modAndType": "protected ActionMap"
            },
            {
                "name": "getDefaults()",
                "description": "Returns the look and feel defaults.",
                "modAndType": "UIDefaults"
            },
            {
                "name": "initClassDefaults(UIDefaults table)",
                "description": "Populates table with mappings from uiClassID to the\n fully qualified name of the ui class.",
                "modAndType": "protected void"
            },
            {
                "name": "initComponentDefaults(UIDefaults table)",
                "description": "Populates table with the defaults for the basic look and\n feel.",
                "modAndType": "protected void"
            },
            {
                "name": "initialize()",
                "description": "Initializes the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "initSystemColorDefaults(UIDefaults table)",
                "description": "Populates table with system colors.",
                "modAndType": "protected void"
            },
            {
                "name": "loadSystemColors(UIDefaults table,\n                String[] systemColors,\n                boolean useNative)",
                "description": "Populates table with the name-color pairs in\n systemColors.",
                "modAndType": "protected void"
            },
            {
                "name": "playSound(Action audioAction)",
                "description": "If necessary, invokes actionPerformed on\n audioAction to play a sound.",
                "modAndType": "protected void"
            },
            {
                "name": "uninitialize()",
                "description": "Uninitializes the look and feel.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicLookAndFeel.html"
    },
    {
        "name": "BasicMenuBarUI",
        "constructors": [
            {
                "name": "BasicMenuBarUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createChangeListener()",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createContainerListener()",
                "description": "",
                "modAndType": "protected ContainerListener"
            },
            {
                "name": "createUI(JComponent x)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicMenuBarUI.html"
    },
    {
        "name": "BasicMenuItemUI",
        "constructors": [
            {
                "name": "BasicMenuItemUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createMenuDragMouseListener(JComponent c)",
                "description": "",
                "modAndType": "protected MenuDragMouseListener"
            },
            {
                "name": "createMenuKeyListener(JComponent c)",
                "description": "",
                "modAndType": "protected MenuKeyListener"
            },
            {
                "name": "createMouseInputListener(JComponent c)",
                "description": "",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createPropertyChangeListener(JComponent c)",
                "description": "Creates a PropertyChangeListener which will be added to\n the menu item.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "doClick(MenuSelectionManager msm)",
                "description": "Call this method when a menu item is to be activated.",
                "modAndType": "protected void"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPath()",
                "description": "",
                "modAndType": "MenuElement[]"
            },
            {
                "name": "getPreferredMenuItemSize(JComponent c,\n                        Icon checkIcon,\n                        Icon arrowIcon,\n                        int defaultTextIconGap)",
                "description": "",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "installComponents(JMenuItem menuItem)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintBackground(Graphics g,\n               JMenuItem menuItem,\n               Color bgColor)",
                "description": "Draws the background of the menu item.",
                "modAndType": "protected void"
            },
            {
                "name": "paintMenuItem(Graphics g,\n             JComponent c,\n             Icon checkIcon,\n             Icon arrowIcon,\n             Color background,\n             Color foreground,\n             int defaultTextIconGap)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintText(Graphics g,\n         JMenuItem menuItem,\n         Rectangle textRect,\n         String text)",
                "description": "Renders the text of the current menu item.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallComponents(JMenuItem menuItem)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            },
            {
                "name": "update(Graphics g,\n      JComponent c)",
                "description": "We draw the background in paintMenuItem()\n so override update (which fills the background of opaque\n components by default) to just call paint().",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicMenuItemUI.html"
    },
    {
        "name": "BasicMenuUI",
        "constructors": [
            {
                "name": "BasicMenuUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createChangeListener(JComponent c)",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createMenuDragMouseListener(JComponent c)",
                "description": "",
                "modAndType": "protected MenuDragMouseListener"
            },
            {
                "name": "createMenuKeyListener(JComponent c)",
                "description": "",
                "modAndType": "protected MenuKeyListener"
            },
            {
                "name": "createMenuListener(JComponent c)",
                "description": "",
                "modAndType": "protected MenuListener"
            },
            {
                "name": "createMouseInputListener(JComponent c)",
                "description": "",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createPropertyChangeListener(JComponent c)",
                "description": "Creates a PropertyChangeListener which will be added to\n the menu item.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent x)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setupPostTimer(JMenu menu)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicMenuUI.html"
    },
    {
        "name": "BasicOptionPaneUI",
        "constructors": [
            {
                "name": "BasicOptionPaneUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addButtonComponents(Container container,\n                   Object[] buttons,\n                   int initialIndex)",
                "description": "Creates the appropriate object to represent each of the objects in\n buttons and adds it to container.",
                "modAndType": "protected void"
            },
            {
                "name": "addIcon(Container top)",
                "description": "Creates and adds a JLabel representing the icon returned from\n getIcon to top.",
                "modAndType": "protected void"
            },
            {
                "name": "addMessageComponents(Container container,\n                    GridBagConstraints cons,\n                    Object msg,\n                    int maxll,\n                    boolean internallyCreated)",
                "description": "Creates the appropriate object to represent msg and\n places it into container.",
                "modAndType": "protected void"
            },
            {
                "name": "burstStringInto(Container c,\n               String d,\n               int maxll)",
                "description": "Recursively creates new JLabel instances to represent d.",
                "modAndType": "protected void"
            },
            {
                "name": "containsCustomComponents(JOptionPane op)",
                "description": "Returns true if in the last call to validateComponent the message\n or buttons contained a subclass of Component.",
                "modAndType": "boolean"
            },
            {
                "name": "createButtonActionListener(int buttonIndex)",
                "description": "",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createButtonArea()",
                "description": "Creates and returns a Container containing the buttons.",
                "modAndType": "protected Container"
            },
            {
                "name": "createLayoutManager()",
                "description": "",
                "modAndType": "protected LayoutManager"
            },
            {
                "name": "createMessageArea()",
                "description": "Messaged from installComponents to create a Container containing the\n body of the message.",
                "modAndType": "protected Container"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createSeparator()",
                "description": "",
                "modAndType": "protected Container"
            },
            {
                "name": "createUI(JComponent x)",
                "description": "Creates a new BasicOptionPaneUI instance.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getButtons()",
                "description": "Returns the buttons to display from the JOptionPane the receiver is\n providing the look and feel for.",
                "modAndType": "protected Object[]"
            },
            {
                "name": "getIcon()",
                "description": "Returns the icon from the JOptionPane the receiver is providing\n the look and feel for, or the default icon as returned from\n getDefaultIcon.",
                "modAndType": "protected Icon"
            },
            {
                "name": "getIconForType(int messageType)",
                "description": "Returns the icon to use for the passed in type.",
                "modAndType": "protected Icon"
            },
            {
                "name": "getInitialValueIndex()",
                "description": "Returns the initial index into the buttons to select.",
                "modAndType": "protected int"
            },
            {
                "name": "getMaxCharactersPerLineCount()",
                "description": "Returns the maximum number of characters to place on a line.",
                "modAndType": "protected int"
            },
            {
                "name": "getMessage()",
                "description": "Returns the message to display from the JOptionPane the receiver is\n providing the look and feel for.",
                "modAndType": "protected Object"
            },
            {
                "name": "getMinimumOptionPaneSize()",
                "description": "Returns the minimum size the option pane should be.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "If c is the JOptionPane the receiver\n is contained in, the preferred\n size that is returned is the maximum of the preferred size of\n the LayoutManager for the JOptionPane, and\n getMinimumOptionPaneSize.",
                "modAndType": "Dimension"
            },
            {
                "name": "getSizeButtonsToSameWidth()",
                "description": "Returns true, basic L&F wants all the buttons to have the same\n width.",
                "modAndType": "protected boolean"
            },
            {
                "name": "installComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Installs the receiver as the L&F for the passed in\n JOptionPane.",
                "modAndType": "void"
            },
            {
                "name": "resetInputValue()",
                "description": "Sets the input value in the option pane the receiver is providing\n the look and feel for based on the value in the inputComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "selectInitialValue(JOptionPane op)",
                "description": "If inputComponent is non-null, the focus is requested on that,\n otherwise request focus on the default value",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Removes the receiver from the L&F controller of the passed in split\n pane.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicOptionPaneUI.html"
    },
    {
        "name": "BasicOptionPaneUI.ButtonAreaLayout",
        "constructors": [
            {
                "name": "ButtonAreaLayout(boolean syncAllWidths,\n                int padding)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addLayoutComponent(String string,\n                  Component comp)",
                "description": "If the layout manager uses a per-component string,\n adds the component comp to the layout,\n associating it\n with the string specified by name.",
                "modAndType": "void"
            },
            {
                "name": "getCentersChildren()",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "getPadding()",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getSyncAllWidths()",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "layoutContainer(Container container)",
                "description": "Lays out the specified container.",
                "modAndType": "void"
            },
            {
                "name": "minimumLayoutSize(Container c)",
                "description": "Calculates the minimum size dimensions for the specified\n container, given the components it contains.",
                "modAndType": "Dimension"
            },
            {
                "name": "preferredLayoutSize(Container c)",
                "description": "Calculates the preferred size dimensions for the specified\n container, given the components it contains.",
                "modAndType": "Dimension"
            },
            {
                "name": "removeLayoutComponent(Component c)",
                "description": "Removes the specified component from the layout.",
                "modAndType": "void"
            },
            {
                "name": "setCentersChildren(boolean newValue)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setPadding(int newPadding)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setSyncAllWidths(boolean newValue)",
                "description": "",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicOptionPaneUI.ButtonAreaLayout.html"
    },
    {
        "name": "BasicPanelUI",
        "constructors": [
            {
                "name": "BasicPanelUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "installDefaults(JPanel p)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults(JPanel p)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicPanelUI.html"
    },
    {
        "name": "BasicPasswordFieldUI",
        "constructors": [
            {
                "name": "BasicPasswordFieldUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "create(Element elem)",
                "description": "Creates a view (PasswordView) for an element.",
                "modAndType": "View"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "Creates a UI for a JPasswordField.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Fetches the name used as a key to look up properties through the\n UIManager.",
                "modAndType": "protected String"
            },
            {
                "name": "installDefaults()",
                "description": "Installs the necessary properties on the JPasswordField.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicPasswordFieldUI.html"
    },
    {
        "name": "BasicPermission",
        "constructors": [
            {
                "name": "BasicPermission(String name)",
                "description": "Creates a new BasicPermission with the specified name."
            },
            {
                "name": "BasicPermission(String name,\n               String actions)",
                "description": "Creates a new BasicPermission object with the specified name."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Checks two BasicPermission objects for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "getActions()",
                "description": "Returns the canonical string representation of the actions,\n which currently is the empty string \"\", since there are no actions for\n a BasicPermission.",
                "modAndType": "String"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this object.",
                "modAndType": "int"
            },
            {
                "name": "implies(Permission p)",
                "description": "Checks if the specified permission is \"implied\" by\n this object.",
                "modAndType": "boolean"
            },
            {
                "name": "newPermissionCollection()",
                "description": "Returns a new PermissionCollection object for storing BasicPermission\n objects.",
                "modAndType": "PermissionCollection"
            }
        ],
        "href": "java/security/BasicPermission.html"
    },
    {
        "name": "BasicPopupMenuSeparatorUI",
        "constructors": [
            {
                "name": "BasicPopupMenuSeparatorUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicPopupMenuSeparatorUI.html"
    },
    {
        "name": "BasicPopupMenuUI",
        "constructors": [
            {
                "name": "BasicPopupMenuUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent x)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isPopupTrigger(MouseEvent e)",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicPopupMenuUI.html"
    },
    {
        "name": "BasicProgressBarUI",
        "constructors": [
            {
                "name": "BasicProgressBarUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent x)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getAmountFull(Insets b,\n             int width,\n             int height)",
                "description": "This determines the amount of the progress bar that should be filled\n based on the percent done gathered from the model.",
                "modAndType": "protected int"
            },
            {
                "name": "getAnimationIndex()",
                "description": "Gets the index of the current animation frame.",
                "modAndType": "protected int"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getBox(Rectangle r)",
                "description": "Stores the position and size of\n the bouncing box that would be painted for the current animation index\n in r and returns r.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "getBoxLength(int availableLength,\n            int otherDimension)",
                "description": "Returns the length\n of the \"bouncing box\" to be painted.",
                "modAndType": "protected int"
            },
            {
                "name": "getCellLength()",
                "description": "Returns the width (if HORIZONTAL) or height (if VERTICAL)\n of each of the individual cells/units to be rendered in the\n progress bar.",
                "modAndType": "protected int"
            },
            {
                "name": "getCellSpacing()",
                "description": "Returns the spacing between each of the cells/units in the\n progress bar.",
                "modAndType": "protected int"
            },
            {
                "name": "getFrameCount()",
                "description": "Returns the number of frames for the complete animation loop\n used by an indeterminate JProgessBar.",
                "modAndType": "protected int"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "The Minimum size for this component is 10.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredInnerHorizontal()",
                "description": "",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getPreferredInnerVertical()",
                "description": "",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getSelectionBackground()",
                "description": "The \"selectionBackground\" is the color of the text when it is painted\n over an unfilled area of the progress bar.",
                "modAndType": "protected Color"
            },
            {
                "name": "getSelectionForeground()",
                "description": "The \"selectionForeground\" is the color of the text when it is painted\n over a filled area of the progress bar.",
                "modAndType": "protected Color"
            },
            {
                "name": "getStringPlacement(Graphics g,\n                  String progressString,\n                  int x,\n                  int y,\n                  int width,\n                  int height)",
                "description": "Designate the place where the progress string will be painted.",
                "modAndType": "protected Point"
            },
            {
                "name": "incrementAnimationIndex()",
                "description": "Sets the index of the current animation frame,\n to the next valid value,\n which results in the progress bar being repainted.",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Delegates painting to one of two methods:\n paintDeterminate or paintIndeterminate.",
                "modAndType": "void"
            },
            {
                "name": "paintDeterminate(Graphics g,\n                JComponent c)",
                "description": "All purpose paint method that should do the right thing for almost\n all linear, determinate progress bars.",
                "modAndType": "protected void"
            },
            {
                "name": "paintIndeterminate(Graphics g,\n                  JComponent c)",
                "description": "All purpose paint method that should do the right thing for all\n linear bouncing-box progress bars.",
                "modAndType": "protected void"
            },
            {
                "name": "paintString(Graphics g,\n           int x,\n           int y,\n           int width,\n           int height,\n           int amountFull,\n           Insets b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setAnimationIndex(int newValue)",
                "description": "Sets the index of the current animation frame\n to the specified value and requests that the\n progress bar be repainted.",
                "modAndType": "protected void"
            },
            {
                "name": "setCellLength(int cellLen)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setCellSpacing(int cellSpace)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "startAnimationTimer()",
                "description": "Starts the animation thread, creating and initializing\n it if necessary.",
                "modAndType": "protected void"
            },
            {
                "name": "stopAnimationTimer()",
                "description": "Stops the animation thread.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Removes all listeners installed by this object.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicProgressBarUI.html"
    },
    {
        "name": "BasicRadioButtonMenuItemUI",
        "constructors": [
            {
                "name": "BasicRadioButtonMenuItemUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent b)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "processMouseEvent(JMenuItem item,\n                 MouseEvent e,\n                 MenuElement[] path,\n                 MenuSelectionManager manager)",
                "description": "",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicRadioButtonMenuItemUI.html"
    },
    {
        "name": "BasicRadioButtonUI",
        "constructors": [
            {
                "name": "BasicRadioButtonUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent b)",
                "description": "Returns an instance of BasicRadioButtonUI.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getDefaultIcon()",
                "description": "Returns the default icon.",
                "modAndType": "Icon"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "The preferred size of the radio button",
                "modAndType": "Dimension"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "installDefaults(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(AbstractButton button)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "paint the radio button",
                "modAndType": "void"
            },
            {
                "name": "paintFocus(Graphics g,\n          Rectangle textRect,\n          Dimension size)",
                "description": "Paints focused radio button.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults(AbstractButton b)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(AbstractButton button)",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicRadioButtonUI.html"
    },
    {
        "name": "BasicRootPaneUI",
        "constructors": [
            {
                "name": "BasicRootPaneUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "installComponents(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults(JRootPane c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent e)",
                "description": "Invoked when a property changes on the root pane.",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JRootPane root)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicRootPaneUI.html"
    },
    {
        "name": "BasicScrollBarUI",
        "constructors": [
            {
                "name": "BasicScrollBarUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "addLayoutComponent(String name,\n                  Component child)",
                "description": "If the layout manager uses a per-component string,\n adds the component comp to the layout,\n associating it\n with the string specified by name.",
                "modAndType": "void"
            },
            {
                "name": "configureScrollBarColors()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createArrowButtonListener()",
                "description": "",
                "modAndType": "protected BasicScrollBarUI.ArrowButtonListener"
            },
            {
                "name": "createDecreaseButton(int orientation)",
                "description": "",
                "modAndType": "protected JButton"
            },
            {
                "name": "createIncreaseButton(int orientation)",
                "description": "",
                "modAndType": "protected JButton"
            },
            {
                "name": "createModelListener()",
                "description": "",
                "modAndType": "protected BasicScrollBarUI.ModelListener"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createScrollListener()",
                "description": "",
                "modAndType": "protected BasicScrollBarUI.ScrollListener"
            },
            {
                "name": "createTrackListener()",
                "description": "",
                "modAndType": "protected BasicScrollBarUI.TrackListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMaximumThumbSize()",
                "description": "Returns the largest acceptable size for the thumb.",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getMinimumThumbSize()",
                "description": "Returns the smallest acceptable size for the thumb.",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "A vertical scrollbar's preferred width is the maximum of\n preferred widths of the (non null)\n increment/decrement buttons,\n and the minimum width of the thumb.",
                "modAndType": "Dimension"
            },
            {
                "name": "getSupportsAbsolutePositioning()",
                "description": "Indicates whether the user can absolutely position the thumb with\n a mouse gesture (usually the middle mouse button).",
                "modAndType": "boolean"
            },
            {
                "name": "getThumbBounds()",
                "description": "Return the current size/location of the thumb.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "getTrackBounds()",
                "description": "Returns the current bounds of the track, i.e.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "installComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isThumbRollover()",
                "description": "Returns true if the mouse is currently over the thumb.",
                "modAndType": "boolean"
            },
            {
                "name": "layoutContainer(Container scrollbarContainer)",
                "description": "Lays out the specified container.",
                "modAndType": "void"
            },
            {
                "name": "layoutHScrollbar(JScrollBar sb)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "layoutVScrollbar(JScrollBar sb)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "minimumLayoutSize(Container scrollbarContainer)",
                "description": "Calculates the minimum size dimensions for the specified\n container, given the components it contains.",
                "modAndType": "Dimension"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintDecreaseHighlight(Graphics g)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintIncreaseHighlight(Graphics g)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintThumb(Graphics g,\n          JComponent c,\n          Rectangle thumbBounds)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintTrack(Graphics g,\n          JComponent c,\n          Rectangle trackBounds)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "preferredLayoutSize(Container scrollbarContainer)",
                "description": "Calculates the preferred size dimensions for the specified\n container, given the components it contains.",
                "modAndType": "Dimension"
            },
            {
                "name": "removeLayoutComponent(Component child)",
                "description": "Removes the specified component from the layout.",
                "modAndType": "void"
            },
            {
                "name": "scrollByBlock(int direction)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "scrollByUnit(int direction)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setThumbBounds(int x,\n              int y,\n              int width,\n              int height)",
                "description": "Set the bounds of the thumb and force a repaint that includes\n the old thumbBounds and the new one.",
                "modAndType": "protected void"
            },
            {
                "name": "setThumbRollover(boolean active)",
                "description": "Sets whether or not the mouse is currently over the thumb.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicScrollBarUI.html"
    },
    {
        "name": "BasicScrollPaneUI",
        "constructors": [
            {
                "name": "BasicScrollPaneUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createHSBChangeListener()",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createMouseWheelListener()",
                "description": "Creates an instance of MouseWheelListener, which is added to the\n JScrollPane by installUI().",
                "modAndType": "protected MouseWheelListener"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates an instance of PropertyChangeListener that's added to\n the JScrollPane by installUI().",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent x)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "createViewportChangeListener()",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createVSBChangeListener()",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults(JScrollPane scrollpane)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions(JScrollPane c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JScrollPane c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent x)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "syncScrollPaneWithViewport()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults(JScrollPane c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions(JScrollPane c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            },
            {
                "name": "updateColumnHeader(PropertyChangeEvent e)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "updateRowHeader(PropertyChangeEvent e)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "updateScrollBarDisplayPolicy(PropertyChangeEvent e)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "updateViewport(PropertyChangeEvent e)",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicScrollPaneUI.html"
    },
    {
        "name": "BasicSeparatorUI",
        "constructors": [
            {
                "name": "BasicSeparatorUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults(JSeparator s)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JSeparator s)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults(JSeparator s)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JSeparator s)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicSeparatorUI.html"
    },
    {
        "name": "BasicSliderUI",
        "constructors": [
            {
                "name": "BasicSliderUI(JSlider b)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "calculateContentRect()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateFocusRect()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateGeometry()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateLabelRect()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateThumbLocation()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateThumbSize()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateTickRect()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateTrackBuffer()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateTrackRect()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "createChangeListener(JSlider slider)",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createComponentListener(JSlider slider)",
                "description": "",
                "modAndType": "protected ComponentListener"
            },
            {
                "name": "createFocusListener(JSlider slider)",
                "description": "",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createPropertyChangeListener(JSlider slider)",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createScrollListener(JSlider slider)",
                "description": "",
                "modAndType": "protected BasicSliderUI.ScrollListener"
            },
            {
                "name": "createTrackListener(JSlider slider)",
                "description": "",
                "modAndType": "protected BasicSliderUI.TrackListener"
            },
            {
                "name": "createUI(JComponent b)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "drawInverted()",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getFocusColor()",
                "description": "",
                "modAndType": "protected Color"
            },
            {
                "name": "getHeightOfHighValueLabel()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getHeightOfLowValueLabel()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getHeightOfTallestLabel()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getHighestValue()",
                "description": "Returns the biggest value that has an entry in the label table.",
                "modAndType": "protected Integer"
            },
            {
                "name": "getHighestValueLabel()",
                "description": "Returns the label that corresponds to the lowest slider value in the label table.",
                "modAndType": "protected Component"
            },
            {
                "name": "getHighlightColor()",
                "description": "",
                "modAndType": "protected Color"
            },
            {
                "name": "getLowestValue()",
                "description": "Returns the smallest value that has an entry in the label table.",
                "modAndType": "protected Integer"
            },
            {
                "name": "getLowestValueLabel()",
                "description": "Returns the label that corresponds to the highest slider value in the label table.",
                "modAndType": "protected Component"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumHorizontalSize()",
                "description": "",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumVerticalSize()",
                "description": "",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredHorizontalSize()",
                "description": "",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredVerticalSize()",
                "description": "",
                "modAndType": "Dimension"
            },
            {
                "name": "getShadowColor()",
                "description": "",
                "modAndType": "protected Color"
            },
            {
                "name": "getThumbSize()",
                "description": "",
                "modAndType": "protected Dimension"
            },
            {
                "name": "getTickLength()",
                "description": "Gets the height of the tick area for horizontal sliders and the width of the\n tick area for vertical sliders.",
                "modAndType": "protected int"
            },
            {
                "name": "getWidthOfHighValueLabel()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getWidthOfLowValueLabel()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getWidthOfWidestLabel()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "installDefaults(JSlider slider)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions(JSlider slider)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JSlider slider)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isDragging()",
                "description": "Returns true if the user is dragging the slider.",
                "modAndType": "protected boolean"
            },
            {
                "name": "labelsHaveSameBaselines()",
                "description": "Returns true if all the labels from the label table have the same\n baseline.",
                "modAndType": "protected boolean"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintFocus(Graphics g)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "paintHorizontalLabel(Graphics g,\n                    int value,\n                    Component label)",
                "description": "Called for every label in the label table.",
                "modAndType": "protected void"
            },
            {
                "name": "paintLabels(Graphics g)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "paintMajorTickForHorizSlider(Graphics g,\n                            Rectangle tickBounds,\n                            int x)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintMajorTickForVertSlider(Graphics g,\n                           Rectangle tickBounds,\n                           int y)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintMinorTickForHorizSlider(Graphics g,\n                            Rectangle tickBounds,\n                            int x)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintMinorTickForVertSlider(Graphics g,\n                           Rectangle tickBounds,\n                           int y)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintThumb(Graphics g)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "paintTicks(Graphics g)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "paintTrack(Graphics g)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "paintVerticalLabel(Graphics g,\n                  int value,\n                  Component label)",
                "description": "Called for every label in the label table.",
                "modAndType": "protected void"
            },
            {
                "name": "recalculateIfInsetsChanged()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "recalculateIfOrientationChanged()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "scrollByBlock(int direction)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "scrollByUnit(int direction)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "scrollDueToClickInTrack(int dir)",
                "description": "This function is called when a mousePressed was detected in the track, not\n in the thumb.",
                "modAndType": "protected void"
            },
            {
                "name": "setThumbLocation(int x,\n                int y)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults(JSlider slider)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions(JSlider slider)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JSlider slider)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            },
            {
                "name": "valueForXPosition(int xPos)",
                "description": "Returns the value at the x position.",
                "modAndType": "int"
            },
            {
                "name": "valueForYPosition(int yPos)",
                "description": "Returns the value at the y position.",
                "modAndType": "int"
            },
            {
                "name": "xPositionForValue(int value)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "yPositionForValue(int value)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "yPositionForValue(int value,\n                 int trackY,\n                 int trackHeight)",
                "description": "Returns the y location for the specified value.",
                "modAndType": "protected int"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicSliderUI.html"
    },
    {
        "name": "BasicSpinnerUI",
        "constructors": [
            {
                "name": "BasicSpinnerUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createEditor()",
                "description": "This method is called by installUI to get the editor component\n of the JSpinner.",
                "modAndType": "protected JComponent"
            },
            {
                "name": "createLayout()",
                "description": "Creates a LayoutManager that manages the editor,\n nextButton, and previousButton\n children of the JSpinner.",
                "modAndType": "protected LayoutManager"
            },
            {
                "name": "createNextButton()",
                "description": "Creates an increment button, i.e.",
                "modAndType": "protected Component"
            },
            {
                "name": "createPreviousButton()",
                "description": "Creates a decrement button, i.e.",
                "modAndType": "protected Component"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates a PropertyChangeListener that can be\n added to the JSpinner itself.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "Returns a new instance of BasicSpinnerUI.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "installDefaults()",
                "description": "Initialize the JSpinner border,\n foreground, and background, properties\n based on the corresponding \"Spinner.*\" properties from defaults table.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "Installs the keyboard Actions onto the JSpinner.",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Initializes PropertyChangeListener with\n a shared object that delegates interesting PropertyChangeEvents\n to protected methods.",
                "modAndType": "protected void"
            },
            {
                "name": "installNextButtonListeners(Component c)",
                "description": "Installs the necessary listeners on the next button, c,\n to update the JSpinner in response to a user gesture.",
                "modAndType": "protected void"
            },
            {
                "name": "installPreviousButtonListeners(Component c)",
                "description": "Installs the necessary listeners on the previous button, c,\n to update the JSpinner in response to a user gesture.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Calls installDefaults, installListeners,\n and then adds the components returned by createNextButton,\n createPreviousButton, and createEditor.",
                "modAndType": "void"
            },
            {
                "name": "replaceEditor(JComponent oldEditor,\n             JComponent newEditor)",
                "description": "Called by the PropertyChangeListener when the\n JSpinner editor property changes.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "Sets the JSpinner's layout manager to null.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Removes the PropertyChangeListener added\n by installListeners.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Calls uninstallDefaults, uninstallListeners,\n and then removes all of the spinners children.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicSpinnerUI.html"
    },
    {
        "name": "BasicSplitPaneDivider",
        "constructors": [
            {
                "name": "BasicSplitPaneDivider(BasicSplitPaneUI ui)",
                "description": "Creates an instance of BasicSplitPaneDivider."
            }
        ],
        "methods": [
            {
                "name": "createLeftOneTouchButton()",
                "description": "Creates and return an instance of JButton that can be used to\n collapse the left component in the split pane.",
                "modAndType": "protected JButton"
            },
            {
                "name": "createRightOneTouchButton()",
                "description": "Creates and return an instance of JButton that can be used to\n collapse the right component in the split pane.",
                "modAndType": "protected JButton"
            },
            {
                "name": "dragDividerTo(int location)",
                "description": "Messages the BasicSplitPaneUI with dragDividerTo that this instance\n is contained in.",
                "modAndType": "protected void"
            },
            {
                "name": "finishDraggingTo(int location)",
                "description": "Messages the BasicSplitPaneUI with finishDraggingTo that this instance\n is contained in.",
                "modAndType": "protected void"
            },
            {
                "name": "getBasicSplitPaneUI()",
                "description": "Returns the SplitPaneUI the receiver is currently\n in.",
                "modAndType": "BasicSplitPaneUI"
            },
            {
                "name": "getBorder()",
                "description": "Returns the border of this component or null if no border is\n currently set.",
                "modAndType": "Border"
            },
            {
                "name": "getDividerSize()",
                "description": "Returns the size of the divider, that is the width if the splitpane\n is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT.",
                "modAndType": "int"
            },
            {
                "name": "getInsets()",
                "description": "If a border has been set on this component, returns the\n border's insets, else calls super.getInsets.",
                "modAndType": "Insets"
            },
            {
                "name": "getMinimumSize()",
                "description": "Returns dividerSize x dividerSize",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize()",
                "description": "Returns dividerSize x dividerSize",
                "modAndType": "Dimension"
            },
            {
                "name": "isMouseOver()",
                "description": "Returns whether or not the mouse is currently over the divider",
                "modAndType": "boolean"
            },
            {
                "name": "oneTouchExpandableChanged()",
                "description": "Messaged when the oneTouchExpandable value of the JSplitPane the\n receiver is contained in changes.",
                "modAndType": "protected void"
            },
            {
                "name": "paint(Graphics g)",
                "description": "Paints the divider.",
                "modAndType": "void"
            },
            {
                "name": "prepareForDragging()",
                "description": "Message to prepare for dragging.",
                "modAndType": "protected void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent e)",
                "description": "Property change event, presumably from the JSplitPane, will message\n updateOrientation if necessary.",
                "modAndType": "void"
            },
            {
                "name": "setBasicSplitPaneUI(BasicSplitPaneUI newUI)",
                "description": "Sets the SplitPaneUI that is using the receiver.",
                "modAndType": "void"
            },
            {
                "name": "setBorder(Border border)",
                "description": "Sets the border of this component.",
                "modAndType": "void"
            },
            {
                "name": "setDividerSize(int newSize)",
                "description": "Sets the size of the divider to newSize.",
                "modAndType": "void"
            },
            {
                "name": "setMouseOver(boolean mouseOver)",
                "description": "Sets whether or not the mouse is currently over the divider.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicSplitPaneDivider.html"
    },
    {
        "name": "BasicSplitPaneUI",
        "constructors": [
            {
                "name": "BasicSplitPaneUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createDefaultDivider()",
                "description": "Creates the default divider.",
                "modAndType": "BasicSplitPaneDivider"
            },
            {
                "name": "createDefaultNonContinuousLayoutDivider()",
                "description": "Returns the default non continuous layout divider, which is an\n instance of Canvas that fills in the background with dark gray.",
                "modAndType": "protected Component"
            },
            {
                "name": "createFocusListener()",
                "description": "Creates a FocusListener for the JSplitPane UI.",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createKeyboardDownRightListener()",
                "description": "Deprecated. \nAs of Java 2 platform v1.3.\n",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createKeyboardEndListener()",
                "description": "Deprecated. \nAs of Java 2 platform v1.3.\n",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createKeyboardHomeListener()",
                "description": "Deprecated. \nAs of Java 2 platform v1.3.\n",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createKeyboardResizeToggleListener()",
                "description": "Deprecated. \nAs of Java 2 platform v1.3.\n",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createKeyboardUpLeftListener()",
                "description": "Deprecated. \nAs of Java 2 platform v1.3.\n",
                "modAndType": "protected ActionListener"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates a PropertyChangeListener for the JSplitPane UI.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createUI(JComponent x)",
                "description": "Creates a new BasicSplitPaneUI instance",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "dragDividerTo(int location)",
                "description": "Messaged during a dragging session to move the divider to the\n passed in location.",
                "modAndType": "protected void"
            },
            {
                "name": "finishDraggingTo(int location)",
                "description": "Messaged to finish the dragging session.",
                "modAndType": "protected void"
            },
            {
                "name": "finishedPaintingChildren(JSplitPane sp,\n                        Graphics g)",
                "description": "Called when the specified split pane has finished painting\n its children.",
                "modAndType": "void"
            },
            {
                "name": "getDivider()",
                "description": "Returns the divider between the top Components.",
                "modAndType": "BasicSplitPaneDivider"
            },
            {
                "name": "getDividerBorderSize()",
                "description": "Deprecated. \nAs of Java 2 platform v1.3, instead set the border on the\n divider.\n",
                "modAndType": "protected int"
            },
            {
                "name": "getDividerLocation(JSplitPane jc)",
                "description": "Returns the location of the divider, which may differ from what\n the splitpane thinks the location of the divider is.",
                "modAndType": "int"
            },
            {
                "name": "getInsets(JComponent jc)",
                "description": "Returns the insets.",
                "modAndType": "Insets"
            },
            {
                "name": "getLastDragLocation()",
                "description": "Returns the last drag location of the JSplitPane.",
                "modAndType": "int"
            },
            {
                "name": "getMaximumDividerLocation(JSplitPane jc)",
                "description": "Gets the maximum location of the divider.",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSize(JComponent jc)",
                "description": "Returns the maximum size for the passed in component,\n This is passed off to the current layout manager.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumDividerLocation(JSplitPane jc)",
                "description": "Gets the minimum location of the divider.",
                "modAndType": "int"
            },
            {
                "name": "getMinimumSize(JComponent jc)",
                "description": "Returns the minimum size for the passed in component,\n This is passed off to the current layout manager.",
                "modAndType": "Dimension"
            },
            {
                "name": "getNonContinuousLayoutDivider()",
                "description": "Returns the divider to use when the splitPane is configured to\n not continuously layout.",
                "modAndType": "Component"
            },
            {
                "name": "getOrientation()",
                "description": "Returns the orientation for the JSplitPane.",
                "modAndType": "int"
            },
            {
                "name": "getPreferredSize(JComponent jc)",
                "description": "Returns the preferred size for the passed in component,\n This is passed off to the current layout manager.",
                "modAndType": "Dimension"
            },
            {
                "name": "getSplitPane()",
                "description": "Returns the splitpane this instance is currently contained\n in.",
                "modAndType": "JSplitPane"
            },
            {
                "name": "installDefaults()",
                "description": "Installs the UI defaults.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "Installs the keyboard actions for the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Installs the event listeners for the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Installs the UI.",
                "modAndType": "void"
            },
            {
                "name": "isContinuousLayout()",
                "description": "Determines whether the JSplitPane is set to use a continuous layout.",
                "modAndType": "boolean"
            },
            {
                "name": "paint(Graphics g,\n     JComponent jc)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "resetLayoutManager()",
                "description": "Resets the layout manager based on orientation and messages it\n with invalidateLayout to pull in appropriate Components.",
                "modAndType": "protected void"
            },
            {
                "name": "resetToPreferredSizes(JSplitPane jc)",
                "description": "Messaged to reset the preferred sizes.",
                "modAndType": "void"
            },
            {
                "name": "setContinuousLayout(boolean b)",
                "description": "Turn continuous layout on/off.",
                "modAndType": "void"
            },
            {
                "name": "setDividerLocation(JSplitPane jc,\n                  int location)",
                "description": "Sets the location of the divider to location.",
                "modAndType": "void"
            },
            {
                "name": "setLastDragLocation(int l)",
                "description": "Set the last drag location of the JSplitPane.",
                "modAndType": "void"
            },
            {
                "name": "setNonContinuousLayoutDivider(Component newDivider)",
                "description": "Sets the divider to use when the splitPane is configured to\n not continuously layout.",
                "modAndType": "protected void"
            },
            {
                "name": "setNonContinuousLayoutDivider(Component newDivider,\n                             boolean rememberSizes)",
                "description": "Sets the divider to use.",
                "modAndType": "protected void"
            },
            {
                "name": "setOrientation(int orientation)",
                "description": "Set the orientation for the JSplitPane.",
                "modAndType": "void"
            },
            {
                "name": "startDragging()",
                "description": "Should be messaged before the dragging session starts, resets\n lastDragLocation and dividerSize.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "Uninstalls the UI defaults.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "Uninstalls the keyboard actions for the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Uninstalls the event listeners for the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Uninstalls the UI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicSplitPaneUI.html"
    },
    {
        "name": "BasicStroke",
        "constructors": [
            {
                "name": "BasicStroke()",
                "description": "Constructs a new BasicStroke with defaults for all\n attributes."
            },
            {
                "name": "BasicStroke(float width)",
                "description": "Constructs a solid BasicStroke with the specified\n line width and with default values for the cap and join\n styles."
            },
            {
                "name": "BasicStroke(float width,\n           int cap,\n           int join)",
                "description": "Constructs a solid BasicStroke with the specified\n attributes."
            },
            {
                "name": "BasicStroke(float width,\n           int cap,\n           int join,\n           float miterlimit)",
                "description": "Constructs a solid BasicStroke with the specified\n attributes."
            },
            {
                "name": "BasicStroke(float width,\n           int cap,\n           int join,\n           float miterlimit,\n           float[] dash,\n           float dash_phase)",
                "description": "Constructs a new BasicStroke with the specified\n attributes."
            }
        ],
        "methods": [
            {
                "name": "createStrokedShape(Shape s)",
                "description": "Returns a Shape whose interior defines the\n stroked outline of a specified Shape.",
                "modAndType": "Shape"
            },
            {
                "name": "equals(Object obj)",
                "description": "Tests if a specified object is equal to this BasicStroke\n by first testing if it is a BasicStroke and then comparing\n its width, join, cap, miter limit, dash, and dash phase attributes with\n those of this BasicStroke.",
                "modAndType": "boolean"
            },
            {
                "name": "getDashArray()",
                "description": "Returns the array representing the lengths of the dash segments.",
                "modAndType": "float[]"
            },
            {
                "name": "getDashPhase()",
                "description": "Returns the current dash phase.",
                "modAndType": "float"
            },
            {
                "name": "getEndCap()",
                "description": "Returns the end cap style.",
                "modAndType": "int"
            },
            {
                "name": "getLineJoin()",
                "description": "Returns the line join style.",
                "modAndType": "int"
            },
            {
                "name": "getLineWidth()",
                "description": "Returns the line width.",
                "modAndType": "float"
            },
            {
                "name": "getMiterLimit()",
                "description": "Returns the limit of miter joins.",
                "modAndType": "float"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hashcode for this stroke.",
                "modAndType": "int"
            }
        ],
        "href": "java/awt/BasicStroke.html"
    },
    {
        "name": "BasicTabbedPaneUI",
        "constructors": [
            {
                "name": "BasicTabbedPaneUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "assureRectsCreated(int tabCount)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "calculateMaxTabHeight(int tabPlacement)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "calculateMaxTabWidth(int tabPlacement)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "calculateTabAreaHeight(int tabPlacement,\n                      int horizRunCount,\n                      int maxTabHeight)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "calculateTabAreaWidth(int tabPlacement,\n                     int vertRunCount,\n                     int maxTabWidth)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "calculateTabHeight(int tabPlacement,\n                  int tabIndex,\n                  int fontHeight)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "calculateTabWidth(int tabPlacement,\n                 int tabIndex,\n                 FontMetrics metrics)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "createChangeListener()",
                "description": "",
                "modAndType": "protected ChangeListener"
            },
            {
                "name": "createFocusListener()",
                "description": "",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createLayoutManager()",
                "description": "Invoked by installUI to create\n a layout manager object to manage\n the JTabbedPane.",
                "modAndType": "protected LayoutManager"
            },
            {
                "name": "createMouseListener()",
                "description": "",
                "modAndType": "protected MouseListener"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createScrollButton(int direction)",
                "description": "Creates and returns a JButton that will provide the user\n with a way to scroll the tabs in a particular direction.",
                "modAndType": "protected JButton"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "expandTabRunsArray()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "getBaseline(int tab)",
                "description": "Returns the baseline for the specified tab.",
                "modAndType": "protected int"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineOffset()",
                "description": "Returns the amount the baseline is offset by.",
                "modAndType": "protected int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getContentBorderInsets(int tabPlacement)",
                "description": "",
                "modAndType": "protected Insets"
            },
            {
                "name": "getFocusIndex()",
                "description": "Returns the index of the tab that has focus.",
                "modAndType": "protected int"
            },
            {
                "name": "getFontMetrics()",
                "description": "",
                "modAndType": "protected FontMetrics"
            },
            {
                "name": "getIconForTab(int tabIndex)",
                "description": "",
                "modAndType": "protected Icon"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getNextTabIndex(int base)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getNextTabIndexInRun(int tabCount,\n                    int base)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getNextTabRun(int baseRun)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getPreviousTabIndex(int base)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getPreviousTabIndexInRun(int tabCount,\n                        int base)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getPreviousTabRun(int baseRun)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getRolloverTab()",
                "description": "Returns the tab the mouse is currently over, or -1 if the mouse is no\n longer over any tab.",
                "modAndType": "protected int"
            },
            {
                "name": "getRunForTab(int tabCount,\n            int tabIndex)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getSelectedTabPadInsets(int tabPlacement)",
                "description": "",
                "modAndType": "protected Insets"
            },
            {
                "name": "getTabAreaInsets(int tabPlacement)",
                "description": "",
                "modAndType": "protected Insets"
            },
            {
                "name": "getTabBounds(int tabIndex,\n            Rectangle dest)",
                "description": "Returns the bounds of the specified tab in the coordinate space\n of the JTabbedPane component.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "getTabBounds(JTabbedPane pane,\n            int i)",
                "description": "Returns the bounds of the specified tab index.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getTabInsets(int tabPlacement,\n            int tabIndex)",
                "description": "",
                "modAndType": "protected Insets"
            },
            {
                "name": "getTabLabelShiftX(int tabPlacement,\n                 int tabIndex,\n                 boolean isSelected)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getTabLabelShiftY(int tabPlacement,\n                 int tabIndex,\n                 boolean isSelected)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getTabRunCount(JTabbedPane pane)",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getTabRunIndent(int tabPlacement,\n               int run)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getTabRunOffset(int tabPlacement,\n               int tabCount,\n               int tabIndex,\n               boolean forward)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getTabRunOverlay(int tabPlacement)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getTextViewForTab(int tabIndex)",
                "description": "Returns the text View object required to render stylized text (HTML) for\n the specified tab or null if no specialized text rendering is needed\n for this tab.",
                "modAndType": "protected View"
            },
            {
                "name": "getVisibleComponent()",
                "description": "",
                "modAndType": "protected Component"
            },
            {
                "name": "installComponents()",
                "description": "Creates and installs any required subcomponents for the JTabbedPane.",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "lastTabInRun(int tabCount,\n            int run)",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "layoutLabel(int tabPlacement,\n           FontMetrics metrics,\n           int tabIndex,\n           String title,\n           Icon icon,\n           Rectangle tabRect,\n           Rectangle iconRect,\n           Rectangle textRect,\n           boolean isSelected)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "navigateSelectedTab(int direction)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintContentBorder(Graphics g,\n                  int tabPlacement,\n                  int selectedIndex)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintContentBorderBottomEdge(Graphics g,\n                            int tabPlacement,\n                            int selectedIndex,\n                            int x,\n                            int y,\n                            int w,\n                            int h)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintContentBorderLeftEdge(Graphics g,\n                          int tabPlacement,\n                          int selectedIndex,\n                          int x,\n                          int y,\n                          int w,\n                          int h)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintContentBorderRightEdge(Graphics g,\n                           int tabPlacement,\n                           int selectedIndex,\n                           int x,\n                           int y,\n                           int w,\n                           int h)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintContentBorderTopEdge(Graphics g,\n                         int tabPlacement,\n                         int selectedIndex,\n                         int x,\n                         int y,\n                         int w,\n                         int h)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintFocusIndicator(Graphics g,\n                   int tabPlacement,\n                   Rectangle[] rects,\n                   int tabIndex,\n                   Rectangle iconRect,\n                   Rectangle textRect,\n                   boolean isSelected)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintIcon(Graphics g,\n         int tabPlacement,\n         int tabIndex,\n         Icon icon,\n         Rectangle iconRect,\n         boolean isSelected)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintTab(Graphics g,\n        int tabPlacement,\n        Rectangle[] rects,\n        int tabIndex,\n        Rectangle iconRect,\n        Rectangle textRect)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintTabArea(Graphics g,\n            int tabPlacement,\n            int selectedIndex)",
                "description": "Paints the tabs in the tab area.",
                "modAndType": "protected void"
            },
            {
                "name": "paintTabBackground(Graphics g,\n                  int tabPlacement,\n                  int tabIndex,\n                  int x,\n                  int y,\n                  int w,\n                  int h,\n                  boolean isSelected)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintTabBorder(Graphics g,\n              int tabPlacement,\n              int tabIndex,\n              int x,\n              int y,\n              int w,\n              int h,\n              boolean isSelected)",
                "description": "this function draws the border around each tab\n note that this function does now draw the background of the tab.",
                "modAndType": "protected void"
            },
            {
                "name": "paintText(Graphics g,\n         int tabPlacement,\n         Font font,\n         FontMetrics metrics,\n         int tabIndex,\n         String title,\n         Rectangle textRect,\n         boolean isSelected)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "rotateInsets(Insets topInsets,\n            Insets targetInsets,\n            int targetPlacement)",
                "description": "",
                "modAndType": "protected static void"
            },
            {
                "name": "selectAdjacentRunTab(int tabPlacement,\n                    int tabIndex,\n                    int offset)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "selectNextTab(int current)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "selectNextTabInRun(int current)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "selectPreviousTab(int current)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "selectPreviousTabInRun(int current)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setRolloverTab(int index)",
                "description": "Sets the tab the mouse is currently over to index.",
                "modAndType": "protected void"
            },
            {
                "name": "setVisibleComponent(Component component)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "shouldPadTabRun(int tabPlacement,\n               int run)",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "shouldRotateTabRuns(int tabPlacement)",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "tabForCoordinate(JTabbedPane pane,\n                int x,\n                int y)",
                "description": "Returns the tab index which intersects the specified point\n in the JTabbedPane's coordinate space.",
                "modAndType": "int"
            },
            {
                "name": "uninstallComponents()",
                "description": "Removes any installed subcomponents from the JTabbedPane.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTabbedPaneUI.html"
    },
    {
        "name": "BasicTableHeaderUI",
        "constructors": [
            {
                "name": "BasicTableHeaderUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createMouseInputListener()",
                "description": "Creates the mouse listener for the JTableHeader.",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createUI(JComponent h)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Return the maximum size of the header.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Return the minimum size of the header.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Return the preferred size of the header.",
                "modAndType": "Dimension"
            },
            {
                "name": "getRolloverColumn()",
                "description": "Returns the index of the column header over which the mouse\n currently is.",
                "modAndType": "protected int"
            },
            {
                "name": "installDefaults()",
                "description": "Initializes JTableHeader properties such as font, foreground, and background.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "Register all keyboard actions on the JTableHeader.",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Attaches listeners to the JTableHeader.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "rolloverColumnUpdated(int oldColumn,\n                     int newColumn)",
                "description": "This method gets called every time when a rollover column in the table\n header is updated.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "Unregisters default key actions.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTableHeaderUI.html"
    },
    {
        "name": "BasicTableUI",
        "constructors": [
            {
                "name": "BasicTableUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createFocusListener()",
                "description": "Creates the focus listener for handling keyboard navigation in the JTable.",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createKeyListener()",
                "description": "Creates the key listener for handling keyboard navigation in the JTable.",
                "modAndType": "protected KeyListener"
            },
            {
                "name": "createMouseInputListener()",
                "description": "Creates the mouse listener for the JTable.",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Return the maximum size of the table.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Return the minimum size of the table.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Return the preferred size of the table.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults()",
                "description": "Initialize JTable properties, e.g.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "Register all keyboard actions on the JTable.",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Attaches listeners to the JTable.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paint a representation of the table instance\n that was set in installUI().",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTableUI.html"
    },
    {
        "name": "BasicTextAreaUI",
        "constructors": [
            {
                "name": "BasicTextAreaUI()",
                "description": "Constructs a new BasicTextAreaUI object."
            }
        ],
        "methods": [
            {
                "name": "create(Element elem)",
                "description": "Creates the view for an element.",
                "modAndType": "View"
            },
            {
                "name": "createUI(JComponent ta)",
                "description": "Creates a UI for a JTextArea.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "The method is overridden to take into account caret width.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "The method is overridden to take into account caret width.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Fetches the name used as a key to look up properties through the\n UIManager.",
                "modAndType": "protected String"
            },
            {
                "name": "installDefaults()",
                "description": "Initializes component properties, such as font, foreground,\n background, caret color, selection color, selected text color,\n disabled text color, and border color.",
                "modAndType": "protected void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent evt)",
                "description": "This method gets called when a bound property is changed\n on the associated JTextComponent.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTextAreaUI.html"
    },
    {
        "name": "BasicTextFieldUI",
        "constructors": [
            {
                "name": "BasicTextFieldUI()",
                "description": "Creates a new BasicTextFieldUI."
            }
        ],
        "methods": [
            {
                "name": "create(Element elem)",
                "description": "Creates a view (FieldView) based on an element.",
                "modAndType": "View"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "Creates a UI for a JTextField.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Fetches the name used as a key to lookup properties through the\n UIManager.",
                "modAndType": "protected String"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTextFieldUI.html"
    },
    {
        "name": "BasicTextPaneUI",
        "constructors": [
            {
                "name": "BasicTextPaneUI()",
                "description": "Creates a new BasicTextPaneUI."
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "Creates a UI for the JTextPane.",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Fetches the name used as a key to lookup properties through the\n UIManager.",
                "modAndType": "protected String"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Installs the UI for a component.",
                "modAndType": "void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent evt)",
                "description": "This method gets called when a bound property is changed\n on the associated JTextComponent.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTextPaneUI.html"
    },
    {
        "name": "BasicTextUI",
        "constructors": [
            {
                "name": "BasicTextUI()",
                "description": "Creates a new UI."
            }
        ],
        "methods": [
            {
                "name": "create(Element elem)",
                "description": "Creates a view for an element.",
                "modAndType": "View"
            },
            {
                "name": "create(Element elem,\n      int p0,\n      int p1)",
                "description": "Creates a view for an element.",
                "modAndType": "View"
            },
            {
                "name": "createCaret()",
                "description": "Creates the object to use for a caret.",
                "modAndType": "protected Caret"
            },
            {
                "name": "createHighlighter()",
                "description": "Creates the object to use for adding highlights.",
                "modAndType": "protected Highlighter"
            },
            {
                "name": "createKeymap()",
                "description": "Creates the keymap to use for the text component, and installs\n any necessary bindings into it.",
                "modAndType": "protected Keymap"
            },
            {
                "name": "damageRange(JTextComponent tc,\n           int p0,\n           int p1)",
                "description": "Causes the portion of the view responsible for the\n given part of the model to be repainted.",
                "modAndType": "void"
            },
            {
                "name": "damageRange(JTextComponent t,\n           int p0,\n           int p1,\n           Position.Bias p0Bias,\n           Position.Bias p1Bias)",
                "description": "Causes the portion of the view responsible for the\n given part of the model to be repainted.",
                "modAndType": "void"
            },
            {
                "name": "getComponent()",
                "description": "Fetches the text component associated with this\n UI implementation.",
                "modAndType": "protected JTextComponent"
            },
            {
                "name": "getEditorKit(JTextComponent tc)",
                "description": "Fetches the EditorKit for the UI.",
                "modAndType": "EditorKit"
            },
            {
                "name": "getKeymapName()",
                "description": "Fetches the name of the keymap that will be installed/used\n by default for this UI.",
                "modAndType": "protected String"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Gets the maximum size for the editor component.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Gets the minimum size for the editor component.",
                "modAndType": "Dimension"
            },
            {
                "name": "getNextVisualPositionFrom(JTextComponent t,\n                         int pos,\n                         Position.Bias b,\n                         int direction,\n                         Position.Bias[] biasRet)",
                "description": "Provides a way to determine the next visually represented model\n location that one might place a caret.",
                "modAndType": "int"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Gets the preferred size for the editor component.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "Gets the name used as a key to look up properties through the\n UIManager.",
                "modAndType": "protected abstract String"
            },
            {
                "name": "getRootView(JTextComponent tc)",
                "description": "Fetches a View with the allocation of the associated\n text component (i.e.",
                "modAndType": "View"
            },
            {
                "name": "getToolTipText(JTextComponent t,\n              Point pt)",
                "description": "Returns the string to be used as the tooltip at the passed in location.",
                "modAndType": "String"
            },
            {
                "name": "getVisibleEditorRect()",
                "description": "Gets the allocation to give the root View.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "installDefaults()",
                "description": "Initializes component properties, such as font, foreground,\n background, caret color, selection color, selected text color,\n disabled text color, and border color.",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "Installs listeners for the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Installs the UI for a component.",
                "modAndType": "void"
            },
            {
                "name": "modelChanged()",
                "description": "Flags model changes.",
                "modAndType": "protected void"
            },
            {
                "name": "modelToView(JTextComponent tc,\n           int pos)",
                "description": "Converts the given location in the model to a place in\n the view coordinate system.",
                "modAndType": "Rectangle"
            },
            {
                "name": "modelToView(JTextComponent tc,\n           int pos,\n           Position.Bias bias)",
                "description": "Converts the given location in the model to a place in\n the view coordinate system.",
                "modAndType": "Rectangle"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the interface.",
                "modAndType": "void"
            },
            {
                "name": "paintBackground(Graphics g)",
                "description": "Paints a background for the view.",
                "modAndType": "protected void"
            },
            {
                "name": "paintSafely(Graphics g)",
                "description": "Paints the interface safely with a guarantee that\n the model won't change from the view of this thread.",
                "modAndType": "protected void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent evt)",
                "description": "This method gets called when a bound property is changed\n on the associated JTextComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "setView(View v)",
                "description": "Sets the current root of the view hierarchy and calls invalidate().",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "Sets the component properties that have not been explicitly overridden\n to null.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "Uninstalls listeners for the UI.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Deinstalls the UI for a component.",
                "modAndType": "void"
            },
            {
                "name": "update(Graphics g,\n      JComponent c)",
                "description": "Superclass paints background in an uncontrollable way\n (i.e.",
                "modAndType": "void"
            },
            {
                "name": "viewToModel(JTextComponent tc,\n           Point pt)",
                "description": "Converts the given place in the view coordinate system\n to the nearest representative location in the model.",
                "modAndType": "int"
            },
            {
                "name": "viewToModel(JTextComponent tc,\n           Point pt,\n           Position.Bias[] biasReturn)",
                "description": "Converts the given place in the view coordinate system\n to the nearest representative location in the model.",
                "modAndType": "int"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTextUI.html"
    },
    {
        "name": "BasicTextUI.BasicCaret",
        "constructors": [
            {
                "name": "BasicCaret()",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/basic/BasicTextUI.BasicCaret.html"
    },
    {
        "name": "BasicTextUI.BasicHighlighter",
        "constructors": [
            {
                "name": "BasicHighlighter()",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/basic/BasicTextUI.BasicHighlighter.html"
    },
    {
        "name": "BasicToggleButtonUI",
        "constructors": [
            {
                "name": "BasicToggleButtonUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent b)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPropertyPrefix()",
                "description": "",
                "modAndType": "protected String"
            },
            {
                "name": "getTextShiftOffset()",
                "description": "Overriden so that the text will not be rendered as shifted for\n Toggle buttons and subclasses.",
                "modAndType": "protected int"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintIcon(Graphics g,\n         AbstractButton b,\n         Rectangle iconRect)",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicToggleButtonUI.html"
    },
    {
        "name": "BasicToolBarSeparatorUI",
        "constructors": [
            {
                "name": "BasicToolBarSeparatorUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults(JSeparator s)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicToolBarSeparatorUI.html"
    },
    {
        "name": "BasicToolBarUI",
        "constructors": [
            {
                "name": "BasicToolBarUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "canDock(Component c,\n       Point p)",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "createDockingListener()",
                "description": "",
                "modAndType": "protected MouseInputListener"
            },
            {
                "name": "createDragWindow(JToolBar toolbar)",
                "description": "",
                "modAndType": "protected BasicToolBarUI.DragWindow"
            },
            {
                "name": "createFloatingFrame(JToolBar toolbar)",
                "description": "No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)",
                "modAndType": "protected JFrame"
            },
            {
                "name": "createFloatingWindow(JToolBar toolbar)",
                "description": "Creates a window which contains the toolbar after it has been\n dragged out from its container",
                "modAndType": "protected RootPaneContainer"
            },
            {
                "name": "createFrameListener()",
                "description": "",
                "modAndType": "protected WindowListener"
            },
            {
                "name": "createNonRolloverBorder()",
                "description": "Creates the non rollover border for toolbar components.",
                "modAndType": "protected Border"
            },
            {
                "name": "createPropertyListener()",
                "description": "",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createRolloverBorder()",
                "description": "Creates a rollover border for toolbar components.",
                "modAndType": "protected Border"
            },
            {
                "name": "createToolBarContListener()",
                "description": "",
                "modAndType": "protected ContainerListener"
            },
            {
                "name": "createToolBarFocusListener()",
                "description": "",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "dragTo(Point position,\n      Point origin)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "floatAt(Point position,\n       Point origin)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "getDockingColor()",
                "description": "Gets the color displayed when over a docking area",
                "modAndType": "Color"
            },
            {
                "name": "getFloatingColor()",
                "description": "Gets the color displayed when over a floating area",
                "modAndType": "Color"
            },
            {
                "name": "getNonRolloverBorder(AbstractButton b)",
                "description": "Returns a non-rollover border for the button.",
                "modAndType": "protected Border"
            },
            {
                "name": "getRolloverBorder(AbstractButton b)",
                "description": "Returns a rollover border for the button.",
                "modAndType": "protected Border"
            },
            {
                "name": "installComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installNonRolloverBorders(JComponent c)",
                "description": "Installs non-rollover borders on all the child components of the JComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "installNormalBorders(JComponent c)",
                "description": "Installs normal borders on all the child components of the JComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "installRolloverBorders(JComponent c)",
                "description": "Installs rollover borders on all the child components of the JComponent.",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isFloating()",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "isRolloverBorders()",
                "description": "Returns a flag to determine whether rollover button borders\n are enabled.",
                "modAndType": "boolean"
            },
            {
                "name": "navigateFocusedComp(int direction)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintDragWindow(Graphics g)",
                "description": "Paints the contents of the window used for dragging.",
                "modAndType": "protected void"
            },
            {
                "name": "setBorderToNonRollover(Component c)",
                "description": "Sets the border of the component to have a non-rollover border which\n was created by the createNonRolloverBorder() method.",
                "modAndType": "protected void"
            },
            {
                "name": "setBorderToNormal(Component c)",
                "description": "Sets the border of the component to have a normal border.",
                "modAndType": "protected void"
            },
            {
                "name": "setBorderToRollover(Component c)",
                "description": "Sets the border of the component to have a rollover border which\n was created by the createRolloverBorder() method.",
                "modAndType": "protected void"
            },
            {
                "name": "setDockingColor(Color c)",
                "description": "Sets the color displayed when over a docking area",
                "modAndType": "void"
            },
            {
                "name": "setFloating(boolean b,\n           Point p)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setFloatingColor(Color c)",
                "description": "Sets the color displayed when over a floating area",
                "modAndType": "void"
            },
            {
                "name": "setFloatingLocation(int x,\n                   int y)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setOrientation(int orientation)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setRolloverBorders(boolean rollover)",
                "description": "Sets the flag for enabling rollover borders on the toolbar and it will\n also install the appropriate border depending on the state of the flag.",
                "modAndType": "void"
            },
            {
                "name": "uninstallComponents()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicToolBarUI.html"
    },
    {
        "name": "BasicToolTipUI",
        "constructors": [
            {
                "name": "BasicToolTipUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the specified component's maximum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the specified component's minimum size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the specified component's preferred size appropriate for\n the look and feel.",
                "modAndType": "Dimension"
            },
            {
                "name": "installDefaults(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicToolTipUI.html"
    },
    {
        "name": "BasicTreeUI",
        "constructors": [
            {
                "name": "BasicTreeUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "cancelEditing(JTree tree)",
                "description": "Cancels the current editing session.",
                "modAndType": "void"
            },
            {
                "name": "checkForClickInExpandControl(TreePath path,\n                            int mouseX,\n                            int mouseY)",
                "description": "If the mouseX and mouseY are in the\n expand/collapse region of the row, this will toggle\n the row.",
                "modAndType": "protected void"
            },
            {
                "name": "completeEditing()",
                "description": "Messages to stop the editing session.",
                "modAndType": "protected void"
            },
            {
                "name": "completeEditing(boolean messageStop,\n               boolean messageCancel,\n               boolean messageTree)",
                "description": "Stops the editing session.",
                "modAndType": "protected void"
            },
            {
                "name": "completeUIInstall()",
                "description": "Invoked from installUI after all the defaults/listeners have been\n installed.",
                "modAndType": "protected void"
            },
            {
                "name": "completeUIUninstall()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "configureLayoutCache()",
                "description": "Resets the TreeState instance based on the tree we're providing the\n look and feel for.",
                "modAndType": "protected void"
            },
            {
                "name": "createCellEditorListener()",
                "description": "Creates a listener to handle events from the current editor.",
                "modAndType": "protected CellEditorListener"
            },
            {
                "name": "createCellRendererPane()",
                "description": "Returns the renderer pane that renderer components are placed in.",
                "modAndType": "protected CellRendererPane"
            },
            {
                "name": "createComponentListener()",
                "description": "Creates and returns a new ComponentHandler.",
                "modAndType": "protected ComponentListener"
            },
            {
                "name": "createDefaultCellEditor()",
                "description": "Creates a default cell editor.",
                "modAndType": "protected TreeCellEditor"
            },
            {
                "name": "createDefaultCellRenderer()",
                "description": "Returns the default cell renderer that is used to do the\n stamping of each node.",
                "modAndType": "protected TreeCellRenderer"
            },
            {
                "name": "createFocusListener()",
                "description": "Creates a listener that is responsible for updating the display\n when focus is lost/gained.",
                "modAndType": "protected FocusListener"
            },
            {
                "name": "createKeyListener()",
                "description": "Creates the listener reponsible for getting key events from\n the tree.",
                "modAndType": "protected KeyListener"
            },
            {
                "name": "createLayoutCache()",
                "description": "Creates the object responsible for managing what is expanded, as\n well as the size of nodes.",
                "modAndType": "protected AbstractLayoutCache"
            },
            {
                "name": "createMouseListener()",
                "description": "Creates the listener responsible for updating the selection based on\n mouse events.",
                "modAndType": "protected MouseListener"
            },
            {
                "name": "createNodeDimensions()",
                "description": "Creates an instance of NodeDimensions that is able to determine\n the size of a given node in the tree.",
                "modAndType": "protected AbstractLayoutCache.NodeDimensions"
            },
            {
                "name": "createPropertyChangeListener()",
                "description": "Creates a listener that is responsible that updates the UI based on\n how the tree changes.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createSelectionModelPropertyChangeListener()",
                "description": "Creates the listener responsible for getting property change\n events from the selection model.",
                "modAndType": "protected PropertyChangeListener"
            },
            {
                "name": "createTreeExpansionListener()",
                "description": "Creates and returns the object responsible for updating the treestate\n when nodes expanded state changes.",
                "modAndType": "protected TreeExpansionListener"
            },
            {
                "name": "createTreeModelListener()",
                "description": "Returns a listener that can update the tree when the model changes.",
                "modAndType": "protected TreeModelListener"
            },
            {
                "name": "createTreeSelectionListener()",
                "description": "Creates the listener that updates the display based on selection change\n methods.",
                "modAndType": "protected TreeSelectionListener"
            },
            {
                "name": "createUI(JComponent x)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "drawCentered(Component c,\n            Graphics graphics,\n            Icon icon,\n            int x,\n            int y)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "drawDashedHorizontalLine(Graphics g,\n                        int y,\n                        int x1,\n                        int x2)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "drawDashedVerticalLine(Graphics g,\n                      int x,\n                      int y1,\n                      int y2)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "ensureRowsAreVisible(int beginRow,\n                    int endRow)",
                "description": "Ensures that the rows identified by beginRow through endRow are\n visible.",
                "modAndType": "protected void"
            },
            {
                "name": "getBaseline(JComponent c,\n           int width,\n           int height)",
                "description": "Returns the baseline.",
                "modAndType": "int"
            },
            {
                "name": "getBaselineResizeBehavior(JComponent c)",
                "description": "Returns an enum indicating how the baseline of the component\n changes as the size changes.",
                "modAndType": "Component.BaselineResizeBehavior"
            },
            {
                "name": "getCellEditor()",
                "description": "",
                "modAndType": "protected TreeCellEditor"
            },
            {
                "name": "getCellRenderer()",
                "description": "Return currentCellRenderer, which will either be the trees\n renderer, or defaultCellRenderer, which ever wasn't null.",
                "modAndType": "protected TreeCellRenderer"
            },
            {
                "name": "getClosestPathForLocation(JTree tree,\n                         int x,\n                         int y)",
                "description": "Returns the path to the node that is closest to x,y.",
                "modAndType": "TreePath"
            },
            {
                "name": "getCollapsedIcon()",
                "description": "",
                "modAndType": "Icon"
            },
            {
                "name": "getDropLineRect(JTree.DropLocation loc)",
                "description": "Returns a unbounding box for the drop line.",
                "modAndType": "protected Rectangle"
            },
            {
                "name": "getEditingPath(JTree tree)",
                "description": "Returns the path to the element that is being edited.",
                "modAndType": "TreePath"
            },
            {
                "name": "getExpandedIcon()",
                "description": "",
                "modAndType": "Icon"
            },
            {
                "name": "getHashColor()",
                "description": "",
                "modAndType": "protected Color"
            },
            {
                "name": "getHorizontalLegBuffer()",
                "description": "The horizontal element of legs between nodes starts at the\n right of the left-hand side of the child node by default.",
                "modAndType": "protected int"
            },
            {
                "name": "getLastChildPath(TreePath parent)",
                "description": "Returns a path to the last child of parent.",
                "modAndType": "protected TreePath"
            },
            {
                "name": "getLeadSelectionRow()",
                "description": "Returns the lead row of the selection.",
                "modAndType": "protected int"
            },
            {
                "name": "getLeftChildIndent()",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSize(JComponent c)",
                "description": "Returns the maximum size for this component, which will be the\n preferred size if the instance is currently in a JTree, or 0, 0.",
                "modAndType": "Dimension"
            },
            {
                "name": "getMinimumSize(JComponent c)",
                "description": "Returns the minimum size for this component.",
                "modAndType": "Dimension"
            },
            {
                "name": "getModel()",
                "description": "",
                "modAndType": "protected TreeModel"
            },
            {
                "name": "getPathBounds(JTree tree,\n             TreePath path)",
                "description": "Returns the Rectangle enclosing the label portion that the\n last item in path will be drawn into.",
                "modAndType": "Rectangle"
            },
            {
                "name": "getPathForRow(JTree tree,\n             int row)",
                "description": "Returns the path for passed in row.",
                "modAndType": "TreePath"
            },
            {
                "name": "getPreferredMinSize()",
                "description": "Returns the minimum preferred size.",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c)",
                "description": "Returns the preferred size to properly display the tree,\n this is a cover method for getPreferredSize(c, true).",
                "modAndType": "Dimension"
            },
            {
                "name": "getPreferredSize(JComponent c,\n                boolean checkConsistency)",
                "description": "Returns the preferred size to represent the tree in\n c.",
                "modAndType": "Dimension"
            },
            {
                "name": "getRightChildIndent()",
                "description": "",
                "modAndType": "int"
            },
            {
                "name": "getRowCount(JTree tree)",
                "description": "Returns the number of rows that are being displayed.",
                "modAndType": "int"
            },
            {
                "name": "getRowForPath(JTree tree,\n             TreePath path)",
                "description": "Returns the row that the last item identified in path is visible\n at.",
                "modAndType": "int"
            },
            {
                "name": "getRowHeight()",
                "description": "",
                "modAndType": "protected int"
            },
            {
                "name": "getRowX(int row,\n       int depth)",
                "description": "Returns the location, along the x-axis, to render a particular row\n at.",
                "modAndType": "protected int"
            },
            {
                "name": "getSelectionModel()",
                "description": "",
                "modAndType": "protected TreeSelectionModel"
            },
            {
                "name": "getShowsRootHandles()",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "getVerticalLegBuffer()",
                "description": "The vertical element of legs between nodes starts at the bottom of the\n parent node by default.",
                "modAndType": "protected int"
            },
            {
                "name": "handleExpandControlClick(TreePath path,\n                        int mouseX,\n                        int mouseY)",
                "description": "Messaged when the user clicks the particular row, this invokes\n toggleExpandState.",
                "modAndType": "protected void"
            },
            {
                "name": "installComponents()",
                "description": "Intalls the subcomponents of the tree, which is the renderer pane.",
                "modAndType": "protected void"
            },
            {
                "name": "installDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "isDropLine(JTree.DropLocation loc)",
                "description": "Tells if a DropLocation should be indicated by a line between\n nodes.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isEditable()",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "isEditing(JTree tree)",
                "description": "Returns true if the tree is being edited.",
                "modAndType": "boolean"
            },
            {
                "name": "isLargeModel()",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "isLeaf(int row)",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "isLocationInExpandControl(TreePath path,\n                         int mouseX,\n                         int mouseY)",
                "description": "Returns true if mouseX and mouseY fall\n in the area of row that is used to expand/collapse the node and\n the node at row does not represent a leaf.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isMultiSelectEvent(MouseEvent event)",
                "description": "Returning true signifies a mouse event on the node should select\n from the anchor point.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isRootVisible()",
                "description": "",
                "modAndType": "protected boolean"
            },
            {
                "name": "isToggleEvent(MouseEvent event)",
                "description": "Returning true indicates the row under the mouse should be toggled\n based on the event.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isToggleSelectionEvent(MouseEvent event)",
                "description": "Returning true signifies a mouse event on the node should toggle\n the selection of only the row under mouse.",
                "modAndType": "protected boolean"
            },
            {
                "name": "paint(Graphics g,\n     JComponent c)",
                "description": "Paints the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "paintDropLine(Graphics g)",
                "description": "Paints the drop line.",
                "modAndType": "protected void"
            },
            {
                "name": "paintExpandControl(Graphics g,\n                  Rectangle clipBounds,\n                  Insets insets,\n                  Rectangle bounds,\n                  TreePath path,\n                  int row,\n                  boolean isExpanded,\n                  boolean hasBeenExpanded,\n                  boolean isLeaf)",
                "description": "Paints the expand (toggle) part of a row.",
                "modAndType": "protected void"
            },
            {
                "name": "paintHorizontalLine(Graphics g,\n                   JComponent c,\n                   int y,\n                   int left,\n                   int right)",
                "description": "Paints a horizontal line.",
                "modAndType": "protected void"
            },
            {
                "name": "paintHorizontalPartOfLeg(Graphics g,\n                        Rectangle clipBounds,\n                        Insets insets,\n                        Rectangle bounds,\n                        TreePath path,\n                        int row,\n                        boolean isExpanded,\n                        boolean hasBeenExpanded,\n                        boolean isLeaf)",
                "description": "Paints the horizontal part of the leg.",
                "modAndType": "protected void"
            },
            {
                "name": "paintRow(Graphics g,\n        Rectangle clipBounds,\n        Insets insets,\n        Rectangle bounds,\n        TreePath path,\n        int row,\n        boolean isExpanded,\n        boolean hasBeenExpanded,\n        boolean isLeaf)",
                "description": "Paints the renderer part of a row.",
                "modAndType": "protected void"
            },
            {
                "name": "paintVerticalLine(Graphics g,\n                 JComponent c,\n                 int x,\n                 int top,\n                 int bottom)",
                "description": "Paints a vertical line.",
                "modAndType": "protected void"
            },
            {
                "name": "paintVerticalPartOfLeg(Graphics g,\n                      Rectangle clipBounds,\n                      Insets insets,\n                      TreePath path)",
                "description": "Paints the vertical part of the leg.",
                "modAndType": "protected void"
            },
            {
                "name": "pathWasCollapsed(TreePath path)",
                "description": "Messaged from the VisibleTreeNode after it has collapsed.",
                "modAndType": "protected void"
            },
            {
                "name": "pathWasExpanded(TreePath path)",
                "description": "Messaged from the VisibleTreeNode after it has been expanded.",
                "modAndType": "protected void"
            },
            {
                "name": "prepareForUIInstall()",
                "description": "Invoked after the tree instance variable has been\n set, but before any defaults/listeners have been installed.",
                "modAndType": "protected void"
            },
            {
                "name": "prepareForUIUninstall()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "selectPathForEvent(TreePath path,\n                  MouseEvent event)",
                "description": "Messaged to update the selection based on a MouseEvent over a\n particular row.",
                "modAndType": "protected void"
            },
            {
                "name": "setCellEditor(TreeCellEditor editor)",
                "description": "Sets the cell editor.",
                "modAndType": "protected void"
            },
            {
                "name": "setCellRenderer(TreeCellRenderer tcr)",
                "description": "Sets the TreeCellRenderer to tcr.",
                "modAndType": "protected void"
            },
            {
                "name": "setCollapsedIcon(Icon newG)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setEditable(boolean newValue)",
                "description": "Configures the receiver to allow, or not allow, editing.",
                "modAndType": "protected void"
            },
            {
                "name": "setExpandedIcon(Icon newG)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setHashColor(Color color)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "setLargeModel(boolean largeModel)",
                "description": "Updates the componentListener, if necessary.",
                "modAndType": "protected void"
            },
            {
                "name": "setLeftChildIndent(int newAmount)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setModel(TreeModel model)",
                "description": "Sets the TreeModel.",
                "modAndType": "protected void"
            },
            {
                "name": "setPreferredMinSize(Dimension newSize)",
                "description": "Sets the preferred minimum size.",
                "modAndType": "void"
            },
            {
                "name": "setRightChildIndent(int newAmount)",
                "description": "",
                "modAndType": "void"
            },
            {
                "name": "setRootVisible(boolean newValue)",
                "description": "Sets the root to being visible.",
                "modAndType": "protected void"
            },
            {
                "name": "setRowHeight(int rowHeight)",
                "description": "Sets the row height, this is forwarded to the treeState.",
                "modAndType": "protected void"
            },
            {
                "name": "setSelectionModel(TreeSelectionModel newLSM)",
                "description": "Resets the selection model.",
                "modAndType": "protected void"
            },
            {
                "name": "setShowsRootHandles(boolean newValue)",
                "description": "Determines whether the node handles are to be displayed.",
                "modAndType": "protected void"
            },
            {
                "name": "shouldPaintExpandControl(TreePath path,\n                        int row,\n                        boolean isExpanded,\n                        boolean hasBeenExpanded,\n                        boolean isLeaf)",
                "description": "Returns true if the expand (toggle) control should be drawn for\n the specified row.",
                "modAndType": "protected boolean"
            },
            {
                "name": "startEditing(TreePath path,\n            MouseEvent event)",
                "description": "Will start editing for node if there is a cellEditor and\n shouldSelectCell returns true.",
                "modAndType": "protected boolean"
            },
            {
                "name": "startEditingAtPath(JTree tree,\n                  TreePath path)",
                "description": "Selects the last item in path and tries to edit it.",
                "modAndType": "void"
            },
            {
                "name": "stopEditing(JTree tree)",
                "description": "Stops the current editing session.",
                "modAndType": "boolean"
            },
            {
                "name": "toggleExpandState(TreePath path)",
                "description": "Expands path if it is not expanded, or collapses row if it is expanded.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallComponents()",
                "description": "Uninstalls the renderer pane.",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallDefaults()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallKeyboardActions()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallListeners()",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            },
            {
                "name": "updateCachedPreferredSize()",
                "description": "Updates the preferredSize instance variable,\n which is returned from getPreferredSize().",
                "modAndType": "protected void"
            },
            {
                "name": "updateCellEditor()",
                "description": "Updates the cellEditor based on the editability of the JTree that\n we're contained in.",
                "modAndType": "protected void"
            },
            {
                "name": "updateDepthOffset()",
                "description": "Updates how much each depth should be offset by.",
                "modAndType": "protected void"
            },
            {
                "name": "updateExpandedDescendants(TreePath path)",
                "description": "Updates the expanded state of all the descendants of path\n by getting the expanded descendants from the tree and forwarding\n to the tree state.",
                "modAndType": "protected void"
            },
            {
                "name": "updateLayoutCacheExpandedNodes()",
                "description": "Makes all the nodes that are expanded in JTree expanded in LayoutCache.",
                "modAndType": "protected void"
            },
            {
                "name": "updateLeadSelectionRow()",
                "description": "Updates the lead row of the selection.",
                "modAndType": "protected void"
            },
            {
                "name": "updateRenderer()",
                "description": "Messaged from the tree we're in when the renderer has changed.",
                "modAndType": "protected void"
            },
            {
                "name": "updateSize()",
                "description": "Marks the cached size as being invalid, and messages the\n tree with treeDidChange.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicTreeUI.html"
    },
    {
        "name": "BasicViewportUI",
        "constructors": [
            {
                "name": "BasicViewportUI()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "createUI(JComponent c)",
                "description": "",
                "modAndType": "static ComponentUI"
            },
            {
                "name": "installDefaults(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "installUI(JComponent c)",
                "description": "Configures the specified component appropriately for the look and feel.",
                "modAndType": "void"
            },
            {
                "name": "uninstallDefaults(JComponent c)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "uninstallUI(JComponent c)",
                "description": "Reverses configuration which was done on the specified component during\n installUI.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/basic/BasicViewportUI.html"
    },
    {
        "name": "BatchUpdateException",
        "constructors": [
            {
                "name": "BatchUpdateException()",
                "description": "Constructs a BatchUpdateException object."
            },
            {
                "name": "BatchUpdateException(int[] updateCounts)",
                "description": "Constructs a BatchUpdateException object initialized with a given\n updateCounts."
            },
            {
                "name": "BatchUpdateException(int[] updateCounts,\n                    Throwable cause)",
                "description": "Constructs a BatchUpdateException object initialized with a\n given cause and updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    int[] updateCounts)",
                "description": "Constructs a BatchUpdateException object initialized with a given\n reason and updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    int[] updateCounts,\n                    Throwable cause)",
                "description": "Constructs a BatchUpdateException object initialized with\n a given reason, cause\n and updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    String SQLState,\n                    int[] updateCounts)",
                "description": "Constructs a BatchUpdateException object initialized with a given\n reason, SQLState and\n updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    String SQLState,\n                    int[] updateCounts,\n                    Throwable cause)",
                "description": "Constructs a BatchUpdateException object initialized with\n a given reason, SQLState,cause, and\n updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    String SQLState,\n                    int vendorCode,\n                    int[] updateCounts)",
                "description": "Constructs a BatchUpdateException object initialized with a given\n reason, SQLState, vendorCode and\n updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    String SQLState,\n                    int vendorCode,\n                    int[] updateCounts,\n                    Throwable cause)",
                "description": "Constructs a BatchUpdateException object initialized with\n a given reason, SQLState, vendorCode\n cause and updateCounts."
            },
            {
                "name": "BatchUpdateException(String reason,\n                    String SQLState,\n                    int vendorCode,\n                    long[] updateCounts,\n                    Throwable cause)",
                "description": "Constructs a BatchUpdateException object initialized with\n a given reason, SQLState, vendorCode\n cause and updateCounts."
            },
            {
                "name": "BatchUpdateException(Throwable cause)",
                "description": "Constructs a BatchUpdateException object initialized with\n  a given cause."
            }
        ],
        "methods": [
            {
                "name": "getLargeUpdateCounts()",
                "description": "Retrieves the update count for each update statement in the batch\n update that executed successfully before this exception occurred.",
                "modAndType": "long[]"
            },
            {
                "name": "getUpdateCounts()",
                "description": "Retrieves the update count for each update statement in the batch\n update that executed successfully before this exception occurred.",
                "modAndType": "int[]"
            }
        ],
        "href": "java/sql/BatchUpdateException.html"
    },
    {
        "name": "BeanContext",
        "constructors": [],
        "methods": [
            {
                "name": "addBeanContextMembershipListener(BeanContextMembershipListener bcml)",
                "description": "Adds the specified BeanContextMembershipListener\n to receive BeanContextMembershipEvents from\n this BeanContext whenever it adds\n or removes a child Component(s).",
                "modAndType": "void"
            },
            {
                "name": "getResource(String name,\n           BeanContextChild bcc)",
                "description": "Analagous to java.lang.ClassLoader.getResource(), this\n method allows a BeanContext implementation to interpose\n behavior between the child Component\n and underlying ClassLoader.",
                "modAndType": "URL"
            },
            {
                "name": "getResourceAsStream(String name,\n                   BeanContextChild bcc)",
                "description": "Analagous to java.lang.ClassLoader.getResourceAsStream(),\n this method allows a BeanContext implementation\n to interpose behavior between the child Component\n and underlying ClassLoader.",
                "modAndType": "InputStream"
            },
            {
                "name": "instantiateChild(String beanName)",
                "description": "Instantiate the javaBean named as a\n child of this BeanContext.",
                "modAndType": "Object"
            },
            {
                "name": "removeBeanContextMembershipListener(BeanContextMembershipListener bcml)",
                "description": "Removes the specified BeanContextMembershipListener\n so that it no longer receives BeanContextMembershipEvents\n when the child Component(s) are added or removed.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContext.html"
    },
    {
        "name": "BeanContextChild",
        "constructors": [],
        "methods": [
            {
                "name": "addPropertyChangeListener(String name,\n                         PropertyChangeListener pcl)",
                "description": "Adds a PropertyChangeListener\n to this BeanContextChild\n in order to receive a PropertyChangeEvent\n whenever the specified property has changed.",
                "modAndType": "void"
            },
            {
                "name": "addVetoableChangeListener(String name,\n                         VetoableChangeListener vcl)",
                "description": "Adds a VetoableChangeListener to\n this BeanContextChild\n to receive events whenever the specified property changes.",
                "modAndType": "void"
            },
            {
                "name": "getBeanContext()",
                "description": "Gets the BeanContext associated\n with this BeanContextChild.",
                "modAndType": "BeanContext"
            },
            {
                "name": "removePropertyChangeListener(String name,\n                            PropertyChangeListener pcl)",
                "description": "Removes a PropertyChangeListener from this\n BeanContextChild  so that it no longer\n receives PropertyChangeEvents when the\n specified property is changed.",
                "modAndType": "void"
            },
            {
                "name": "removeVetoableChangeListener(String name,\n                            VetoableChangeListener vcl)",
                "description": "Removes a VetoableChangeListener from this\n BeanContextChild so that it no longer receives\n events when the specified property changes.",
                "modAndType": "void"
            },
            {
                "name": "setBeanContext(BeanContext bc)",
                "description": "\n Objects that implement this interface,\n shall fire a java.beans.PropertyChangeEvent, with parameters:\n\n propertyName \"beanContext\", oldValue (the previous nesting\n BeanContext instance, or null),\n newValue (the current nesting\n BeanContext instance, or null).",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextChild.html"
    },
    {
        "name": "BeanContextChildComponentProxy",
        "constructors": [],
        "methods": [
            {
                "name": "getComponent()",
                "description": "Gets the java.awt.Component associated with\n this BeanContextChild.",
                "modAndType": "Component"
            }
        ],
        "href": "java/beans/beancontext/BeanContextChildComponentProxy.html"
    },
    {
        "name": "BeanContextChildSupport",
        "constructors": [
            {
                "name": "BeanContextChildSupport()",
                "description": "construct a BeanContextChildSupport where this class has been\n subclassed in order to implement the JavaBean component itself."
            },
            {
                "name": "BeanContextChildSupport(BeanContextChild bcc)",
                "description": "construct a BeanContextChildSupport where the JavaBean component\n itself implements BeanContextChild, and encapsulates this, delegating\n that interface to this implementation"
            }
        ],
        "methods": [
            {
                "name": "addPropertyChangeListener(String name,\n                         PropertyChangeListener pcl)",
                "description": "Add a PropertyChangeListener for a specific property.",
                "modAndType": "void"
            },
            {
                "name": "addVetoableChangeListener(String name,\n                         VetoableChangeListener vcl)",
                "description": "Add a VetoableChangeListener for a specific property.",
                "modAndType": "void"
            },
            {
                "name": "firePropertyChange(String name,\n                  Object oldValue,\n                  Object newValue)",
                "description": "Report a bound property update to any registered listeners.",
                "modAndType": "void"
            },
            {
                "name": "fireVetoableChange(String name,\n                  Object oldValue,\n                  Object newValue)",
                "description": "Report a vetoable property update to any registered listeners.",
                "modAndType": "void"
            },
            {
                "name": "getBeanContext()",
                "description": "Gets the nesting BeanContext\n for this BeanContextChildSupport.",
                "modAndType": "BeanContext"
            },
            {
                "name": "getBeanContextChildPeer()",
                "description": "Gets the BeanContextChild associated with this\n BeanContextChildSupport.",
                "modAndType": "BeanContextChild"
            },
            {
                "name": "initializeBeanContextResources()",
                "description": "This method may be overridden by subclasses to provide their own\n initialization behaviors.",
                "modAndType": "protected void"
            },
            {
                "name": "isDelegated()",
                "description": "Reports whether or not this class is a delegate of another.",
                "modAndType": "boolean"
            },
            {
                "name": "releaseBeanContextResources()",
                "description": "This method may be overridden by subclasses to provide their own\n release behaviors.",
                "modAndType": "protected void"
            },
            {
                "name": "removePropertyChangeListener(String name,\n                            PropertyChangeListener pcl)",
                "description": "Remove a PropertyChangeListener for a specific property.",
                "modAndType": "void"
            },
            {
                "name": "removeVetoableChangeListener(String name,\n                            VetoableChangeListener vcl)",
                "description": "Removes a VetoableChangeListener.",
                "modAndType": "void"
            },
            {
                "name": "serviceAvailable(BeanContextServiceAvailableEvent bcsae)",
                "description": "A new service is available from the nesting BeanContext.",
                "modAndType": "void"
            },
            {
                "name": "serviceRevoked(BeanContextServiceRevokedEvent bcsre)",
                "description": "A service provided by the nesting BeanContext has been revoked.",
                "modAndType": "void"
            },
            {
                "name": "setBeanContext(BeanContext bc)",
                "description": "Sets the BeanContext for\n this BeanContextChildSupport.",
                "modAndType": "void"
            },
            {
                "name": "validatePendingSetBeanContext(BeanContext newValue)",
                "description": "Called from setBeanContext to validate (or otherwise) the\n pending change in the nesting BeanContext property value.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/beans/beancontext/BeanContextChildSupport.html"
    },
    {
        "name": "BeanContextContainerProxy",
        "constructors": [],
        "methods": [
            {
                "name": "getContainer()",
                "description": "Gets the java.awt.Container associated\n with this BeanContext.",
                "modAndType": "Container"
            }
        ],
        "href": "java/beans/beancontext/BeanContextContainerProxy.html"
    },
    {
        "name": "BeanContextEvent",
        "constructors": [
            {
                "name": "protected BeanContextEvent(BeanContext bc)",
                "description": "Contruct a BeanContextEvent"
            }
        ],
        "methods": [
            {
                "name": "getBeanContext()",
                "description": "Gets the BeanContext associated with this event.",
                "modAndType": "BeanContext"
            },
            {
                "name": "getPropagatedFrom()",
                "description": "Gets the BeanContext from which this event was propagated.",
                "modAndType": "BeanContext"
            },
            {
                "name": "isPropagated()",
                "description": "Reports whether or not this event is\n propagated from some other BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "setPropagatedFrom(BeanContext bc)",
                "description": "Sets the BeanContext from which this event was propagated.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextEvent.html"
    },
    {
        "name": "BeanContextMembershipEvent",
        "constructors": [
            {
                "name": "BeanContextMembershipEvent(BeanContext bc,\n                          Collection changes)",
                "description": "Contruct a BeanContextMembershipEvent"
            },
            {
                "name": "BeanContextMembershipEvent(BeanContext bc,\n                          Object[] changes)",
                "description": "Contruct a BeanContextMembershipEvent"
            }
        ],
        "methods": [
            {
                "name": "contains(Object child)",
                "description": "Is the child specified affected by the event?",
                "modAndType": "boolean"
            },
            {
                "name": "iterator()",
                "description": "Gets the array of children affected by this event.",
                "modAndType": "Iterator"
            },
            {
                "name": "size()",
                "description": "Gets the number of children affected by the notification.",
                "modAndType": "int"
            },
            {
                "name": "toArray()",
                "description": "Gets the array of children affected by this event.",
                "modAndType": "Object[]"
            }
        ],
        "href": "java/beans/beancontext/BeanContextMembershipEvent.html"
    },
    {
        "name": "BeanContextMembershipListener",
        "constructors": [],
        "methods": [
            {
                "name": "childrenAdded(BeanContextMembershipEvent bcme)",
                "description": "Called when a child or list of children is added to a\n BeanContext that this listener is registered with.",
                "modAndType": "void"
            },
            {
                "name": "childrenRemoved(BeanContextMembershipEvent bcme)",
                "description": "Called when a child or list of children is removed\n from a BeanContext that this listener\n is registered with.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextMembershipListener.html"
    },
    {
        "name": "BeanContextProxy",
        "constructors": [],
        "methods": [
            {
                "name": "getBeanContextProxy()",
                "description": "Gets the BeanContextChild (or subinterface)\n associated with this object.",
                "modAndType": "BeanContextChild"
            }
        ],
        "href": "java/beans/beancontext/BeanContextProxy.html"
    },
    {
        "name": "BeanContextServiceAvailableEvent",
        "constructors": [
            {
                "name": "BeanContextServiceAvailableEvent(BeanContextServices bcs,\n                                Class sc)",
                "description": "Construct a BeanContextAvailableServiceEvent."
            }
        ],
        "methods": [
            {
                "name": "getCurrentServiceSelectors()",
                "description": "Gets the list of service dependent selectors.",
                "modAndType": "Iterator"
            },
            {
                "name": "getServiceClass()",
                "description": "Gets the service class that is the subject of this notification.",
                "modAndType": "Class"
            },
            {
                "name": "getSourceAsBeanContextServices()",
                "description": "Gets the source as a reference of type BeanContextServices.",
                "modAndType": "BeanContextServices"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServiceAvailableEvent.html"
    },
    {
        "name": "BeanContextServiceProvider",
        "constructors": [],
        "methods": [
            {
                "name": "getCurrentServiceSelectors(BeanContextServices bcs,\n                          Class serviceClass)",
                "description": "Invoked by BeanContextServices, this method\n gets the current service selectors for the specified service.",
                "modAndType": "Iterator"
            },
            {
                "name": "getService(BeanContextServices bcs,\n          Object requestor,\n          Class serviceClass,\n          Object serviceSelector)",
                "description": "Invoked by BeanContextServices, this method\n requests an instance of a\n service from this BeanContextServiceProvider.",
                "modAndType": "Object"
            },
            {
                "name": "releaseService(BeanContextServices bcs,\n              Object requestor,\n              Object service)",
                "description": "Invoked by BeanContextServices,\n this method releases a nested BeanContextChild's\n (or any arbitrary object associated with a\n BeanContextChild) reference to the specified service.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServiceProvider.html"
    },
    {
        "name": "BeanContextServiceProviderBeanInfo",
        "constructors": [],
        "methods": [
            {
                "name": "getServicesBeanInfo()",
                "description": "Gets a BeanInfo array, one for each\n service class or interface statically available\n from this ServiceProvider.",
                "modAndType": "BeanInfo[]"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServiceProviderBeanInfo.html"
    },
    {
        "name": "BeanContextServiceRevokedEvent",
        "constructors": [
            {
                "name": "BeanContextServiceRevokedEvent(BeanContextServices bcs,\n                              Class sc,\n                              boolean invalidate)",
                "description": "Construct a BeanContextServiceEvent."
            }
        ],
        "methods": [
            {
                "name": "getServiceClass()",
                "description": "Gets the service class that is the subject of this notification",
                "modAndType": "Class"
            },
            {
                "name": "getSourceAsBeanContextServices()",
                "description": "Gets the source as a reference of type BeanContextServices",
                "modAndType": "BeanContextServices"
            },
            {
                "name": "isCurrentServiceInvalidNow()",
                "description": "Reports if the current service is being forcibly revoked,\n in which case the references are now invalidated and unusable.",
                "modAndType": "boolean"
            },
            {
                "name": "isServiceClass(Class service)",
                "description": "Checks this event to determine whether or not\n the service being revoked is of a particular class.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServiceRevokedEvent.html"
    },
    {
        "name": "BeanContextServiceRevokedListener",
        "constructors": [],
        "methods": [
            {
                "name": "serviceRevoked(BeanContextServiceRevokedEvent bcsre)",
                "description": "The service named has been revoked.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServiceRevokedListener.html"
    },
    {
        "name": "BeanContextServices",
        "constructors": [],
        "methods": [
            {
                "name": "addBeanContextServicesListener(BeanContextServicesListener bcsl)",
                "description": "Adds a BeanContextServicesListener to this BeanContext",
                "modAndType": "void"
            },
            {
                "name": "addService(Class serviceClass,\n          BeanContextServiceProvider serviceProvider)",
                "description": "Adds a service to this BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "getCurrentServiceClasses()",
                "description": "Gets the currently available services for this context.",
                "modAndType": "Iterator"
            },
            {
                "name": "getCurrentServiceSelectors(Class serviceClass)",
                "description": "Gets the list of service dependent service parameters\n (Service Selectors) for the specified service, by\n calling getCurrentServiceSelectors() on the\n underlying BeanContextServiceProvider.",
                "modAndType": "Iterator"
            },
            {
                "name": "getService(BeanContextChild child,\n          Object requestor,\n          Class serviceClass,\n          Object serviceSelector,\n          BeanContextServiceRevokedListener bcsrl)",
                "description": "A BeanContextChild, or any arbitrary object\n associated with a BeanContextChild, may obtain\n a reference to a currently registered service from its\n nesting BeanContextServices\n via invocation of this method.",
                "modAndType": "Object"
            },
            {
                "name": "hasService(Class serviceClass)",
                "description": "Reports whether or not a given service is\n currently available from this context.",
                "modAndType": "boolean"
            },
            {
                "name": "releaseService(BeanContextChild child,\n              Object requestor,\n              Object service)",
                "description": "Releases a BeanContextChild's\n (or any arbitrary object associated with a BeanContextChild)\n reference to the specified service by calling releaseService()\n on the underlying BeanContextServiceProvider.",
                "modAndType": "void"
            },
            {
                "name": "removeBeanContextServicesListener(BeanContextServicesListener bcsl)",
                "description": "Removes a BeanContextServicesListener\n from this BeanContext",
                "modAndType": "void"
            },
            {
                "name": "revokeService(Class serviceClass,\n             BeanContextServiceProvider serviceProvider,\n             boolean revokeCurrentServicesNow)",
                "description": "BeanContextServiceProviders wishing to remove\n a currently registered service from this context\n may do so via invocation of this method.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServices.html"
    },
    {
        "name": "BeanContextServicesListener",
        "constructors": [],
        "methods": [
            {
                "name": "serviceAvailable(BeanContextServiceAvailableEvent bcsae)",
                "description": "The service named has been registered.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServicesListener.html"
    },
    {
        "name": "BeanContextServicesSupport",
        "constructors": [
            {
                "name": "BeanContextServicesSupport()",
                "description": "Create an instance that is not a delegate of another object"
            },
            {
                "name": "BeanContextServicesSupport(BeanContextServices peer)",
                "description": "Create an instance with a peer"
            },
            {
                "name": "BeanContextServicesSupport(BeanContextServices peer,\n                          Locale lcle)",
                "description": "Create an instance using the specified locale"
            },
            {
                "name": "BeanContextServicesSupport(BeanContextServices peer,\n                          Locale lcle,\n                          boolean dtime)",
                "description": "Create an instance using the specified Locale and design mode."
            },
            {
                "name": "BeanContextServicesSupport(BeanContextServices peer,\n                          Locale lcle,\n                          boolean dTime,\n                          boolean visible)",
                "description": "\n Construct a BeanContextServicesSupport instance"
            }
        ],
        "methods": [
            {
                "name": "addBeanContextServicesListener(BeanContextServicesListener bcsl)",
                "description": "add a BeanContextServicesListener",
                "modAndType": "void"
            },
            {
                "name": "addService(Class serviceClass,\n          BeanContextServiceProvider bcsp)",
                "description": "add a service",
                "modAndType": "boolean"
            },
            {
                "name": "addService(Class serviceClass,\n          BeanContextServiceProvider bcsp,\n          boolean fireEvent)",
                "description": "add a service",
                "modAndType": "protected boolean"
            },
            {
                "name": "bcsPreDeserializationHook(ObjectInputStream ois)",
                "description": "called from BeanContextSupport readObject before it deserializes the\n children ...",
                "modAndType": "protected void"
            },
            {
                "name": "bcsPreSerializationHook(ObjectOutputStream oos)",
                "description": "called from BeanContextSupport writeObject before it serializes the\n children ...",
                "modAndType": "protected void"
            },
            {
                "name": "childJustRemovedHook(Object child,\n                    BeanContextSupport.BCSChild bcsc)",
                "description": "called from superclass child removal operations after a child\n has been successfully removed.",
                "modAndType": "protected void"
            },
            {
                "name": "createBCSChild(Object targetChild,\n              Object peer)",
                "description": "\n Subclasses can override this method to insert their own subclass\n of Child without having to override add() or the other Collection\n methods that add children to the set.",
                "modAndType": "protected BeanContextSupport.BCSChild"
            },
            {
                "name": "createBCSSServiceProvider(Class sc,\n                         BeanContextServiceProvider bcsp)",
                "description": "subclasses can override this method to create new subclasses of\n BCSSServiceProvider without having to override addService() in\n order to instantiate.",
                "modAndType": "protected BeanContextServicesSupport.BCSSServiceProvider"
            },
            {
                "name": "fireServiceAdded(BeanContextServiceAvailableEvent bcssae)",
                "description": "Fires a BeanContextServiceAvailableEvent indicating that a new\n service has become available.",
                "modAndType": "protected void"
            },
            {
                "name": "fireServiceAdded(Class serviceClass)",
                "description": "Fires a BeanContextServiceEvent notifying of a new service.",
                "modAndType": "protected void"
            },
            {
                "name": "fireServiceRevoked(BeanContextServiceRevokedEvent bcsre)",
                "description": "Fires a BeanContextServiceEvent notifying of a service being revoked.",
                "modAndType": "protected void"
            },
            {
                "name": "fireServiceRevoked(Class serviceClass,\n                  boolean revokeNow)",
                "description": "Fires a BeanContextServiceRevokedEvent\n indicating that a particular service is\n no longer available.",
                "modAndType": "protected void"
            },
            {
                "name": "getBeanContextServicesPeer()",
                "description": "Gets the BeanContextServices associated with this\n BeanContextServicesSupport.",
                "modAndType": "BeanContextServices"
            },
            {
                "name": "getChildBeanContextServicesListener(Object child)",
                "description": "Gets the BeanContextServicesListener (if any) of the specified\n child.",
                "modAndType": "protected static BeanContextServicesListener"
            },
            {
                "name": "getCurrentServiceClasses()",
                "description": "Gets the currently available services for this context.",
                "modAndType": "Iterator"
            },
            {
                "name": "getCurrentServiceSelectors(Class serviceClass)",
                "description": "Gets the list of service dependent service parameters\n (Service Selectors) for the specified service, by\n calling getCurrentServiceSelectors() on the\n underlying BeanContextServiceProvider.",
                "modAndType": "Iterator"
            },
            {
                "name": "getService(BeanContextChild child,\n          Object requestor,\n          Class serviceClass,\n          Object serviceSelector,\n          BeanContextServiceRevokedListener bcsrl)",
                "description": "obtain a service which may be delegated",
                "modAndType": "Object"
            },
            {
                "name": "hasService(Class serviceClass)",
                "description": "has a service, which may be delegated",
                "modAndType": "boolean"
            },
            {
                "name": "initialize()",
                "description": "called by BeanContextSupport superclass during construction and\n deserialization to initialize subclass transient state.",
                "modAndType": "void"
            },
            {
                "name": "initializeBeanContextResources()",
                "description": "called from setBeanContext to notify a BeanContextChild\n to allocate resources obtained from the nesting BeanContext.",
                "modAndType": "protected void"
            },
            {
                "name": "releaseBeanContextResources()",
                "description": "called from setBeanContext to notify a BeanContextChild\n to release resources obtained from the nesting BeanContext.",
                "modAndType": "protected void"
            },
            {
                "name": "releaseService(BeanContextChild child,\n              Object requestor,\n              Object service)",
                "description": "release a service",
                "modAndType": "void"
            },
            {
                "name": "removeBeanContextServicesListener(BeanContextServicesListener bcsl)",
                "description": "remove a BeanContextServicesListener",
                "modAndType": "void"
            },
            {
                "name": "revokeService(Class serviceClass,\n             BeanContextServiceProvider bcsp,\n             boolean revokeCurrentServicesNow)",
                "description": "remove a service",
                "modAndType": "void"
            },
            {
                "name": "serviceAvailable(BeanContextServiceAvailableEvent bcssae)",
                "description": "BeanContextServicesListener callback, propagates event to all\n currently registered listeners and BeanContextServices children,\n if this BeanContextService does not already implement this service\n itself.",
                "modAndType": "void"
            },
            {
                "name": "serviceRevoked(BeanContextServiceRevokedEvent bcssre)",
                "description": "BeanContextServicesListener callback, propagates event to all\n currently registered listeners and BeanContextServices children,\n if this BeanContextService does not already implement this service\n itself.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServicesSupport.html"
    },
    {
        "name": "BeanContextServicesSupport.BCSSServiceProvider",
        "constructors": [],
        "methods": [
            {
                "name": "getServiceProvider()",
                "description": "Returns the service provider.",
                "modAndType": "protected BeanContextServiceProvider"
            }
        ],
        "href": "java/beans/beancontext/BeanContextServicesSupport.BCSSServiceProvider.html"
    },
    {
        "name": "BeanContextSupport",
        "constructors": [
            {
                "name": "BeanContextSupport()",
                "description": "Create an instance that is not a delegate of another object"
            },
            {
                "name": "BeanContextSupport(BeanContext peer)",
                "description": "Create an instance using with a default locale"
            },
            {
                "name": "BeanContextSupport(BeanContext peer,\n                  Locale lcle)",
                "description": "Create an instance using the specified locale"
            },
            {
                "name": "BeanContextSupport(BeanContext peer,\n                  Locale lcle,\n                  boolean dtime)",
                "description": "Create an instance using the specified Locale and design mode."
            },
            {
                "name": "BeanContextSupport(BeanContext peer,\n                  Locale lcle,\n                  boolean dTime,\n                  boolean visible)",
                "description": "Construct a BeanContextSupport instance"
            }
        ],
        "methods": [
            {
                "name": "add(Object targetChild)",
                "description": "Adds/nests a child within this BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "addAll(Collection c)",
                "description": "add Collection to set of Children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field",
                "modAndType": "boolean"
            },
            {
                "name": "addBeanContextMembershipListener(BeanContextMembershipListener bcml)",
                "description": "Adds a BeanContextMembershipListener",
                "modAndType": "void"
            },
            {
                "name": "avoidingGui()",
                "description": "Used to determine if the BeanContext\n child is avoiding using its GUI.",
                "modAndType": "boolean"
            },
            {
                "name": "bcsChildren()",
                "description": "Returns an iterator of all children\n of this BeanContext.",
                "modAndType": "protected Iterator"
            },
            {
                "name": "bcsPreDeserializationHook(ObjectInputStream ois)",
                "description": "called by readObject after defaultReadObject() but prior to\n deserialization of any children.",
                "modAndType": "protected void"
            },
            {
                "name": "bcsPreSerializationHook(ObjectOutputStream oos)",
                "description": "called by writeObject after defaultWriteObject() but prior to\n serialization of currently serializable children.",
                "modAndType": "protected void"
            },
            {
                "name": "childDeserializedHook(Object child,\n                     BeanContextSupport.BCSChild bcsc)",
                "description": "Called by readObject with the newly deserialized child and BCSChild.",
                "modAndType": "protected void"
            },
            {
                "name": "childJustAddedHook(Object child,\n                  BeanContextSupport.BCSChild bcsc)",
                "description": "subclasses may override this method to simply extend add() semantics\n after the child has been added and before the event notification has\n occurred.",
                "modAndType": "protected void"
            },
            {
                "name": "childJustRemovedHook(Object child,\n                    BeanContextSupport.BCSChild bcsc)",
                "description": "subclasses may override this method to simply extend remove() semantics\n after the child has been removed and before the event notification has\n occurred.",
                "modAndType": "protected void"
            },
            {
                "name": "classEquals(Class first,\n           Class second)",
                "description": "Tests to see if two class objects,\n or their names are equal.",
                "modAndType": "protected static boolean"
            },
            {
                "name": "clear()",
                "description": "clear the children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field",
                "modAndType": "void"
            },
            {
                "name": "contains(Object o)",
                "description": "Determines whether or not the specified object\n is currently a child of this BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "containsAll(Collection c)",
                "description": "Tests to see if all objects in the\n specified Collection are children of\n this BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "containsKey(Object o)",
                "description": "Determines whether or not the specified object\n is currently a child of this BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "copyChildren()",
                "description": "Gets a copy of the this BeanContext's children.",
                "modAndType": "protected Object[]"
            },
            {
                "name": "createBCSChild(Object targetChild,\n              Object peer)",
                "description": "\n Subclasses can override this method to insert their own subclass\n of Child without having to override add() or the other Collection\n methods that add children to the set.",
                "modAndType": "protected BeanContextSupport.BCSChild"
            },
            {
                "name": "deserialize(ObjectInputStream ois,\n           Collection coll)",
                "description": "used by readObject to deserialize a collection.",
                "modAndType": "protected void"
            },
            {
                "name": "dontUseGui()",
                "description": "notify this instance that it may no longer render a GUI.",
                "modAndType": "void"
            },
            {
                "name": "fireChildrenAdded(BeanContextMembershipEvent bcme)",
                "description": "Fire a BeanContextshipEvent on the BeanContextMembershipListener interface",
                "modAndType": "protected void"
            },
            {
                "name": "fireChildrenRemoved(BeanContextMembershipEvent bcme)",
                "description": "Fire a BeanContextshipEvent on the BeanContextMembershipListener interface",
                "modAndType": "protected void"
            },
            {
                "name": "getBeanContextPeer()",
                "description": "Gets the instance of BeanContext that\n this object is providing the implementation for.",
                "modAndType": "BeanContext"
            },
            {
                "name": "getChildBeanContextChild(Object child)",
                "description": "Gets the BeanContextChild (if any) of the specified child",
                "modAndType": "protected static BeanContextChild"
            },
            {
                "name": "getChildBeanContextMembershipListener(Object child)",
                "description": "Gets the BeanContextMembershipListener\n (if any) of the specified child",
                "modAndType": "protected static BeanContextMembershipListener"
            },
            {
                "name": "getChildPropertyChangeListener(Object child)",
                "description": "Gets the PropertyChangeListener\n (if any) of the specified child",
                "modAndType": "protected static PropertyChangeListener"
            },
            {
                "name": "getChildSerializable(Object child)",
                "description": "Gets the Serializable (if any) associated with the specified Child",
                "modAndType": "protected static Serializable"
            },
            {
                "name": "getChildVetoableChangeListener(Object child)",
                "description": "Gets the VetoableChangeListener\n (if any) of the specified child",
                "modAndType": "protected static VetoableChangeListener"
            },
            {
                "name": "getChildVisibility(Object child)",
                "description": "Gets the Component (if any) associated with the specified child.",
                "modAndType": "protected static Visibility"
            },
            {
                "name": "getLocale()",
                "description": "Gets the locale for this BeanContext.",
                "modAndType": "Locale"
            },
            {
                "name": "getResource(String name,\n           BeanContextChild bcc)",
                "description": "Analagous to java.lang.ClassLoader.getResource(), this\n method allows a BeanContext implementation to interpose\n behavior between the child Component\n and underlying ClassLoader.",
                "modAndType": "URL"
            },
            {
                "name": "getResourceAsStream(String name,\n                   BeanContextChild bcc)",
                "description": "Analagous to java.lang.ClassLoader.getResourceAsStream(),\n this method allows a BeanContext implementation\n to interpose behavior between the child Component\n and underlying ClassLoader.",
                "modAndType": "InputStream"
            },
            {
                "name": "initialize()",
                "description": "protected method called from constructor and readObject to initialize\n transient state of BeanContextSupport instance.",
                "modAndType": "protected void"
            },
            {
                "name": "instantiateChild(String beanName)",
                "description": "\n The instantiateChild method is a convenience hook\n in BeanContext to simplify\n the task of instantiating a Bean, nested,\n into a BeanContext.",
                "modAndType": "Object"
            },
            {
                "name": "isDesignTime()",
                "description": "Reports whether or not this object is in\n currently in design time mode.",
                "modAndType": "boolean"
            },
            {
                "name": "isEmpty()",
                "description": "Reports whether or not this\n BeanContext is empty.",
                "modAndType": "boolean"
            },
            {
                "name": "isSerializing()",
                "description": "Is this BeanContext in the\n process of being serialized?",
                "modAndType": "boolean"
            },
            {
                "name": "iterator()",
                "description": "Gets all JavaBean or BeanContext instances\n currently nested in this BeanContext.",
                "modAndType": "Iterator"
            },
            {
                "name": "needsGui()",
                "description": "\n This method is typically called from the environment in order to determine\n if the implementor \"needs\" a GUI.",
                "modAndType": "boolean"
            },
            {
                "name": "okToUseGui()",
                "description": "Notify this instance that it may now render a GUI",
                "modAndType": "void"
            },
            {
                "name": "propertyChange(PropertyChangeEvent pce)",
                "description": "subclasses may envelope to monitor child property changes.",
                "modAndType": "void"
            },
            {
                "name": "readChildren(ObjectInputStream ois)",
                "description": "When an instance of this class is used as a delegate for the\n implementation of the BeanContext protocols (and its subprotocols)\n there exists a 'chicken and egg' problem during deserialization",
                "modAndType": "void"
            },
            {
                "name": "remove(Object targetChild)",
                "description": "Removes a child from this BeanContext.",
                "modAndType": "boolean"
            },
            {
                "name": "remove(Object targetChild,\n      boolean callChildSetBC)",
                "description": "internal remove used when removal caused by\n unexpected setBeanContext or\n by remove() invocation.",
                "modAndType": "protected boolean"
            },
            {
                "name": "removeAll(Collection c)",
                "description": "remove all specified children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field",
                "modAndType": "boolean"
            },
            {
                "name": "removeBeanContextMembershipListener(BeanContextMembershipListener bcml)",
                "description": "Removes a BeanContextMembershipListener",
                "modAndType": "void"
            },
            {
                "name": "retainAll(Collection c)",
                "description": "retain only specified children (Unsupported)\n implementations must synchronized on the hierarchy lock and \"children\" protected field",
                "modAndType": "boolean"
            },
            {
                "name": "serialize(ObjectOutputStream oos,\n         Collection coll)",
                "description": "Used by writeObject to serialize a Collection.",
                "modAndType": "protected void"
            },
            {
                "name": "setDesignTime(boolean dTime)",
                "description": "Sets the new design time value for this BeanContext.",
                "modAndType": "void"
            },
            {
                "name": "setLocale(Locale newLocale)",
                "description": "Sets the locale of this BeanContext.",
                "modAndType": "void"
            },
            {
                "name": "size()",
                "description": "Gets the number of children currently nested in\n this BeanContext.",
                "modAndType": "int"
            },
            {
                "name": "toArray()",
                "description": "Gets all JavaBean or BeanContext\n instances currently nested in this BeanContext.",
                "modAndType": "Object[]"
            },
            {
                "name": "toArray(Object[] arry)",
                "description": "Gets an array containing all children of\n this BeanContext that match\n the types contained in arry.",
                "modAndType": "Object[]"
            },
            {
                "name": "validatePendingAdd(Object targetChild)",
                "description": "\n Subclasses of this class may override, or envelope, this method to\n add validation behavior for the BeanContext to examine child objects\n immediately prior to their being added to the BeanContext.",
                "modAndType": "protected boolean"
            },
            {
                "name": "validatePendingRemove(Object targetChild)",
                "description": "\n Subclasses of this class may override, or envelope, this method to\n add validation behavior for the BeanContext to examine child objects\n immediately prior to their being removed from the BeanContext.",
                "modAndType": "protected boolean"
            },
            {
                "name": "vetoableChange(PropertyChangeEvent pce)",
                "description": "subclasses may envelope to monitor veto child property changes.",
                "modAndType": "void"
            },
            {
                "name": "writeChildren(ObjectOutputStream oos)",
                "description": "Used to serialize all children of\n this BeanContext.",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextSupport.html"
    },
    {
        "name": "BeanContextSupport.BCSIterator",
        "constructors": [],
        "methods": [
            {
                "name": "hasNext()",
                "description": "Returns true if the iteration has more elements.",
                "modAndType": "boolean"
            },
            {
                "name": "next()",
                "description": "Returns the next element in the iteration.",
                "modAndType": "Object"
            },
            {
                "name": "remove()",
                "description": "Removes from the underlying collection the last element returned\n by this iterator (optional operation).",
                "modAndType": "void"
            }
        ],
        "href": "java/beans/beancontext/BeanContextSupport.BCSIterator.html"
    },
    {
        "name": "BeanDescriptor",
        "constructors": [
            {
                "name": "BeanDescriptor(Class<?> beanClass)",
                "description": "Create a BeanDescriptor for a bean that doesn't have a customizer."
            },
            {
                "name": "BeanDescriptor(Class<?> beanClass,\n              Class<?> customizerClass)",
                "description": "Create a BeanDescriptor for a bean that has a customizer."
            }
        ],
        "methods": [
            {
                "name": "getBeanClass()",
                "description": "Gets the bean's Class object.",
                "modAndType": "Class<?>"
            },
            {
                "name": "getCustomizerClass()",
                "description": "Gets the Class object for the bean's customizer.",
                "modAndType": "Class<?>"
            }
        ],
        "href": "java/beans/BeanDescriptor.html"
    },
    {
        "name": "BeanInfo",
        "constructors": [],
        "methods": [
            {
                "name": "getAdditionalBeanInfo()",
                "description": "This method enables the current BeanInfo object\n to return an arbitrary collection of other BeanInfo objects\n that provide additional information about the current bean.",
                "modAndType": "BeanInfo[]"
            },
            {
                "name": "getBeanDescriptor()",
                "description": "Returns the bean descriptor\n that provides overall information about the bean,\n such as its display name or its customizer.",
                "modAndType": "BeanDescriptor"
            },
            {
                "name": "getDefaultEventIndex()",
                "description": "A bean may have a default event typically applied when this bean is used.",
                "modAndType": "int"
            },
            {
                "name": "getDefaultPropertyIndex()",
                "description": "A bean may have a default property commonly updated when this bean is customized.",
                "modAndType": "int"
            },
            {
                "name": "getEventSetDescriptors()",
                "description": "Returns the event descriptors of the bean\n that define the types of events fired by this bean.",
                "modAndType": "EventSetDescriptor[]"
            },
            {
                "name": "getIcon(int iconKind)",
                "description": "Returns an image that can be used to represent the bean in toolboxes or toolbars.",
                "modAndType": "Image"
            },
            {
                "name": "getMethodDescriptors()",
                "description": "Returns the method descriptors of the bean\n that define the externally visible methods supported by this bean.",
                "modAndType": "MethodDescriptor[]"
            },
            {
                "name": "getPropertyDescriptors()",
                "description": "Returns descriptors for all properties of the bean.",
                "modAndType": "PropertyDescriptor[]"
            }
        ],
        "href": "java/beans/BeanInfo.html"
    },
    {
        "name": "Beans",
        "constructors": [
            {
                "name": "Beans()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getInstanceOf(Object bean,\n             Class<?> targetType)",
                "description": "From a given bean, obtain an object representing a specified\n type view of that source object.",
                "modAndType": "static Object"
            },
            {
                "name": "instantiate(ClassLoader cls,\n           String beanName)",
                "description": "\n Instantiate a JavaBean.",
                "modAndType": "static Object"
            },
            {
                "name": "instantiate(ClassLoader cls,\n           String beanName,\n           BeanContext beanContext)",
                "description": "\n Instantiate a JavaBean.",
                "modAndType": "static Object"
            },
            {
                "name": "instantiate(ClassLoader cls,\n           String beanName,\n           BeanContext beanContext,\n           AppletInitializer initializer)",
                "description": "Instantiate a bean.",
                "modAndType": "static Object"
            },
            {
                "name": "isDesignTime()",
                "description": "Test if we are in design-mode.",
                "modAndType": "static boolean"
            },
            {
                "name": "isGuiAvailable()",
                "description": "Determines whether beans can assume a GUI is available.",
                "modAndType": "static boolean"
            },
            {
                "name": "isInstanceOf(Object bean,\n            Class<?> targetType)",
                "description": "Check if a bean can be viewed as a given target type.",
                "modAndType": "static boolean"
            },
            {
                "name": "setDesignTime(boolean isDesignTime)",
                "description": "Used to indicate whether of not we are running in an application\n builder environment.",
                "modAndType": "static void"
            },
            {
                "name": "setGuiAvailable(boolean isGuiAvailable)",
                "description": "Used to indicate whether of not we are running in an environment\n where GUI interaction is available.",
                "modAndType": "static void"
            }
        ],
        "href": "java/beans/Beans.html"
    },
    {
        "name": "BevelBorder",
        "constructors": [
            {
                "name": "BevelBorder(int bevelType)",
                "description": "Creates a bevel border with the specified type and whose\n colors will be derived from the background color of the\n component passed into the paintBorder method."
            },
            {
                "name": "BevelBorder(int bevelType,\n           Color highlight,\n           Color shadow)",
                "description": "Creates a bevel border with the specified type, highlight and\n shadow colors."
            },
            {
                "name": "BevelBorder(int bevelType,\n           Color highlightOuterColor,\n           Color highlightInnerColor,\n           Color shadowOuterColor,\n           Color shadowInnerColor)",
                "description": "Creates a bevel border with the specified type, highlight and\n shadow colors."
            }
        ],
        "methods": [
            {
                "name": "getBevelType()",
                "description": "Returns the type of the bevel border.",
                "modAndType": "int"
            },
            {
                "name": "getBorderInsets(Component c,\n               Insets insets)",
                "description": "Reinitialize the insets parameter with this Border's current Insets.",
                "modAndType": "Insets"
            },
            {
                "name": "getHighlightInnerColor()",
                "description": "Returns the inner highlight color of the bevel border.",
                "modAndType": "Color"
            },
            {
                "name": "getHighlightInnerColor(Component c)",
                "description": "Returns the inner highlight color of the bevel border\n when rendered on the specified component.",
                "modAndType": "Color"
            },
            {
                "name": "getHighlightOuterColor()",
                "description": "Returns the outer highlight color of the bevel border.",
                "modAndType": "Color"
            },
            {
                "name": "getHighlightOuterColor(Component c)",
                "description": "Returns the outer highlight color of the bevel border\n when rendered on the specified component.",
                "modAndType": "Color"
            },
            {
                "name": "getShadowInnerColor()",
                "description": "Returns the inner shadow color of the bevel border.",
                "modAndType": "Color"
            },
            {
                "name": "getShadowInnerColor(Component c)",
                "description": "Returns the inner shadow color of the bevel border\n when rendered on the specified component.",
                "modAndType": "Color"
            },
            {
                "name": "getShadowOuterColor()",
                "description": "Returns the outer shadow color of the bevel border.",
                "modAndType": "Color"
            },
            {
                "name": "getShadowOuterColor(Component c)",
                "description": "Returns the outer shadow color of the bevel border\n when rendered on the specified component.",
                "modAndType": "Color"
            },
            {
                "name": "isBorderOpaque()",
                "description": "Returns whether or not the border is opaque.",
                "modAndType": "boolean"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "Paints the border for the specified component with the specified\n position and size.",
                "modAndType": "void"
            },
            {
                "name": "paintLoweredBevel(Component c,\n                 Graphics g,\n                 int x,\n                 int y,\n                 int width,\n                 int height)",
                "description": "",
                "modAndType": "protected void"
            },
            {
                "name": "paintRaisedBevel(Component c,\n                Graphics g,\n                int x,\n                int y,\n                int width,\n                int height)",
                "description": "",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/border/BevelBorder.html"
    },
    {
        "name": "BiConsumer",
        "constructors": [],
        "methods": [
            {
                "name": "accept(T t,\n      U u)",
                "description": "Performs this operation on the given arguments.",
                "modAndType": "void"
            },
            {
                "name": "andThen(BiConsumer<? super T,? super U> after)",
                "description": "Returns a composed BiConsumer that performs, in sequence, this\n operation followed by the after operation.",
                "modAndType": "default BiConsumer<T,U>"
            }
        ],
        "href": "java/util/function/BiConsumer.html"
    },
    {
        "name": "Bidi",
        "constructors": [
            {
                "name": "Bidi(AttributedCharacterIterator paragraph)",
                "description": "Create Bidi from the given paragraph of text."
            },
            {
                "name": "Bidi(char[] text,\n    int textStart,\n    byte[] embeddings,\n    int embStart,\n    int paragraphLength,\n    int flags)",
                "description": "Create Bidi from the given text, embedding, and direction information."
            },
            {
                "name": "Bidi(String paragraph,\n    int flags)",
                "description": "Create Bidi from the given paragraph of text and base direction."
            }
        ],
        "methods": [
            {
                "name": "baseIsLeftToRight()",
                "description": "Return true if the base direction is left-to-right.",
                "modAndType": "boolean"
            },
            {
                "name": "createLineBidi(int lineStart,\n              int lineLimit)",
                "description": "Create a Bidi object representing the bidi information on a line of text within\n the paragraph represented by the current Bidi.",
                "modAndType": "Bidi"
            },
            {
                "name": "getBaseLevel()",
                "description": "Return the base level (0 if left-to-right, 1 if right-to-left).",
                "modAndType": "int"
            },
            {
                "name": "getLength()",
                "description": "Return the length of text in the line.",
                "modAndType": "int"
            },
            {
                "name": "getLevelAt(int offset)",
                "description": "Return the resolved level of the character at offset.",
                "modAndType": "int"
            },
            {
                "name": "getRunCount()",
                "description": "Return the number of level runs.",
                "modAndType": "int"
            },
            {
                "name": "getRunLevel(int run)",
                "description": "Return the level of the nth logical run in this line.",
                "modAndType": "int"
            },
            {
                "name": "getRunLimit(int run)",
                "description": "Return the index of the character past the end of the nth logical run in this line, as\n an offset from the start of the line.",
                "modAndType": "int"
            },
            {
                "name": "getRunStart(int run)",
                "description": "Return the index of the character at the start of the nth logical run in this line, as\n an offset from the start of the line.",
                "modAndType": "int"
            },
            {
                "name": "isLeftToRight()",
                "description": "Return true if the line is all left-to-right text and the base direction is left-to-right.",
                "modAndType": "boolean"
            },
            {
                "name": "isMixed()",
                "description": "Return true if the line is not left-to-right or right-to-left.",
                "modAndType": "boolean"
            },
            {
                "name": "isRightToLeft()",
                "description": "Return true if the line is all right-to-left text, and the base direction is right-to-left.",
                "modAndType": "boolean"
            },
            {
                "name": "reorderVisually(byte[] levels,\n               int levelStart,\n               Object[] objects,\n               int objectStart,\n               int count)",
                "description": "Reorder the objects in the array into visual order based on their levels.",
                "modAndType": "static void"
            },
            {
                "name": "requiresBidi(char[] text,\n            int start,\n            int limit)",
                "description": "Return true if the specified text requires bidi analysis.",
                "modAndType": "static boolean"
            },
            {
                "name": "toString()",
                "description": "Display the bidi internal state, used in debugging.",
                "modAndType": "String"
            }
        ],
        "href": "java/text/Bidi.html"
    },
    {
        "name": "BiFunction",
        "constructors": [],
        "methods": [
            {
                "name": "andThen(Function<? super R,? extends V> after)",
                "description": "Returns a composed function that first applies this function to\n its input, and then applies the after function to the result.",
                "modAndType": "default <V> BiFunction<T,U,V>"
            },
            {
                "name": "apply(T t,\n     U u)",
                "description": "Applies this function to the given arguments.",
                "modAndType": "R"
            }
        ],
        "href": "java/util/function/BiFunction.html"
    },
    {
        "name": "BigDecimal",
        "constructors": [
            {
                "name": "BigDecimal(BigInteger val)",
                "description": "Translates a BigInteger into a BigDecimal."
            },
            {
                "name": "BigDecimal(BigInteger unscaledVal,\n          int scale)",
                "description": "Translates a BigInteger unscaled value and an\n int scale into a BigDecimal."
            },
            {
                "name": "BigDecimal(BigInteger unscaledVal,\n          int scale,\n          MathContext mc)",
                "description": "Translates a BigInteger unscaled value and an\n int scale into a BigDecimal, with rounding\n according to the context settings."
            },
            {
                "name": "BigDecimal(BigInteger val,\n          MathContext mc)",
                "description": "Translates a BigInteger into a BigDecimal\n rounding according to the context settings."
            },
            {
                "name": "BigDecimal(char[] in)",
                "description": "Translates a character array representation of a\n BigDecimal into a BigDecimal, accepting the\n same sequence of characters as the BigDecimal(String)\n constructor."
            },
            {
                "name": "BigDecimal(char[] in,\n          int offset,\n          int len)",
                "description": "Translates a character array representation of a\n BigDecimal into a BigDecimal, accepting the\n same sequence of characters as the BigDecimal(String)\n constructor, while allowing a sub-array to be specified."
            },
            {
                "name": "BigDecimal(char[] in,\n          int offset,\n          int len,\n          MathContext mc)",
                "description": "Translates a character array representation of a\n BigDecimal into a BigDecimal, accepting the\n same sequence of characters as the BigDecimal(String)\n constructor, while allowing a sub-array to be specified and\n with rounding according to the context settings."
            },
            {
                "name": "BigDecimal(char[] in,\n          MathContext mc)",
                "description": "Translates a character array representation of a\n BigDecimal into a BigDecimal, accepting the\n same sequence of characters as the BigDecimal(String)\n constructor and with rounding according to the context\n settings."
            },
            {
                "name": "BigDecimal(double val)",
                "description": "Translates a double into a BigDecimal which\n is the exact decimal representation of the double's\n binary floating-point value."
            },
            {
                "name": "BigDecimal(double val,\n          MathContext mc)",
                "description": "Translates a double into a BigDecimal, with\n rounding according to the context settings."
            },
            {
                "name": "BigDecimal(int val)",
                "description": "Translates an int into a BigDecimal."
            },
            {
                "name": "BigDecimal(int val,\n          MathContext mc)",
                "description": "Translates an int into a BigDecimal, with\n rounding according to the context settings."
            },
            {
                "name": "BigDecimal(long val)",
                "description": "Translates a long into a BigDecimal."
            },
            {
                "name": "BigDecimal(long val,\n          MathContext mc)",
                "description": "Translates a long into a BigDecimal, with\n rounding according to the context settings."
            },
            {
                "name": "BigDecimal(String val)",
                "description": "Translates the string representation of a BigDecimal\n into a BigDecimal."
            },
            {
                "name": "BigDecimal(String val,\n          MathContext mc)",
                "description": "Translates the string representation of a BigDecimal\n into a BigDecimal, accepting the same strings as the\n BigDecimal(String) constructor, with rounding\n according to the context settings."
            }
        ],
        "methods": [
            {
                "name": "abs()",
                "description": "Returns a BigDecimal whose value is the absolute value\n of this BigDecimal, and whose scale is\n this.scale().",
                "modAndType": "BigDecimal"
            },
            {
                "name": "abs(MathContext mc)",
                "description": "Returns a BigDecimal whose value is the absolute value\n of this BigDecimal, with rounding according to the\n context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "add(BigDecimal augend)",
                "description": "Returns a BigDecimal whose value is (this +\n augend), and whose scale is max(this.scale(),\n augend.scale()).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "add(BigDecimal augend,\n   MathContext mc)",
                "description": "Returns a BigDecimal whose value is (this + augend),\n with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "byteValueExact()",
                "description": "Converts this BigDecimal to a byte, checking\n for lost information.",
                "modAndType": "byte"
            },
            {
                "name": "compareTo(BigDecimal val)",
                "description": "Compares this BigDecimal with the specified\n BigDecimal.",
                "modAndType": "int"
            },
            {
                "name": "divide(BigDecimal divisor)",
                "description": "Returns a BigDecimal whose value is (this /\n divisor), and whose preferred scale is (this.scale() -\n divisor.scale()); if the exact quotient cannot be\n represented (because it has a non-terminating decimal\n expansion) an ArithmeticException is thrown.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divide(BigDecimal divisor,\n      int roundingMode)",
                "description": "Returns a BigDecimal whose value is (this /\n divisor), and whose scale is this.scale().",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divide(BigDecimal divisor,\n      int scale,\n      int roundingMode)",
                "description": "Returns a BigDecimal whose value is (this /\n divisor), and whose scale is as specified.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divide(BigDecimal divisor,\n      int scale,\n      RoundingMode roundingMode)",
                "description": "Returns a BigDecimal whose value is (this /\n divisor), and whose scale is as specified.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divide(BigDecimal divisor,\n      MathContext mc)",
                "description": "Returns a BigDecimal whose value is (this /\n divisor), with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divide(BigDecimal divisor,\n      RoundingMode roundingMode)",
                "description": "Returns a BigDecimal whose value is (this /\n divisor), and whose scale is this.scale().",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divideAndRemainder(BigDecimal divisor)",
                "description": "Returns a two-element BigDecimal array containing the\n result of divideToIntegralValue followed by the result of\n remainder on the two operands.",
                "modAndType": "BigDecimal[]"
            },
            {
                "name": "divideAndRemainder(BigDecimal divisor,\n                  MathContext mc)",
                "description": "Returns a two-element BigDecimal array containing the\n result of divideToIntegralValue followed by the result of\n remainder on the two operands calculated with rounding\n according to the context settings.",
                "modAndType": "BigDecimal[]"
            },
            {
                "name": "divideToIntegralValue(BigDecimal divisor)",
                "description": "Returns a BigDecimal whose value is the integer part\n of the quotient (this / divisor) rounded down.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "divideToIntegralValue(BigDecimal divisor,\n                     MathContext mc)",
                "description": "Returns a BigDecimal whose value is the integer part\n of (this / divisor).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "doubleValue()",
                "description": "Converts this BigDecimal to a double.",
                "modAndType": "double"
            },
            {
                "name": "equals(Object x)",
                "description": "Compares this BigDecimal with the specified\n Object for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "floatValue()",
                "description": "Converts this BigDecimal to a float.",
                "modAndType": "float"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code for this BigDecimal.",
                "modAndType": "int"
            },
            {
                "name": "intValue()",
                "description": "Converts this BigDecimal to an int.",
                "modAndType": "int"
            },
            {
                "name": "intValueExact()",
                "description": "Converts this BigDecimal to an int, checking\n for lost information.",
                "modAndType": "int"
            },
            {
                "name": "longValue()",
                "description": "Converts this BigDecimal to a long.",
                "modAndType": "long"
            },
            {
                "name": "longValueExact()",
                "description": "Converts this BigDecimal to a long, checking\n for lost information.",
                "modAndType": "long"
            },
            {
                "name": "max(BigDecimal val)",
                "description": "Returns the maximum of this BigDecimal and val.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "min(BigDecimal val)",
                "description": "Returns the minimum of this BigDecimal and\n val.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "movePointLeft(int n)",
                "description": "Returns a BigDecimal which is equivalent to this one\n with the decimal point moved n places to the left.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "movePointRight(int n)",
                "description": "Returns a BigDecimal which is equivalent to this one\n with the decimal point moved n places to the right.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "multiply(BigDecimal multiplicand)",
                "description": "Returns a BigDecimal whose value is (this ×\n multiplicand), and whose scale is (this.scale() +\n multiplicand.scale()).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "multiply(BigDecimal multiplicand,\n        MathContext mc)",
                "description": "Returns a BigDecimal whose value is (this ×\n multiplicand), with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "negate()",
                "description": "Returns a BigDecimal whose value is (-this),\n and whose scale is this.scale().",
                "modAndType": "BigDecimal"
            },
            {
                "name": "negate(MathContext mc)",
                "description": "Returns a BigDecimal whose value is (-this),\n with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "plus()",
                "description": "Returns a BigDecimal whose value is (+this), and whose\n scale is this.scale().",
                "modAndType": "BigDecimal"
            },
            {
                "name": "plus(MathContext mc)",
                "description": "Returns a BigDecimal whose value is (+this),\n with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "pow(int n)",
                "description": "Returns a BigDecimal whose value is\n (thisn), The power is computed exactly, to\n unlimited precision.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "pow(int n,\n   MathContext mc)",
                "description": "Returns a BigDecimal whose value is\n (thisn).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "precision()",
                "description": "Returns the precision of this BigDecimal.",
                "modAndType": "int"
            },
            {
                "name": "remainder(BigDecimal divisor)",
                "description": "Returns a BigDecimal whose value is (this % divisor).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "remainder(BigDecimal divisor,\n         MathContext mc)",
                "description": "Returns a BigDecimal whose value is (this %\n divisor), with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "round(MathContext mc)",
                "description": "Returns a BigDecimal rounded according to the\n MathContext settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "scale()",
                "description": "Returns the scale of this BigDecimal.",
                "modAndType": "int"
            },
            {
                "name": "scaleByPowerOfTen(int n)",
                "description": "Returns a BigDecimal whose numerical value is equal to\n (this * 10n).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "setScale(int newScale)",
                "description": "Returns a BigDecimal whose scale is the specified\n value, and whose value is numerically equal to this\n BigDecimal's.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "setScale(int newScale,\n        int roundingMode)",
                "description": "Returns a BigDecimal whose scale is the specified\n value, and whose unscaled value is determined by multiplying or\n dividing this BigDecimal's unscaled value by the\n appropriate power of ten to maintain its overall value.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "setScale(int newScale,\n        RoundingMode roundingMode)",
                "description": "Returns a BigDecimal whose scale is the specified\n value, and whose unscaled value is determined by multiplying or\n dividing this BigDecimal's unscaled value by the\n appropriate power of ten to maintain its overall value.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "shortValueExact()",
                "description": "Converts this BigDecimal to a short, checking\n for lost information.",
                "modAndType": "short"
            },
            {
                "name": "signum()",
                "description": "Returns the signum function of this BigDecimal.",
                "modAndType": "int"
            },
            {
                "name": "stripTrailingZeros()",
                "description": "Returns a BigDecimal which is numerically equal to\n this one but with any trailing zeros removed from the\n representation.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "subtract(BigDecimal subtrahend)",
                "description": "Returns a BigDecimal whose value is (this -\n subtrahend), and whose scale is max(this.scale(),\n subtrahend.scale()).",
                "modAndType": "BigDecimal"
            },
            {
                "name": "subtract(BigDecimal subtrahend,\n        MathContext mc)",
                "description": "Returns a BigDecimal whose value is (this - subtrahend),\n with rounding according to the context settings.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "toBigInteger()",
                "description": "Converts this BigDecimal to a BigInteger.",
                "modAndType": "BigInteger"
            },
            {
                "name": "toBigIntegerExact()",
                "description": "Converts this BigDecimal to a BigInteger,\n checking for lost information.",
                "modAndType": "BigInteger"
            },
            {
                "name": "toEngineeringString()",
                "description": "Returns a string representation of this BigDecimal,\n using engineering notation if an exponent is needed.",
                "modAndType": "String"
            },
            {
                "name": "toPlainString()",
                "description": "Returns a string representation of this BigDecimal\n without an exponent field.",
                "modAndType": "String"
            },
            {
                "name": "toString()",
                "description": "Returns the string representation of this BigDecimal,\n using scientific notation if an exponent is needed.",
                "modAndType": "String"
            },
            {
                "name": "ulp()",
                "description": "Returns the size of an ulp, a unit in the last place, of this\n BigDecimal.",
                "modAndType": "BigDecimal"
            },
            {
                "name": "unscaledValue()",
                "description": "Returns a BigInteger whose value is the unscaled\n value of this BigDecimal.",
                "modAndType": "BigInteger"
            },
            {
                "name": "valueOf(double val)",
                "description": "Translates a double into a BigDecimal, using\n the double's canonical string representation provided\n by the Double.toString(double) method.",
                "modAndType": "static BigDecimal"
            },
            {
                "name": "valueOf(long val)",
                "description": "Translates a long value into a BigDecimal\n with a scale of zero.",
                "modAndType": "static BigDecimal"
            },
            {
                "name": "valueOf(long unscaledVal,\n       int scale)",
                "description": "Translates a long unscaled value and an\n int scale into a BigDecimal.",
                "modAndType": "static BigDecimal"
            }
        ],
        "href": "java/math/BigDecimal.html"
    },
    {
        "name": "BigInteger",
        "constructors": [
            {
                "name": "BigInteger(byte[] val)",
                "description": "Translates a byte array containing the two's-complement binary\n representation of a BigInteger into a BigInteger."
            },
            {
                "name": "BigInteger(int signum,\n          byte[] magnitude)",
                "description": "Translates the sign-magnitude representation of a BigInteger into a\n BigInteger."
            },
            {
                "name": "BigInteger(int bitLength,\n          int certainty,\n          Random rnd)",
                "description": "Constructs a randomly generated positive BigInteger that is probably\n prime, with the specified bitLength."
            },
            {
                "name": "BigInteger(int numBits,\n          Random rnd)",
                "description": "Constructs a randomly generated BigInteger, uniformly distributed over\n the range 0 to (2numBits - 1), inclusive."
            },
            {
                "name": "BigInteger(String val)",
                "description": "Translates the decimal String representation of a BigInteger into a\n BigInteger."
            },
            {
                "name": "BigInteger(String val,\n          int radix)",
                "description": "Translates the String representation of a BigInteger in the\n specified radix into a BigInteger."
            }
        ],
        "methods": [
            {
                "name": "abs()",
                "description": "Returns a BigInteger whose value is the absolute value of this\n BigInteger.",
                "modAndType": "BigInteger"
            },
            {
                "name": "add(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this + val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "and(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this & val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "andNot(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this & ~val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "bitCount()",
                "description": "Returns the number of bits in the two's complement representation\n of this BigInteger that differ from its sign bit.",
                "modAndType": "int"
            },
            {
                "name": "bitLength()",
                "description": "Returns the number of bits in the minimal two's-complement\n representation of this BigInteger, excluding a sign bit.",
                "modAndType": "int"
            },
            {
                "name": "byteValueExact()",
                "description": "Converts this BigInteger to a byte, checking\n for lost information.",
                "modAndType": "byte"
            },
            {
                "name": "clearBit(int n)",
                "description": "Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit cleared.",
                "modAndType": "BigInteger"
            },
            {
                "name": "compareTo(BigInteger val)",
                "description": "Compares this BigInteger with the specified BigInteger.",
                "modAndType": "int"
            },
            {
                "name": "divide(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this / val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "divideAndRemainder(BigInteger val)",
                "description": "Returns an array of two BigIntegers containing (this / val)\n followed by (this % val).",
                "modAndType": "BigInteger[]"
            },
            {
                "name": "doubleValue()",
                "description": "Converts this BigInteger to a double.",
                "modAndType": "double"
            },
            {
                "name": "equals(Object x)",
                "description": "Compares this BigInteger with the specified Object for equality.",
                "modAndType": "boolean"
            },
            {
                "name": "flipBit(int n)",
                "description": "Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit flipped.",
                "modAndType": "BigInteger"
            },
            {
                "name": "floatValue()",
                "description": "Converts this BigInteger to a float.",
                "modAndType": "float"
            },
            {
                "name": "gcd(BigInteger val)",
                "description": "Returns a BigInteger whose value is the greatest common divisor of\n abs(this) and abs(val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "getLowestSetBit()",
                "description": "Returns the index of the rightmost (lowest-order) one bit in this\n BigInteger (the number of zero bits to the right of the rightmost\n one bit).",
                "modAndType": "int"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code for this BigInteger.",
                "modAndType": "int"
            },
            {
                "name": "intValue()",
                "description": "Converts this BigInteger to an int.",
                "modAndType": "int"
            },
            {
                "name": "intValueExact()",
                "description": "Converts this BigInteger to an int, checking\n for lost information.",
                "modAndType": "int"
            },
            {
                "name": "isProbablePrime(int certainty)",
                "description": "Returns true if this BigInteger is probably prime,\n false if it's definitely composite.",
                "modAndType": "boolean"
            },
            {
                "name": "longValue()",
                "description": "Converts this BigInteger to a long.",
                "modAndType": "long"
            },
            {
                "name": "longValueExact()",
                "description": "Converts this BigInteger to a long, checking\n for lost information.",
                "modAndType": "long"
            },
            {
                "name": "max(BigInteger val)",
                "description": "Returns the maximum of this BigInteger and val.",
                "modAndType": "BigInteger"
            },
            {
                "name": "min(BigInteger val)",
                "description": "Returns the minimum of this BigInteger and val.",
                "modAndType": "BigInteger"
            },
            {
                "name": "mod(BigInteger m)",
                "description": "Returns a BigInteger whose value is (this mod m).",
                "modAndType": "BigInteger"
            },
            {
                "name": "modInverse(BigInteger m)",
                "description": "Returns a BigInteger whose value is (this-1 mod m).",
                "modAndType": "BigInteger"
            },
            {
                "name": "modPow(BigInteger exponent,\n      BigInteger m)",
                "description": "Returns a BigInteger whose value is\n (thisexponent mod m).",
                "modAndType": "BigInteger"
            },
            {
                "name": "multiply(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this * val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "negate()",
                "description": "Returns a BigInteger whose value is (-this).",
                "modAndType": "BigInteger"
            },
            {
                "name": "nextProbablePrime()",
                "description": "Returns the first integer greater than this BigInteger that\n is probably prime.",
                "modAndType": "BigInteger"
            },
            {
                "name": "not()",
                "description": "Returns a BigInteger whose value is (~this).",
                "modAndType": "BigInteger"
            },
            {
                "name": "or(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this | val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "pow(int exponent)",
                "description": "Returns a BigInteger whose value is (thisexponent).",
                "modAndType": "BigInteger"
            },
            {
                "name": "probablePrime(int bitLength,\n             Random rnd)",
                "description": "Returns a positive BigInteger that is probably prime, with the\n specified bitLength.",
                "modAndType": "static BigInteger"
            },
            {
                "name": "remainder(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this % val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "setBit(int n)",
                "description": "Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit set.",
                "modAndType": "BigInteger"
            },
            {
                "name": "shiftLeft(int n)",
                "description": "Returns a BigInteger whose value is (this << n).",
                "modAndType": "BigInteger"
            },
            {
                "name": "shiftRight(int n)",
                "description": "Returns a BigInteger whose value is (this >> n).",
                "modAndType": "BigInteger"
            },
            {
                "name": "shortValueExact()",
                "description": "Converts this BigInteger to a short, checking\n for lost information.",
                "modAndType": "short"
            },
            {
                "name": "signum()",
                "description": "Returns the signum function of this BigInteger.",
                "modAndType": "int"
            },
            {
                "name": "subtract(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this - val).",
                "modAndType": "BigInteger"
            },
            {
                "name": "testBit(int n)",
                "description": "Returns true if and only if the designated bit is set.",
                "modAndType": "boolean"
            },
            {
                "name": "toByteArray()",
                "description": "Returns a byte array containing the two's-complement\n representation of this BigInteger.",
                "modAndType": "byte[]"
            },
            {
                "name": "toString()",
                "description": "Returns the decimal String representation of this BigInteger.",
                "modAndType": "String"
            },
            {
                "name": "toString(int radix)",
                "description": "Returns the String representation of this BigInteger in the\n given radix.",
                "modAndType": "String"
            },
            {
                "name": "valueOf(long val)",
                "description": "Returns a BigInteger whose value is equal to that of the\n specified long.",
                "modAndType": "static BigInteger"
            },
            {
                "name": "xor(BigInteger val)",
                "description": "Returns a BigInteger whose value is (this ^ val).",
                "modAndType": "BigInteger"
            }
        ],
        "href": "java/math/BigInteger.html"
    },
    {
        "name": "BinaryOperator",
        "constructors": [],
        "methods": [
            {
                "name": "maxBy(Comparator<? super T> comparator)",
                "description": "Returns a BinaryOperator which returns the greater of two elements\n according to the specified Comparator.",
                "modAndType": "static <T> BinaryOperator<T>"
            },
            {
                "name": "minBy(Comparator<? super T> comparator)",
                "description": "Returns a BinaryOperator which returns the lesser of two elements\n according to the specified Comparator.",
                "modAndType": "static <T> BinaryOperator<T>"
            }
        ],
        "href": "java/util/function/BinaryOperator.html"
    },
    {
        "name": "BinaryRefAddr",
        "constructors": [
            {
                "name": "BinaryRefAddr(String addrType,\n             byte[] src)",
                "description": "Constructs a new instance of BinaryRefAddr using its address type and a byte\n array for contents."
            },
            {
                "name": "BinaryRefAddr(String addrType,\n             byte[] src,\n             int offset,\n             int count)",
                "description": "Constructs a new instance of BinaryRefAddr using its address type and\n a region of a byte array for contents."
            }
        ],
        "methods": [
            {
                "name": "equals(Object obj)",
                "description": "Determines whether obj is equal to this address.",
                "modAndType": "boolean"
            },
            {
                "name": "getContent()",
                "description": "Retrieves the contents of this address as an Object.",
                "modAndType": "Object"
            },
            {
                "name": "hashCode()",
                "description": "Computes the hash code of this address using its address type and contents.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Generates the string representation of this address.",
                "modAndType": "String"
            }
        ],
        "href": "javax/naming/BinaryRefAddr.html"
    },
    {
        "name": "Binder",
        "constructors": [
            {
                "name": "Binder()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "getEventHandler()",
                "description": "Return the current event handler or the default event handler if one\n hasn't been set.",
                "modAndType": "abstract ValidationEventHandler"
            },
            {
                "name": "getJAXBNode(XmlNode xmlNode)",
                "description": "Gets the JAXB object associated with the given XML element.",
                "modAndType": "abstract Object"
            },
            {
                "name": "getProperty(String name)",
                "description": "Get the particular property in the underlying implementation of\n Binder.",
                "modAndType": "abstract Object"
            },
            {
                "name": "getSchema()",
                "description": "Gets the last Schema object (including null) set by the\n setSchema(Schema) method.",
                "modAndType": "abstract Schema"
            },
            {
                "name": "getXMLNode(Object jaxbObject)",
                "description": "Gets the XML element associated with the given JAXB object.",
                "modAndType": "abstract XmlNode"
            },
            {
                "name": "marshal(Object jaxbObject,\n       XmlNode xmlNode)",
                "description": "Marshal a JAXB object tree to a new XML document.",
                "modAndType": "abstract void"
            },
            {
                "name": "setEventHandler(ValidationEventHandler handler)",
                "description": "Allow an application to register a ValidationEventHandler.",
                "modAndType": "abstract void"
            },
            {
                "name": "setProperty(String name,\n           Object value)",
                "description": "Set the particular property in the underlying implementation of\n Binder.",
                "modAndType": "abstract void"
            },
            {
                "name": "setSchema(Schema schema)",
                "description": "Specifies whether marshal, unmarshal and update methods\n performs validation on their XML content.",
                "modAndType": "abstract void"
            },
            {
                "name": "unmarshal(XmlNode xmlNode)",
                "description": "Unmarshal XML infoset view to a JAXB object tree.",
                "modAndType": "abstract Object"
            },
            {
                "name": "unmarshal(XmlNode xmlNode,\n         Class<T> declaredType)",
                "description": "Unmarshal XML root element by provided declaredType\n to a JAXB object tree.",
                "modAndType": "abstract <T> JAXBElement<T>"
            },
            {
                "name": "updateJAXB(XmlNode xmlNode)",
                "description": "Takes an XML node and updates its associated JAXB object and its descendants.",
                "modAndType": "abstract Object"
            },
            {
                "name": "updateXML(Object jaxbObject)",
                "description": "Takes an JAXB object and updates\n its associated XML node and its descendants.",
                "modAndType": "abstract XmlNode"
            },
            {
                "name": "updateXML(Object jaxbObject,\n         XmlNode xmlNode)",
                "description": "Changes in JAXB object tree are updated in its associated XML parse tree.",
                "modAndType": "abstract XmlNode"
            }
        ],
        "href": "javax/xml/bind/Binder.html"
    },
    {
        "name": "BindException",
        "constructors": [
            {
                "name": "BindException()",
                "description": "Construct a new BindException with no detailed message."
            },
            {
                "name": "BindException(String msg)",
                "description": "Constructs a new BindException with the specified detail\n message as to why the bind error occurred."
            }
        ],
        "methods": [],
        "href": "java/net/BindException.html"
    },
    {
        "name": "Binding",
        "constructors": [
            {
                "name": "Binding(String name,\n       Object obj)",
                "description": "Constructs an instance of a Binding given its name and object."
            },
            {
                "name": "Binding(String name,\n       Object obj,\n       boolean isRelative)",
                "description": "Constructs an instance of a Binding given its name, object, and whether\n the name is relative."
            },
            {
                "name": "Binding(String name,\n       String className,\n       Object obj)",
                "description": "Constructs an instance of a Binding given its name, class name, and object."
            },
            {
                "name": "Binding(String name,\n       String className,\n       Object obj,\n       boolean isRelative)",
                "description": "Constructs an instance of a Binding given its\n name, class name, object, and whether the name is relative."
            }
        ],
        "methods": [
            {
                "name": "getClassName()",
                "description": "Retrieves the class name of the object bound to the name of this binding.",
                "modAndType": "String"
            },
            {
                "name": "getObject()",
                "description": "Retrieves the object bound to the name of this binding.",
                "modAndType": "Object"
            },
            {
                "name": "setObject(Object obj)",
                "description": "Sets the object associated with this binding.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Generates the string representation of this binding.",
                "modAndType": "String"
            }
        ],
        "href": "javax/naming/Binding.html"
    },
    {
        "name": "Binding",
        "constructors": [],
        "methods": [
            {
                "name": "getBindingID()",
                "description": "Get the URI for this binding instance.",
                "modAndType": "String"
            },
            {
                "name": "getHandlerChain()",
                "description": "Gets a copy of the handler chain for a protocol binding instance.",
                "modAndType": "List<Handler>"
            },
            {
                "name": "setHandlerChain(List<Handler> chain)",
                "description": "Sets the handler chain for the protocol binding instance.",
                "modAndType": "void"
            }
        ],
        "href": "javax/xml/ws/Binding.html"
    },
    {
        "name": "Binding",
        "constructors": [
            {
                "name": "Binding()",
                "description": ""
            },
            {
                "name": "Binding(NameComponent[] _binding_name,\n       BindingType _binding_type)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "org/omg/CosNaming/Binding.html"
    },
    {
        "name": "BindingHelper",
        "constructors": [
            {
                "name": "BindingHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static Binding"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      Binding that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static Binding"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     Binding value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CosNaming/BindingHelper.html"
    },
    {
        "name": "BindingHolder",
        "constructors": [
            {
                "name": "BindingHolder()",
                "description": ""
            },
            {
                "name": "BindingHolder(Binding initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CosNaming/BindingHolder.html"
    },
    {
        "name": "BindingIterator",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/BindingIterator.html"
    },
    {
        "name": "BindingIteratorHelper",
        "constructors": [
            {
                "name": "BindingIteratorHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static BindingIterator"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      BindingIterator that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "narrow(Object obj)",
                "description": "",
                "modAndType": "static BindingIterator"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static BindingIterator"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "unchecked_narrow(Object obj)",
                "description": "",
                "modAndType": "static BindingIterator"
            },
            {
                "name": "write(OutputStream ostream,\n     BindingIterator value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CosNaming/BindingIteratorHelper.html"
    },
    {
        "name": "BindingIteratorHolder",
        "constructors": [
            {
                "name": "BindingIteratorHolder()",
                "description": ""
            },
            {
                "name": "BindingIteratorHolder(BindingIterator initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CosNaming/BindingIteratorHolder.html"
    },
    {
        "name": "BindingIteratorOperations",
        "constructors": [],
        "methods": [
            {
                "name": "destroy()",
                "description": "This operation destroys the iterator.",
                "modAndType": "void"
            },
            {
                "name": "next_n(int how_many,\n      BindingListHolder bl)",
                "description": "This operation returns at most the requested number of bindings.",
                "modAndType": "boolean"
            },
            {
                "name": "next_one(BindingHolder b)",
                "description": "This operation returns the next binding.",
                "modAndType": "boolean"
            }
        ],
        "href": "org/omg/CosNaming/BindingIteratorOperations.html"
    },
    {
        "name": "BindingIteratorPOA",
        "constructors": [
            {
                "name": "BindingIteratorPOA()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_all_interfaces(POA poa,\n               byte[] objectId)",
                "description": "Used by the ORB to obtain complete type\n information from the servant.",
                "modAndType": "String[]"
            },
            {
                "name": "_invoke(String $method,\n       InputStream in,\n       ResponseHandler $rh)",
                "description": "Invoked by the ORB to dispatch a request to the servant.",
                "modAndType": "OutputStream"
            },
            {
                "name": "_this()",
                "description": "",
                "modAndType": "BindingIterator"
            },
            {
                "name": "_this(ORB orb)",
                "description": "",
                "modAndType": "BindingIterator"
            }
        ],
        "href": "org/omg/CosNaming/BindingIteratorPOA.html"
    },
    {
        "name": "BindingListHelper",
        "constructors": [
            {
                "name": "BindingListHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static Binding[]"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      Binding[] that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static Binding[]"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     Binding[] value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CosNaming/BindingListHelper.html"
    },
    {
        "name": "BindingListHolder",
        "constructors": [
            {
                "name": "BindingListHolder()",
                "description": ""
            },
            {
                "name": "BindingListHolder(Binding[] initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CosNaming/BindingListHolder.html"
    },
    {
        "name": "BindingProvider",
        "constructors": [],
        "methods": [
            {
                "name": "getBinding()",
                "description": "Get the Binding for this binding provider.",
                "modAndType": "Binding"
            },
            {
                "name": "getEndpointReference()",
                "description": "Returns the EndpointReference associated with\n this BindingProvider instance.",
                "modAndType": "EndpointReference"
            },
            {
                "name": "getEndpointReference(Class<T> clazz)",
                "description": "Returns the EndpointReference associated with\n this BindingProvider instance.",
                "modAndType": "<T extends EndpointReference>T"
            },
            {
                "name": "getRequestContext()",
                "description": "Get the context that is used to initialize the message context\n for request messages.",
                "modAndType": "Map<String,Object>"
            },
            {
                "name": "getResponseContext()",
                "description": "Get the context that resulted from processing a response message.",
                "modAndType": "Map<String,Object>"
            }
        ],
        "href": "javax/xml/ws/BindingProvider.html"
    },
    {
        "name": "Bindings",
        "constructors": [],
        "methods": [
            {
                "name": "containsKey(Object key)",
                "description": "Returns true if this map contains a mapping for the specified\n key.",
                "modAndType": "boolean"
            },
            {
                "name": "get(Object key)",
                "description": "Returns the value to which this map maps the specified key.",
                "modAndType": "Object"
            },
            {
                "name": "put(String name,\n   Object value)",
                "description": "Set a named value.",
                "modAndType": "Object"
            },
            {
                "name": "putAll(Map<? extends String,? extends Object> toMerge)",
                "description": "Adds all the mappings in a given Map to this Bindings.",
                "modAndType": "void"
            },
            {
                "name": "remove(Object key)",
                "description": "Removes the mapping for this key from this map if it is present\n (optional operation).",
                "modAndType": "Object"
            }
        ],
        "href": "javax/script/Bindings.html"
    },
    {
        "name": "BindingType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/BindingType.html"
    },
    {
        "name": "BindingType",
        "constructors": [
            {
                "name": "protected BindingType(int value)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "from_int(int value)",
                "description": "",
                "modAndType": "static BindingType"
            },
            {
                "name": "value()",
                "description": "",
                "modAndType": "int"
            }
        ],
        "href": "org/omg/CosNaming/BindingType.html"
    },
    {
        "name": "BindingTypeHelper",
        "constructors": [
            {
                "name": "BindingTypeHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static BindingType"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      BindingType that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static BindingType"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     BindingType value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CosNaming/BindingTypeHelper.html"
    },
    {
        "name": "BindingTypeHolder",
        "constructors": [
            {
                "name": "BindingTypeHolder()",
                "description": ""
            },
            {
                "name": "BindingTypeHolder(BindingType initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CosNaming/BindingTypeHolder.html"
    },
    {
        "name": "BiPredicate",
        "constructors": [],
        "methods": [
            {
                "name": "and(BiPredicate<? super T,? super U> other)",
                "description": "Returns a composed predicate that represents a short-circuiting logical\n AND of this predicate and another.",
                "modAndType": "default BiPredicate<T,U>"
            },
            {
                "name": "negate()",
                "description": "Returns a predicate that represents the logical negation of this\n predicate.",
                "modAndType": "default BiPredicate<T,U>"
            },
            {
                "name": "or(BiPredicate<? super T,? super U> other)",
                "description": "Returns a composed predicate that represents a short-circuiting logical\n OR of this predicate and another.",
                "modAndType": "default BiPredicate<T,U>"
            },
            {
                "name": "test(T t,\n    U u)",
                "description": "Evaluates this predicate on the given arguments.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/function/BiPredicate.html"
    },
    {
        "name": "BitSet",
        "constructors": [
            {
                "name": "BitSet()",
                "description": "Creates a new bit set."
            },
            {
                "name": "BitSet(int nbits)",
                "description": "Creates a bit set whose initial size is large enough to explicitly\n represent bits with indices in the range 0 through\n nbits-1."
            }
        ],
        "methods": [
            {
                "name": "and(BitSet set)",
                "description": "Performs a logical AND of this target bit set with the\n argument bit set.",
                "modAndType": "void"
            },
            {
                "name": "andNot(BitSet set)",
                "description": "Clears all of the bits in this BitSet whose corresponding\n bit is set in the specified BitSet.",
                "modAndType": "void"
            },
            {
                "name": "cardinality()",
                "description": "Returns the number of bits set to true in this BitSet.",
                "modAndType": "int"
            },
            {
                "name": "clear()",
                "description": "Sets all of the bits in this BitSet to false.",
                "modAndType": "void"
            },
            {
                "name": "clear(int bitIndex)",
                "description": "Sets the bit specified by the index to false.",
                "modAndType": "void"
            },
            {
                "name": "clear(int fromIndex,\n     int toIndex)",
                "description": "Sets the bits from the specified fromIndex (inclusive) to the\n specified toIndex (exclusive) to false.",
                "modAndType": "void"
            },
            {
                "name": "clone()",
                "description": "Cloning this BitSet produces a new BitSet\n that is equal to it.",
                "modAndType": "Object"
            },
            {
                "name": "equals(Object obj)",
                "description": "Compares this object against the specified object.",
                "modAndType": "boolean"
            },
            {
                "name": "flip(int bitIndex)",
                "description": "Sets the bit at the specified index to the complement of its\n current value.",
                "modAndType": "void"
            },
            {
                "name": "flip(int fromIndex,\n    int toIndex)",
                "description": "Sets each bit from the specified fromIndex (inclusive) to the\n specified toIndex (exclusive) to the complement of its current\n value.",
                "modAndType": "void"
            },
            {
                "name": "get(int bitIndex)",
                "description": "Returns the value of the bit with the specified index.",
                "modAndType": "boolean"
            },
            {
                "name": "get(int fromIndex,\n   int toIndex)",
                "description": "Returns a new BitSet composed of bits from this BitSet\n from fromIndex (inclusive) to toIndex (exclusive).",
                "modAndType": "BitSet"
            },
            {
                "name": "hashCode()",
                "description": "Returns the hash code value for this bit set.",
                "modAndType": "int"
            },
            {
                "name": "intersects(BitSet set)",
                "description": "Returns true if the specified BitSet has any bits set to\n true that are also set to true in this BitSet.",
                "modAndType": "boolean"
            },
            {
                "name": "isEmpty()",
                "description": "Returns true if this BitSet contains no bits that are set\n to true.",
                "modAndType": "boolean"
            },
            {
                "name": "length()",
                "description": "Returns the \"logical size\" of this BitSet: the index of\n the highest set bit in the BitSet plus one.",
                "modAndType": "int"
            },
            {
                "name": "nextClearBit(int fromIndex)",
                "description": "Returns the index of the first bit that is set to false\n that occurs on or after the specified starting index.",
                "modAndType": "int"
            },
            {
                "name": "nextSetBit(int fromIndex)",
                "description": "Returns the index of the first bit that is set to true\n that occurs on or after the specified starting index.",
                "modAndType": "int"
            },
            {
                "name": "or(BitSet set)",
                "description": "Performs a logical OR of this bit set with the bit set\n argument.",
                "modAndType": "void"
            },
            {
                "name": "previousClearBit(int fromIndex)",
                "description": "Returns the index of the nearest bit that is set to false\n that occurs on or before the specified starting index.",
                "modAndType": "int"
            },
            {
                "name": "previousSetBit(int fromIndex)",
                "description": "Returns the index of the nearest bit that is set to true\n that occurs on or before the specified starting index.",
                "modAndType": "int"
            },
            {
                "name": "set(int bitIndex)",
                "description": "Sets the bit at the specified index to true.",
                "modAndType": "void"
            },
            {
                "name": "set(int bitIndex,\n   boolean value)",
                "description": "Sets the bit at the specified index to the specified value.",
                "modAndType": "void"
            },
            {
                "name": "set(int fromIndex,\n   int toIndex)",
                "description": "Sets the bits from the specified fromIndex (inclusive) to the\n specified toIndex (exclusive) to true.",
                "modAndType": "void"
            },
            {
                "name": "set(int fromIndex,\n   int toIndex,\n   boolean value)",
                "description": "Sets the bits from the specified fromIndex (inclusive) to the\n specified toIndex (exclusive) to the specified value.",
                "modAndType": "void"
            },
            {
                "name": "size()",
                "description": "Returns the number of bits of space actually in use by this\n BitSet to represent bit values.",
                "modAndType": "int"
            },
            {
                "name": "stream()",
                "description": "Returns a stream of indices for which this BitSet\n contains a bit in the set state.",
                "modAndType": "IntStream"
            },
            {
                "name": "toByteArray()",
                "description": "Returns a new byte array containing all the bits in this bit set.",
                "modAndType": "byte[]"
            },
            {
                "name": "toLongArray()",
                "description": "Returns a new long array containing all the bits in this bit set.",
                "modAndType": "long[]"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of this bit set.",
                "modAndType": "String"
            },
            {
                "name": "valueOf(byte[] bytes)",
                "description": "Returns a new bit set containing all the bits in the given byte array.",
                "modAndType": "static BitSet"
            },
            {
                "name": "valueOf(ByteBuffer bb)",
                "description": "Returns a new bit set containing all the bits in the given byte\n buffer between its position and limit.",
                "modAndType": "static BitSet"
            },
            {
                "name": "valueOf(long[] longs)",
                "description": "Returns a new bit set containing all the bits in the given long array.",
                "modAndType": "static BitSet"
            },
            {
                "name": "valueOf(LongBuffer lb)",
                "description": "Returns a new bit set containing all the bits in the given long\n buffer between its position and limit.",
                "modAndType": "static BitSet"
            },
            {
                "name": "xor(BitSet set)",
                "description": "Performs a logical XOR of this bit set with the bit set\n argument.",
                "modAndType": "void"
            }
        ],
        "href": "java/util/BitSet.html"
    },
    {
        "name": "Blob",
        "constructors": [],
        "methods": [
            {
                "name": "free()",
                "description": "This method frees the Blob object and releases the resources that\n it holds.",
                "modAndType": "void"
            },
            {
                "name": "getBinaryStream()",
                "description": "Retrieves the BLOB value designated by this\n Blob instance as a stream.",
                "modAndType": "InputStream"
            },
            {
                "name": "getBinaryStream(long pos,\n               long length)",
                "description": "Returns an InputStream object that contains a partial Blob value,\n starting  with the byte specified by pos, which is length bytes in length.",
                "modAndType": "InputStream"
            },
            {
                "name": "getBytes(long pos,\n        int length)",
                "description": "Retrieves all or part of the BLOB\n value that this Blob object represents, as an array of\n bytes.",
                "modAndType": "byte[]"
            },
            {
                "name": "length()",
                "description": "Returns the number of bytes in the BLOB value\n designated by this Blob object.",
                "modAndType": "long"
            },
            {
                "name": "position(Blob pattern,\n        long start)",
                "description": "Retrieves the byte position in the BLOB value\n designated by this Blob object at which\n pattern begins.",
                "modAndType": "long"
            },
            {
                "name": "position(byte[] pattern,\n        long start)",
                "description": "Retrieves the byte position at which the specified byte array\n pattern begins within the BLOB\n value that this Blob object represents.",
                "modAndType": "long"
            },
            {
                "name": "setBinaryStream(long pos)",
                "description": "Retrieves a stream that can be used to write to the BLOB\n value that this Blob object represents.",
                "modAndType": "OutputStream"
            },
            {
                "name": "setBytes(long pos,\n        byte[] bytes)",
                "description": "Writes the given array of bytes to the BLOB value that\n this Blob object represents, starting at position\n pos, and returns the number of bytes written.",
                "modAndType": "int"
            },
            {
                "name": "setBytes(long pos,\n        byte[] bytes,\n        int offset,\n        int len)",
                "description": "Writes all or part of the given byte array to the\n BLOB value that this Blob object represents\n and returns the number of bytes written.",
                "modAndType": "int"
            },
            {
                "name": "truncate(long len)",
                "description": "Truncates the BLOB value that this Blob\n object represents to be len bytes in length.",
                "modAndType": "void"
            }
        ],
        "href": "java/sql/Blob.html"
    },
    {
        "name": "BlockingDeque",
        "constructors": [],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and throwing an\n IllegalStateException if no space is currently available.",
                "modAndType": "boolean"
            },
            {
                "name": "addFirst(E e)",
                "description": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an IllegalStateException if no space is currently\n available.",
                "modAndType": "void"
            },
            {
                "name": "addLast(E e)",
                "description": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an IllegalStateException if no space is currently\n available.",
                "modAndType": "void"
            },
            {
                "name": "contains(Object o)",
                "description": "Returns true if this deque contains the specified element.",
                "modAndType": "boolean"
            },
            {
                "name": "element()",
                "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).",
                "modAndType": "E"
            },
            {
                "name": "iterator()",
                "description": "Returns an iterator over the elements in this deque in proper sequence.",
                "modAndType": "Iterator<E>"
            },
            {
                "name": "offer(E e)",
                "description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n true upon success and false if no space is currently\n available.",
                "modAndType": "boolean"
            },
            {
                "name": "offer(E e,\n     long timeout,\n     TimeUnit unit)",
                "description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting up to the\n specified wait time if necessary for space to become available.",
                "modAndType": "boolean"
            },
            {
                "name": "offerFirst(E e)",
                "description": "Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning true upon success and false if no space is\n currently available.",
                "modAndType": "boolean"
            },
            {
                "name": "offerFirst(E e,\n          long timeout,\n          TimeUnit unit)",
                "description": "Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.",
                "modAndType": "boolean"
            },
            {
                "name": "offerLast(E e)",
                "description": "Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n returning true upon success and false if no space is\n currently available.",
                "modAndType": "boolean"
            },
            {
                "name": "offerLast(E e,\n         long timeout,\n         TimeUnit unit)",
                "description": "Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.",
                "modAndType": "boolean"
            },
            {
                "name": "peek()",
                "description": "Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "poll()",
                "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), or returns\n null if this deque is empty.",
                "modAndType": "E"
            },
            {
                "name": "poll(long timeout,\n    TimeUnit unit)",
                "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting up to the\n specified wait time if necessary for an element to become available.",
                "modAndType": "E"
            },
            {
                "name": "pollFirst(long timeout,\n         TimeUnit unit)",
                "description": "Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.",
                "modAndType": "E"
            },
            {
                "name": "pollLast(long timeout,\n        TimeUnit unit)",
                "description": "Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.",
                "modAndType": "E"
            },
            {
                "name": "push(E e)",
                "description": "Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n IllegalStateException if no space is currently available.",
                "modAndType": "void"
            },
            {
                "name": "put(E e)",
                "description": "Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting if necessary for\n space to become available.",
                "modAndType": "void"
            },
            {
                "name": "putFirst(E e)",
                "description": "Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available.",
                "modAndType": "void"
            },
            {
                "name": "putLast(E e)",
                "description": "Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available.",
                "modAndType": "void"
            },
            {
                "name": "remove()",
                "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque).",
                "modAndType": "E"
            },
            {
                "name": "remove(Object o)",
                "description": "Removes the first occurrence of the specified element from this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "removeFirstOccurrence(Object o)",
                "description": "Removes the first occurrence of the specified element from this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "removeLastOccurrence(Object o)",
                "description": "Removes the last occurrence of the specified element from this deque.",
                "modAndType": "boolean"
            },
            {
                "name": "size()",
                "description": "Returns the number of elements in this deque.",
                "modAndType": "int"
            },
            {
                "name": "take()",
                "description": "Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting if\n necessary until an element becomes available.",
                "modAndType": "E"
            },
            {
                "name": "takeFirst()",
                "description": "Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available.",
                "modAndType": "E"
            },
            {
                "name": "takeLast()",
                "description": "Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available.",
                "modAndType": "E"
            }
        ],
        "href": "java/util/concurrent/BlockingDeque.html"
    },
    {
        "name": "BlockingQueue",
        "constructors": [],
        "methods": [
            {
                "name": "add(E e)",
                "description": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n true upon success and throwing an\n IllegalStateException if no space is currently available.",
                "modAndType": "boolean"
            },
            {
                "name": "contains(Object o)",
                "description": "Returns true if this queue contains the specified element.",
                "modAndType": "boolean"
            },
            {
                "name": "drainTo(Collection<? super E> c)",
                "description": "Removes all available elements from this queue and adds them\n to the given collection.",
                "modAndType": "int"
            },
            {
                "name": "drainTo(Collection<? super E> c,\n       int maxElements)",
                "description": "Removes at most the given number of available elements from\n this queue and adds them to the given collection.",
                "modAndType": "int"
            },
            {
                "name": "offer(E e)",
                "description": "Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n true upon success and false if no space is currently\n available.",
                "modAndType": "boolean"
            },
            {
                "name": "offer(E e,\n     long timeout,\n     TimeUnit unit)",
                "description": "Inserts the specified element into this queue, waiting up to the\n specified wait time if necessary for space to become available.",
                "modAndType": "boolean"
            },
            {
                "name": "poll(long timeout,\n    TimeUnit unit)",
                "description": "Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.",
                "modAndType": "E"
            },
            {
                "name": "put(E e)",
                "description": "Inserts the specified element into this queue, waiting if necessary\n for space to become available.",
                "modAndType": "void"
            },
            {
                "name": "remainingCapacity()",
                "description": "Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking, or Integer.MAX_VALUE if there is no intrinsic\n limit.",
                "modAndType": "int"
            },
            {
                "name": "remove(Object o)",
                "description": "Removes a single instance of the specified element from this queue,\n if it is present.",
                "modAndType": "boolean"
            },
            {
                "name": "take()",
                "description": "Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.",
                "modAndType": "E"
            }
        ],
        "href": "java/util/concurrent/BlockingQueue.html"
    },
    {
        "name": "BlockView",
        "constructors": [
            {
                "name": "BlockView(Element elem,\n         int axis)",
                "description": "Creates a new view that represents an\n html box."
            }
        ],
        "methods": [
            {
                "name": "calculateMajorAxisRequirements(int axis,\n                              SizeRequirements r)",
                "description": "Calculate the requirements of the block along the major\n axis (i.e.",
                "modAndType": "protected SizeRequirements"
            },
            {
                "name": "calculateMinorAxisRequirements(int axis,\n                              SizeRequirements r)",
                "description": "Calculate the requirements of the block along the minor\n axis (i.e.",
                "modAndType": "protected SizeRequirements"
            },
            {
                "name": "changedUpdate(DocumentEvent changes,\n             Shape a,\n             ViewFactory f)",
                "description": "Gives notification from the document that attributes were changed\n in a location that this view is responsible for.",
                "modAndType": "void"
            },
            {
                "name": "getAlignment(int axis)",
                "description": "Gets the alignment.",
                "modAndType": "float"
            },
            {
                "name": "getAttributes()",
                "description": "Fetches the attributes to use when rendering.",
                "modAndType": "AttributeSet"
            },
            {
                "name": "getMaximumSpan(int axis)",
                "description": "Determines the maximum span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getMinimumSpan(int axis)",
                "description": "Determines the minimum span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getPreferredSpan(int axis)",
                "description": "Determines the preferred span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getResizeWeight(int axis)",
                "description": "Gets the resize weight.",
                "modAndType": "int"
            },
            {
                "name": "getStyleSheet()",
                "description": "",
                "modAndType": "protected StyleSheet"
            },
            {
                "name": "layoutMinorAxis(int targetSpan,\n               int axis,\n               int[] offsets,\n               int[] spans)",
                "description": "Performs layout for the minor axis of the box (i.e.",
                "modAndType": "protected void"
            },
            {
                "name": "paint(Graphics g,\n     Shape allocation)",
                "description": "Renders using the given rendering surface and area on that\n surface.",
                "modAndType": "void"
            },
            {
                "name": "setParent(View parent)",
                "description": "Establishes the parent view for this view.",
                "modAndType": "void"
            },
            {
                "name": "setPropertiesFromAttributes()",
                "description": "Update any cached values that come from attributes.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/text/html/BlockView.html"
    },
    {
        "name": "BMPImageWriteParam",
        "constructors": [
            {
                "name": "BMPImageWriteParam()",
                "description": "Constructs an BMPImageWriteParam object with default\n values for all parameters and a null Locale."
            },
            {
                "name": "BMPImageWriteParam(Locale locale)",
                "description": "Constructs a BMPImageWriteParam set to use a given\n Locale and with default values for all parameters."
            }
        ],
        "methods": [
            {
                "name": "isTopDown()",
                "description": "Returns the value of the topDown parameter.",
                "modAndType": "boolean"
            },
            {
                "name": "setTopDown(boolean topDown)",
                "description": "If set, the data will be written out in a top-down manner, the first\n scanline being written first.",
                "modAndType": "void"
            }
        ],
        "href": "javax/imageio/plugins/bmp/BMPImageWriteParam.html"
    },
    {
        "name": "Book",
        "constructors": [
            {
                "name": "Book()",
                "description": "Creates a new, empty Book."
            }
        ],
        "methods": [
            {
                "name": "append(Printable painter,\n      PageFormat page)",
                "description": "Appends a single page to the end of this Book.",
                "modAndType": "void"
            },
            {
                "name": "append(Printable painter,\n      PageFormat page,\n      int numPages)",
                "description": "Appends numPages pages to the end of this\n Book.",
                "modAndType": "void"
            },
            {
                "name": "getNumberOfPages()",
                "description": "Returns the number of pages in this Book.",
                "modAndType": "int"
            },
            {
                "name": "getPageFormat(int pageIndex)",
                "description": "Returns the PageFormat of the page specified by\n pageIndex.",
                "modAndType": "PageFormat"
            },
            {
                "name": "getPrintable(int pageIndex)",
                "description": "Returns the Printable instance responsible for rendering\n the page specified by pageIndex.",
                "modAndType": "Printable"
            },
            {
                "name": "setPage(int pageIndex,\n       Printable painter,\n       PageFormat page)",
                "description": "Sets the PageFormat and the Painter for a\n specified page number.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/print/Book.html"
    },
    {
        "name": "Boolean",
        "constructors": [
            {
                "name": "Boolean(boolean value)",
                "description": "Allocates a Boolean object representing the\n value argument."
            },
            {
                "name": "Boolean(String s)",
                "description": "Allocates a Boolean object representing the value\n true if the string argument is not null\n and is equal, ignoring case, to the string \"true\"."
            }
        ],
        "methods": [
            {
                "name": "booleanValue()",
                "description": "Returns the value of this Boolean object as a boolean\n primitive.",
                "modAndType": "boolean"
            },
            {
                "name": "compare(boolean x,\n       boolean y)",
                "description": "Compares two boolean values.",
                "modAndType": "static int"
            },
            {
                "name": "compareTo(Boolean b)",
                "description": "Compares this Boolean instance with another.",
                "modAndType": "int"
            },
            {
                "name": "equals(Object obj)",
                "description": "Returns true if and only if the argument is not\n null and is a Boolean object that\n represents the same boolean value as this object.",
                "modAndType": "boolean"
            },
            {
                "name": "getBoolean(String name)",
                "description": "Returns true if and only if the system property\n named by the argument exists and is equal to the string\n \"true\".",
                "modAndType": "static boolean"
            },
            {
                "name": "hashCode()",
                "description": "Returns a hash code for this Boolean object.",
                "modAndType": "int"
            },
            {
                "name": "hashCode(boolean value)",
                "description": "Returns a hash code for a boolean value; compatible with\n Boolean.hashCode().",
                "modAndType": "static int"
            },
            {
                "name": "logicalAnd(boolean a,\n          boolean b)",
                "description": "Returns the result of applying the logical AND operator to the\n specified boolean operands.",
                "modAndType": "static boolean"
            },
            {
                "name": "logicalOr(boolean a,\n         boolean b)",
                "description": "Returns the result of applying the logical OR operator to the\n specified boolean operands.",
                "modAndType": "static boolean"
            },
            {
                "name": "logicalXor(boolean a,\n          boolean b)",
                "description": "Returns the result of applying the logical XOR operator to the\n specified boolean operands.",
                "modAndType": "static boolean"
            },
            {
                "name": "parseBoolean(String s)",
                "description": "Parses the string argument as a boolean.",
                "modAndType": "static boolean"
            },
            {
                "name": "toString()",
                "description": "Returns a String object representing this Boolean's\n value.",
                "modAndType": "String"
            },
            {
                "name": "toString(boolean b)",
                "description": "Returns a String object representing the specified\n boolean.",
                "modAndType": "static String"
            },
            {
                "name": "valueOf(boolean b)",
                "description": "Returns a Boolean instance representing the specified\n boolean value.",
                "modAndType": "static Boolean"
            },
            {
                "name": "valueOf(String s)",
                "description": "Returns a Boolean with a value represented by the\n specified string.",
                "modAndType": "static Boolean"
            }
        ],
        "href": "java/lang/Boolean.html"
    },
    {
        "name": "BooleanControl",
        "constructors": [
            {
                "name": "protected BooleanControl(BooleanControl.Type type,\n              boolean initialValue)",
                "description": "Constructs a new boolean control object with the given parameters."
            },
            {
                "name": "protected BooleanControl(BooleanControl.Type type,\n              boolean initialValue,\n              String trueStateLabel,\n              String falseStateLabel)",
                "description": "Constructs a new boolean control object with the given parameters."
            }
        ],
        "methods": [
            {
                "name": "getStateLabel(boolean state)",
                "description": "Obtains the label for the specified state.",
                "modAndType": "String"
            },
            {
                "name": "getValue()",
                "description": "Obtains this control's current value.",
                "modAndType": "boolean"
            },
            {
                "name": "setValue(boolean value)",
                "description": "Sets the current value for the control.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Provides a string representation of the control",
                "modAndType": "String"
            }
        ],
        "href": "javax/sound/sampled/BooleanControl.html"
    },
    {
        "name": "BooleanControl.Type",
        "constructors": [
            {
                "name": "protected Type(String name)",
                "description": "Constructs a new boolean control type."
            }
        ],
        "methods": [],
        "href": "javax/sound/sampled/BooleanControl.Type.html"
    },
    {
        "name": "BooleanHolder",
        "constructors": [
            {
                "name": "BooleanHolder()",
                "description": "Constructs a new BooleanHolder object with its\n value field initialized to false."
            },
            {
                "name": "BooleanHolder(boolean initial)",
                "description": "Constructs a new BooleanHolder object with its\n value field initialized with the given boolean."
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream input)",
                "description": "Reads unmarshalled data from input and assigns it to this\n BooleanHolder object's value field.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object that corresponds to the\n value held in this BooleanHolder object.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream output)",
                "description": "Marshals the value in this BooleanHolder object's\n value field to the output stream output.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CORBA/BooleanHolder.html"
    },
    {
        "name": "BooleanSeqHelper",
        "constructors": [
            {
                "name": "BooleanSeqHelper()",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "extract(Any a)",
                "description": "",
                "modAndType": "static boolean[]"
            },
            {
                "name": "id()",
                "description": "",
                "modAndType": "static String"
            },
            {
                "name": "insert(Any a,\n      boolean[] that)",
                "description": "",
                "modAndType": "static void"
            },
            {
                "name": "read(InputStream istream)",
                "description": "",
                "modAndType": "static boolean[]"
            },
            {
                "name": "type()",
                "description": "",
                "modAndType": "static TypeCode"
            },
            {
                "name": "write(OutputStream ostream,\n     boolean[] value)",
                "description": "",
                "modAndType": "static void"
            }
        ],
        "href": "org/omg/CORBA/BooleanSeqHelper.html"
    },
    {
        "name": "BooleanSeqHolder",
        "constructors": [
            {
                "name": "BooleanSeqHolder()",
                "description": ""
            },
            {
                "name": "BooleanSeqHolder(boolean[] initialValue)",
                "description": ""
            }
        ],
        "methods": [
            {
                "name": "_read(InputStream i)",
                "description": "Reads data from istream and initalizes the\n value field of the Holder with the unmarshalled data.",
                "modAndType": "void"
            },
            {
                "name": "_type()",
                "description": "Retrieves the TypeCode object corresponding to the value\n in the value field of the Holder.",
                "modAndType": "TypeCode"
            },
            {
                "name": "_write(OutputStream o)",
                "description": "Marshals to ostream the value in the\n value field of the Holder.",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CORBA/BooleanSeqHolder.html"
    },
    {
        "name": "BooleanSupplier",
        "constructors": [],
        "methods": [
            {
                "name": "getAsBoolean()",
                "description": "Gets a result.",
                "modAndType": "boolean"
            }
        ],
        "href": "java/util/function/BooleanSupplier.html"
    },
    {
        "name": "BootstrapMethodError",
        "constructors": [
            {
                "name": "BootstrapMethodError()",
                "description": "Constructs a BootstrapMethodError with no detail message."
            },
            {
                "name": "BootstrapMethodError(String s)",
                "description": "Constructs a BootstrapMethodError with the specified\n detail message."
            },
            {
                "name": "BootstrapMethodError(String s,\n                    Throwable cause)",
                "description": "Constructs a BootstrapMethodError with the specified\n detail message and cause."
            },
            {
                "name": "BootstrapMethodError(Throwable cause)",
                "description": "Constructs a BootstrapMethodError with the specified\n cause."
            }
        ],
        "methods": [],
        "href": "java/lang/BootstrapMethodError.html"
    },
    {
        "name": "Border",
        "constructors": [],
        "methods": [
            {
                "name": "getBorderInsets(Component c)",
                "description": "Returns the insets of the border.",
                "modAndType": "Insets"
            },
            {
                "name": "isBorderOpaque()",
                "description": "Returns whether or not the border is opaque.",
                "modAndType": "boolean"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "Paints the border for the specified component with the specified\n position and size.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/border/Border.html"
    },
    {
        "name": "BorderFactory",
        "constructors": [],
        "methods": [
            {
                "name": "createBevelBorder(int type)",
                "description": "Creates a beveled border of the specified type, using\n brighter shades of the component's current background color\n for highlighting, and darker shading for shadows.",
                "modAndType": "static Border"
            },
            {
                "name": "createBevelBorder(int type,\n                 Color highlight,\n                 Color shadow)",
                "description": "Creates a beveled border of the specified type, using\n the specified highlighting and shadowing.",
                "modAndType": "static Border"
            },
            {
                "name": "createBevelBorder(int type,\n                 Color highlightOuter,\n                 Color highlightInner,\n                 Color shadowOuter,\n                 Color shadowInner)",
                "description": "Creates a beveled border of the specified type, using\n the specified colors for the inner and outer highlight\n and shadow areas.",
                "modAndType": "static Border"
            },
            {
                "name": "createCompoundBorder()",
                "description": "Creates a compound border with a null inside edge and a\n null outside edge.",
                "modAndType": "static CompoundBorder"
            },
            {
                "name": "createCompoundBorder(Border outsideBorder,\n                    Border insideBorder)",
                "description": "Creates a compound border specifying the border objects to use\n for the outside and inside edges.",
                "modAndType": "static CompoundBorder"
            },
            {
                "name": "createDashedBorder(Paint paint)",
                "description": "Creates a dashed border of the specified paint.",
                "modAndType": "static Border"
            },
            {
                "name": "createDashedBorder(Paint paint,\n                  float length,\n                  float spacing)",
                "description": "Creates a dashed border of the specified paint,\n relative length, and relative spacing.",
                "modAndType": "static Border"
            },
            {
                "name": "createDashedBorder(Paint paint,\n                  float thickness,\n                  float length,\n                  float spacing,\n                  boolean rounded)",
                "description": "Creates a dashed border of the specified paint, thickness,\n line shape, relative length, and relative spacing.",
                "modAndType": "static Border"
            },
            {
                "name": "createEmptyBorder()",
                "description": "Creates an empty border that takes up no space.",
                "modAndType": "static Border"
            },
            {
                "name": "createEmptyBorder(int top,\n                 int left,\n                 int bottom,\n                 int right)",
                "description": "Creates an empty border that takes up space but which does\n no drawing, specifying the width of the top, left, bottom, and\n right sides.",
                "modAndType": "static Border"
            },
            {
                "name": "createEtchedBorder()",
                "description": "Creates a border with an \"etched\" look using\n the component's current background color for\n highlighting and shading.",
                "modAndType": "static Border"
            },
            {
                "name": "createEtchedBorder(Color highlight,\n                  Color shadow)",
                "description": "Creates a border with an \"etched\" look using\n the specified highlighting and shading colors.",
                "modAndType": "static Border"
            },
            {
                "name": "createEtchedBorder(int type)",
                "description": "Creates a border with an \"etched\" look using\n the component's current background color for\n highlighting and shading.",
                "modAndType": "static Border"
            },
            {
                "name": "createEtchedBorder(int type,\n                  Color highlight,\n                  Color shadow)",
                "description": "Creates a border with an \"etched\" look using\n the specified highlighting and shading colors.",
                "modAndType": "static Border"
            },
            {
                "name": "createLineBorder(Color color)",
                "description": "Creates a line border withe the specified color.",
                "modAndType": "static Border"
            },
            {
                "name": "createLineBorder(Color color,\n                int thickness)",
                "description": "Creates a line border with the specified color\n and width.",
                "modAndType": "static Border"
            },
            {
                "name": "createLineBorder(Color color,\n                int thickness,\n                boolean rounded)",
                "description": "Creates a line border with the specified color, thickness, and corner shape.",
                "modAndType": "static Border"
            },
            {
                "name": "createLoweredBevelBorder()",
                "description": "Creates a border with a lowered beveled edge, using\n brighter shades of the component's current background color\n for highlighting, and darker shading for shadows.",
                "modAndType": "static Border"
            },
            {
                "name": "createLoweredSoftBevelBorder()",
                "description": "Creates a beveled border with a lowered edge and softened corners,\n using brighter shades of the component's current background color\n for highlighting, and darker shading for shadows.",
                "modAndType": "static Border"
            },
            {
                "name": "createMatteBorder(int top,\n                 int left,\n                 int bottom,\n                 int right,\n                 Color color)",
                "description": "Creates a matte-look border using a solid color.",
                "modAndType": "static MatteBorder"
            },
            {
                "name": "createMatteBorder(int top,\n                 int left,\n                 int bottom,\n                 int right,\n                 Icon tileIcon)",
                "description": "Creates a matte-look border that consists of multiple tiles of a\n specified icon.",
                "modAndType": "static MatteBorder"
            },
            {
                "name": "createRaisedBevelBorder()",
                "description": "Creates a border with a raised beveled edge, using\n brighter shades of the component's current background color\n for highlighting, and darker shading for shadows.",
                "modAndType": "static Border"
            },
            {
                "name": "createRaisedSoftBevelBorder()",
                "description": "Creates a beveled border with a raised edge and softened corners,\n using brighter shades of the component's current background color\n for highlighting, and darker shading for shadows.",
                "modAndType": "static Border"
            },
            {
                "name": "createSoftBevelBorder(int type)",
                "description": "Creates a beveled border of the specified type with softened corners,\n using brighter shades of the component's current background color\n for highlighting, and darker shading for shadows.",
                "modAndType": "static Border"
            },
            {
                "name": "createSoftBevelBorder(int type,\n                     Color highlight,\n                     Color shadow)",
                "description": "Creates a beveled border of the specified type with softened corners,\n using the specified highlighting and shadowing.",
                "modAndType": "static Border"
            },
            {
                "name": "createSoftBevelBorder(int type,\n                     Color highlightOuter,\n                     Color highlightInner,\n                     Color shadowOuter,\n                     Color shadowInner)",
                "description": "Creates a beveled border of the specified type with softened corners,\n using the specified colors for the inner and outer edges\n of the highlight and the shadow areas.",
                "modAndType": "static Border"
            },
            {
                "name": "createStrokeBorder(BasicStroke stroke)",
                "description": "Creates a border of the specified stroke.",
                "modAndType": "static Border"
            },
            {
                "name": "createStrokeBorder(BasicStroke stroke,\n                  Paint paint)",
                "description": "Creates a border of the specified stroke and paint.",
                "modAndType": "static Border"
            },
            {
                "name": "createTitledBorder(Border border)",
                "description": "Creates a new titled border with an empty title,\n the specified border object,\n the default text position (determined by the current look and feel),\n the default justification (leading), and the default\n font and text color (determined by the current look and feel).",
                "modAndType": "static TitledBorder"
            },
            {
                "name": "createTitledBorder(Border border,\n                  String title)",
                "description": "Adds a title to an existing border,\n with default positioning (determined by the current look and feel),\n default justification (leading) and the default\n font and text color (determined by the current look and feel).",
                "modAndType": "static TitledBorder"
            },
            {
                "name": "createTitledBorder(Border border,\n                  String title,\n                  int titleJustification,\n                  int titlePosition)",
                "description": "Adds a title to an existing border, with the specified\n positioning and using the default\n font and text color (determined by the current look and feel).",
                "modAndType": "static TitledBorder"
            },
            {
                "name": "createTitledBorder(Border border,\n                  String title,\n                  int titleJustification,\n                  int titlePosition,\n                  Font titleFont)",
                "description": "Adds a title to an existing border, with the specified\n positioning and font, and using the default text color\n (determined by the current look and feel).",
                "modAndType": "static TitledBorder"
            },
            {
                "name": "createTitledBorder(Border border,\n                  String title,\n                  int titleJustification,\n                  int titlePosition,\n                  Font titleFont,\n                  Color titleColor)",
                "description": "Adds a title to an existing border, with the specified\n positioning, font and color.",
                "modAndType": "static TitledBorder"
            },
            {
                "name": "createTitledBorder(String title)",
                "description": "Creates a new titled border with the specified title,\n the default border type (determined by the current look and feel),\n the default text position (determined by the current look and feel),\n the default justification (leading), and the default\n font and text color (determined by the current look and feel).",
                "modAndType": "static TitledBorder"
            }
        ],
        "href": "javax/swing/BorderFactory.html"
    },
    {
        "name": "BorderLayout",
        "constructors": [
            {
                "name": "BorderLayout()",
                "description": "Constructs a new border layout with\n no gaps between components."
            },
            {
                "name": "BorderLayout(int hgap,\n            int vgap)",
                "description": "Constructs a border layout with the specified gaps\n between components."
            }
        ],
        "methods": [
            {
                "name": "addLayoutComponent(Component comp,\n                  Object constraints)",
                "description": "Adds the specified component to the layout, using the specified\n constraint object.",
                "modAndType": "void"
            },
            {
                "name": "addLayoutComponent(String name,\n                  Component comp)",
                "description": "Deprecated. \nreplaced by addLayoutComponent(Component, Object).\n",
                "modAndType": "void"
            },
            {
                "name": "getConstraints(Component comp)",
                "description": "Gets the constraints for the specified component",
                "modAndType": "Object"
            },
            {
                "name": "getHgap()",
                "description": "Returns the horizontal gap between components.",
                "modAndType": "int"
            },
            {
                "name": "getLayoutAlignmentX(Container parent)",
                "description": "Returns the alignment along the x axis.",
                "modAndType": "float"
            },
            {
                "name": "getLayoutAlignmentY(Container parent)",
                "description": "Returns the alignment along the y axis.",
                "modAndType": "float"
            },
            {
                "name": "getLayoutComponent(Container target,\n                  Object constraints)",
                "description": "Returns the component that corresponds to the given constraint location\n based on the target Container's component orientation.",
                "modAndType": "Component"
            },
            {
                "name": "getLayoutComponent(Object constraints)",
                "description": "Gets the component that was added using the given constraint",
                "modAndType": "Component"
            },
            {
                "name": "getVgap()",
                "description": "Returns the vertical gap between components.",
                "modAndType": "int"
            },
            {
                "name": "invalidateLayout(Container target)",
                "description": "Invalidates the layout, indicating that if the layout manager\n has cached information it should be discarded.",
                "modAndType": "void"
            },
            {
                "name": "layoutContainer(Container target)",
                "description": "Lays out the container argument using this border layout.",
                "modAndType": "void"
            },
            {
                "name": "maximumLayoutSize(Container target)",
                "description": "Returns the maximum dimensions for this layout given the components\n in the specified target container.",
                "modAndType": "Dimension"
            },
            {
                "name": "minimumLayoutSize(Container target)",
                "description": "Determines the minimum size of the target container\n using this layout manager.",
                "modAndType": "Dimension"
            },
            {
                "name": "preferredLayoutSize(Container target)",
                "description": "Determines the preferred size of the target\n container using this layout manager, based on the components\n in the container.",
                "modAndType": "Dimension"
            },
            {
                "name": "removeLayoutComponent(Component comp)",
                "description": "Removes the specified component from this border layout.",
                "modAndType": "void"
            },
            {
                "name": "setHgap(int hgap)",
                "description": "Sets the horizontal gap between components.",
                "modAndType": "void"
            },
            {
                "name": "setVgap(int vgap)",
                "description": "Sets the vertical gap between components.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of the state of this border layout.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/BorderLayout.html"
    },
    {
        "name": "BorderUIResource",
        "constructors": [
            {
                "name": "BorderUIResource(Border delegate)",
                "description": "Creates a UIResource border object which wraps\n an existing Border instance."
            }
        ],
        "methods": [
            {
                "name": "getBlackLineBorderUIResource()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getBorderInsets(Component c)",
                "description": "Returns the insets of the border.",
                "modAndType": "Insets"
            },
            {
                "name": "getEtchedBorderUIResource()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getLoweredBevelBorderUIResource()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "getRaisedBevelBorderUIResource()",
                "description": "",
                "modAndType": "static Border"
            },
            {
                "name": "isBorderOpaque()",
                "description": "Returns whether or not the border is opaque.",
                "modAndType": "boolean"
            },
            {
                "name": "paintBorder(Component c,\n           Graphics g,\n           int x,\n           int y,\n           int width,\n           int height)",
                "description": "Paints the border for the specified component with the specified\n position and size.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/plaf/BorderUIResource.html"
    },
    {
        "name": "BorderUIResource.BevelBorderUIResource",
        "constructors": [
            {
                "name": "BevelBorderUIResource(int bevelType)",
                "description": ""
            },
            {
                "name": "BevelBorderUIResource(int bevelType,\n                     Color highlight,\n                     Color shadow)",
                "description": ""
            },
            {
                "name": "BevelBorderUIResource(int bevelType,\n                     Color highlightOuter,\n                     Color highlightInner,\n                     Color shadowOuter,\n                     Color shadowInner)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.BevelBorderUIResource.html"
    },
    {
        "name": "BorderUIResource.CompoundBorderUIResource",
        "constructors": [
            {
                "name": "CompoundBorderUIResource(Border outsideBorder,\n                        Border insideBorder)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.CompoundBorderUIResource.html"
    },
    {
        "name": "BorderUIResource.EmptyBorderUIResource",
        "constructors": [
            {
                "name": "EmptyBorderUIResource(Insets insets)",
                "description": ""
            },
            {
                "name": "EmptyBorderUIResource(int top,\n                     int left,\n                     int bottom,\n                     int right)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.EmptyBorderUIResource.html"
    },
    {
        "name": "BorderUIResource.EtchedBorderUIResource",
        "constructors": [
            {
                "name": "EtchedBorderUIResource()",
                "description": ""
            },
            {
                "name": "EtchedBorderUIResource(Color highlight,\n                      Color shadow)",
                "description": ""
            },
            {
                "name": "EtchedBorderUIResource(int etchType)",
                "description": ""
            },
            {
                "name": "EtchedBorderUIResource(int etchType,\n                      Color highlight,\n                      Color shadow)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.EtchedBorderUIResource.html"
    },
    {
        "name": "BorderUIResource.LineBorderUIResource",
        "constructors": [
            {
                "name": "LineBorderUIResource(Color color)",
                "description": ""
            },
            {
                "name": "LineBorderUIResource(Color color,\n                    int thickness)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.LineBorderUIResource.html"
    },
    {
        "name": "BorderUIResource.MatteBorderUIResource",
        "constructors": [
            {
                "name": "MatteBorderUIResource(Icon tileIcon)",
                "description": ""
            },
            {
                "name": "MatteBorderUIResource(int top,\n                     int left,\n                     int bottom,\n                     int right,\n                     Color color)",
                "description": ""
            },
            {
                "name": "MatteBorderUIResource(int top,\n                     int left,\n                     int bottom,\n                     int right,\n                     Icon tileIcon)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.MatteBorderUIResource.html"
    },
    {
        "name": "BorderUIResource.TitledBorderUIResource",
        "constructors": [
            {
                "name": "TitledBorderUIResource(Border border)",
                "description": ""
            },
            {
                "name": "TitledBorderUIResource(Border border,\n                      String title)",
                "description": ""
            },
            {
                "name": "TitledBorderUIResource(Border border,\n                      String title,\n                      int titleJustification,\n                      int titlePosition)",
                "description": ""
            },
            {
                "name": "TitledBorderUIResource(Border border,\n                      String title,\n                      int titleJustification,\n                      int titlePosition,\n                      Font titleFont)",
                "description": ""
            },
            {
                "name": "TitledBorderUIResource(Border border,\n                      String title,\n                      int titleJustification,\n                      int titlePosition,\n                      Font titleFont,\n                      Color titleColor)",
                "description": ""
            },
            {
                "name": "TitledBorderUIResource(String title)",
                "description": ""
            }
        ],
        "methods": [],
        "href": "javax/swing/plaf/BorderUIResource.TitledBorderUIResource.html"
    },
    {
        "name": "BoundedRangeModel",
        "constructors": [],
        "methods": [
            {
                "name": "addChangeListener(ChangeListener x)",
                "description": "Adds a ChangeListener to the model's listener list.",
                "modAndType": "void"
            },
            {
                "name": "getExtent()",
                "description": "Returns the model's extent, the length of the inner range that\n begins at the model's value.",
                "modAndType": "int"
            },
            {
                "name": "getMaximum()",
                "description": "Returns the model's maximum.",
                "modAndType": "int"
            },
            {
                "name": "getMinimum()",
                "description": "Returns the minimum acceptable value.",
                "modAndType": "int"
            },
            {
                "name": "getValue()",
                "description": "Returns the model's current value.",
                "modAndType": "int"
            },
            {
                "name": "getValueIsAdjusting()",
                "description": "Returns true if the current changes to the value property are part\n of a series of changes.",
                "modAndType": "boolean"
            },
            {
                "name": "removeChangeListener(ChangeListener x)",
                "description": "Removes a ChangeListener from the model's listener list.",
                "modAndType": "void"
            },
            {
                "name": "setExtent(int newExtent)",
                "description": "Sets the model's extent.",
                "modAndType": "void"
            },
            {
                "name": "setMaximum(int newMaximum)",
                "description": "Sets the model's maximum to newMaximum.",
                "modAndType": "void"
            },
            {
                "name": "setMinimum(int newMinimum)",
                "description": "Sets the model's minimum to newMinimum.",
                "modAndType": "void"
            },
            {
                "name": "setRangeProperties(int value,\n                  int extent,\n                  int min,\n                  int max,\n                  boolean adjusting)",
                "description": "This method sets all of the model's data with a single method call.",
                "modAndType": "void"
            },
            {
                "name": "setValue(int newValue)",
                "description": "Sets the model's current value to newValue if newValue\n satisfies the model's constraints.",
                "modAndType": "void"
            },
            {
                "name": "setValueIsAdjusting(boolean b)",
                "description": "This attribute indicates that any upcoming changes to the value\n of the model should be considered a single event.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/BoundedRangeModel.html"
    },
    {
        "name": "Bounds",
        "constructors": [
            {
                "name": "Bounds()",
                "description": "Constructs an Bounds with no specified detail message."
            },
            {
                "name": "Bounds(String reason)",
                "description": "Constructs an Bounds with the specified detail message."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/Bounds.html"
    },
    {
        "name": "Bounds",
        "constructors": [
            {
                "name": "Bounds()",
                "description": "Constructs a Bounds exception with no reason message."
            },
            {
                "name": "Bounds(String reason)",
                "description": "Constructs a Bounds exception with the specified\n reason message."
            }
        ],
        "methods": [],
        "href": "org/omg/CORBA/TypeCodePackage/Bounds.html"
    },
    {
        "name": "Box",
        "constructors": [
            {
                "name": "Box(int axis)",
                "description": "Creates a Box that displays its components\n along the the specified axis."
            }
        ],
        "methods": [
            {
                "name": "createGlue()",
                "description": "Creates an invisible \"glue\" component\n that can be useful in a Box\n whose visible components have a maximum width\n (for a horizontal box)\n or height (for a vertical box).",
                "modAndType": "static Component"
            },
            {
                "name": "createHorizontalBox()",
                "description": "Creates a Box that displays its components\n from left to right.",
                "modAndType": "static Box"
            },
            {
                "name": "createHorizontalGlue()",
                "description": "Creates a horizontal glue component.",
                "modAndType": "static Component"
            },
            {
                "name": "createHorizontalStrut(int width)",
                "description": "Creates an invisible, fixed-width component.",
                "modAndType": "static Component"
            },
            {
                "name": "createRigidArea(Dimension d)",
                "description": "Creates an invisible component that's always the specified size.",
                "modAndType": "static Component"
            },
            {
                "name": "createVerticalBox()",
                "description": "Creates a Box that displays its components\n from top to bottom.",
                "modAndType": "static Box"
            },
            {
                "name": "createVerticalGlue()",
                "description": "Creates a vertical glue component.",
                "modAndType": "static Component"
            },
            {
                "name": "createVerticalStrut(int height)",
                "description": "Creates an invisible, fixed-height component.",
                "modAndType": "static Component"
            },
            {
                "name": "getAccessibleContext()",
                "description": "Gets the AccessibleContext associated with this Box.",
                "modAndType": "AccessibleContext"
            },
            {
                "name": "paintComponent(Graphics g)",
                "description": "Paints this Box.",
                "modAndType": "protected void"
            },
            {
                "name": "setLayout(LayoutManager l)",
                "description": "Throws an AWTError, since a Box can use only a BoxLayout.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/Box.html"
    },
    {
        "name": "Box.Filler",
        "constructors": [
            {
                "name": "Filler(Dimension min,\n      Dimension pref,\n      Dimension max)",
                "description": "Constructor to create shape with the given size ranges."
            }
        ],
        "methods": [
            {
                "name": "changeShape(Dimension min,\n           Dimension pref,\n           Dimension max)",
                "description": "Change the size requests for this shape.",
                "modAndType": "void"
            },
            {
                "name": "getAccessibleContext()",
                "description": "Gets the AccessibleContext associated with this Box.Filler.",
                "modAndType": "AccessibleContext"
            },
            {
                "name": "paintComponent(Graphics g)",
                "description": "Paints this Filler.",
                "modAndType": "protected void"
            }
        ],
        "href": "javax/swing/Box.Filler.html"
    },
    {
        "name": "BoxedValueHelper",
        "constructors": [],
        "methods": [
            {
                "name": "get_id()",
                "description": "",
                "modAndType": "String"
            },
            {
                "name": "read_value(InputStream is)",
                "description": "",
                "modAndType": "Serializable"
            },
            {
                "name": "write_value(OutputStream os,\n           Serializable value)",
                "description": "",
                "modAndType": "void"
            }
        ],
        "href": "org/omg/CORBA/portable/BoxedValueHelper.html"
    },
    {
        "name": "BoxLayout",
        "constructors": [
            {
                "name": "BoxLayout(Container target,\n         int axis)",
                "description": "Creates a layout manager that will lay out components along the\n given axis."
            }
        ],
        "methods": [
            {
                "name": "addLayoutComponent(Component comp,\n                  Object constraints)",
                "description": "Not used by this class.",
                "modAndType": "void"
            },
            {
                "name": "addLayoutComponent(String name,\n                  Component comp)",
                "description": "Not used by this class.",
                "modAndType": "void"
            },
            {
                "name": "getAxis()",
                "description": "Returns the axis that was used to lay out components.",
                "modAndType": "int"
            },
            {
                "name": "getLayoutAlignmentX(Container target)",
                "description": "Returns the alignment along the X axis for the container.",
                "modAndType": "float"
            },
            {
                "name": "getLayoutAlignmentY(Container target)",
                "description": "Returns the alignment along the Y axis for the container.",
                "modAndType": "float"
            },
            {
                "name": "getTarget()",
                "description": "Returns the container that uses this layout manager.",
                "modAndType": "Container"
            },
            {
                "name": "invalidateLayout(Container target)",
                "description": "Indicates that a child has changed its layout related information,\n and thus any cached calculations should be flushed.",
                "modAndType": "void"
            },
            {
                "name": "layoutContainer(Container target)",
                "description": "Called by the AWT  when the specified container\n needs to be laid out.",
                "modAndType": "void"
            },
            {
                "name": "maximumLayoutSize(Container target)",
                "description": "Returns the maximum dimensions the target container can use\n to lay out the components it contains.",
                "modAndType": "Dimension"
            },
            {
                "name": "minimumLayoutSize(Container target)",
                "description": "Returns the minimum dimensions needed to lay out the components\n contained in the specified target container.",
                "modAndType": "Dimension"
            },
            {
                "name": "preferredLayoutSize(Container target)",
                "description": "Returns the preferred dimensions for this layout, given the components\n in the specified target container.",
                "modAndType": "Dimension"
            },
            {
                "name": "removeLayoutComponent(Component comp)",
                "description": "Not used by this class.",
                "modAndType": "void"
            }
        ],
        "href": "javax/swing/BoxLayout.html"
    },
    {
        "name": "BoxView",
        "constructors": [
            {
                "name": "BoxView(Element elem,\n       int axis)",
                "description": "Constructs a BoxView."
            }
        ],
        "methods": [
            {
                "name": "baselineLayout(int targetSpan,\n              int axis,\n              int[] offsets,\n              int[] spans)",
                "description": "Computes the location and extent of each child view\n in this BoxView given the targetSpan,\n which is the width (or height) of the region we have to\n work with.",
                "modAndType": "protected void"
            },
            {
                "name": "baselineRequirements(int axis,\n                    SizeRequirements r)",
                "description": "Calculates the size requirements for this BoxView\n by examining the size of each child view.",
                "modAndType": "protected SizeRequirements"
            },
            {
                "name": "calculateMajorAxisRequirements(int axis,\n                              SizeRequirements r)",
                "description": "Calculates the size requirements for the major axis\n axis.",
                "modAndType": "protected SizeRequirements"
            },
            {
                "name": "calculateMinorAxisRequirements(int axis,\n                              SizeRequirements r)",
                "description": "Calculates the size requirements for the minor axis\n axis.",
                "modAndType": "protected SizeRequirements"
            },
            {
                "name": "childAllocation(int index,\n               Rectangle alloc)",
                "description": "Allocates a region for a child view.",
                "modAndType": "protected void"
            },
            {
                "name": "flipEastAndWestAtEnds(int position,\n                     Position.Bias bias)",
                "description": "Determines in which direction the next view lays.",
                "modAndType": "protected boolean"
            },
            {
                "name": "forwardUpdate(DocumentEvent.ElementChange ec,\n             DocumentEvent e,\n             Shape a,\n             ViewFactory f)",
                "description": "Forwards the given DocumentEvent to the child views\n that need to be notified of the change to the model.",
                "modAndType": "protected void"
            },
            {
                "name": "getAlignment(int axis)",
                "description": "Determines the desired alignment for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getAxis()",
                "description": "Fetches the tile axis property.",
                "modAndType": "int"
            },
            {
                "name": "getChildAllocation(int index,\n                  Shape a)",
                "description": "Fetches the allocation for the given child view.",
                "modAndType": "Shape"
            },
            {
                "name": "getHeight()",
                "description": "Returns the current height of the box.",
                "modAndType": "int"
            },
            {
                "name": "getMaximumSpan(int axis)",
                "description": "Determines the maximum span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getMinimumSpan(int axis)",
                "description": "Determines the minimum span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getOffset(int axis,\n         int childIndex)",
                "description": "Fetches the offset of a particular child's current layout.",
                "modAndType": "protected int"
            },
            {
                "name": "getPreferredSpan(int axis)",
                "description": "Determines the preferred span for this view along an\n axis.",
                "modAndType": "float"
            },
            {
                "name": "getResizeWeight(int axis)",
                "description": "Gets the resize weight.",
                "modAndType": "int"
            },
            {
                "name": "getSpan(int axis,\n       int childIndex)",
                "description": "Fetches the span of a particular child's current layout.",
                "modAndType": "protected int"
            },
            {
                "name": "getViewAtPoint(int x,\n              int y,\n              Rectangle alloc)",
                "description": "Fetches the child view at the given coordinates.",
                "modAndType": "protected View"
            },
            {
                "name": "getWidth()",
                "description": "Returns the current width of the box.",
                "modAndType": "int"
            },
            {
                "name": "isAfter(int x,\n       int y,\n       Rectangle innerAlloc)",
                "description": "Determines if a point falls after an allocated region.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isAllocationValid()",
                "description": "Are the allocations for the children still\n valid?",
                "modAndType": "protected boolean"
            },
            {
                "name": "isBefore(int x,\n        int y,\n        Rectangle innerAlloc)",
                "description": "Determines if a point falls before an allocated region.",
                "modAndType": "protected boolean"
            },
            {
                "name": "isLayoutValid(int axis)",
                "description": "Determines if the layout is valid along the given axis.",
                "modAndType": "protected boolean"
            },
            {
                "name": "layout(int width,\n      int height)",
                "description": "Perform layout on the box",
                "modAndType": "protected void"
            },
            {
                "name": "layoutChanged(int axis)",
                "description": "Invalidates the layout along an axis.",
                "modAndType": "void"
            },
            {
                "name": "layoutMajorAxis(int targetSpan,\n               int axis,\n               int[] offsets,\n               int[] spans)",
                "description": "Performs layout for the major axis of the box (i.e.",
                "modAndType": "protected void"
            },
            {
                "name": "layoutMinorAxis(int targetSpan,\n               int axis,\n               int[] offsets,\n               int[] spans)",
                "description": "Performs layout for the minor axis of the box (i.e.",
                "modAndType": "protected void"
            },
            {
                "name": "modelToView(int pos,\n           Shape a,\n           Position.Bias b)",
                "description": "Provides a mapping from the document model coordinate space\n to the coordinate space of the view mapped to it.",
                "modAndType": "Shape"
            },
            {
                "name": "paint(Graphics g,\n     Shape allocation)",
                "description": "Renders the BoxView using the given\n rendering surface and area\n on that surface.",
                "modAndType": "void"
            },
            {
                "name": "paintChild(Graphics g,\n          Rectangle alloc,\n          int index)",
                "description": "Paints a child.",
                "modAndType": "protected void"
            },
            {
                "name": "preferenceChanged(View child,\n                 boolean width,\n                 boolean height)",
                "description": "This is called by a child to indicate its\n preferred span has changed.",
                "modAndType": "void"
            },
            {
                "name": "replace(int index,\n       int length,\n       View[] elems)",
                "description": "Invalidates the layout and resizes the cache of\n requests/allocations.",
                "modAndType": "void"
            },
            {
                "name": "setAxis(int axis)",
                "description": "Sets the tile axis property.",
                "modAndType": "void"
            },
            {
                "name": "setSize(float width,\n       float height)",
                "description": "Sets the size of the view.",
                "modAndType": "void"
            },
            {
                "name": "viewToModel(float x,\n           float y,\n           Shape a,\n           Position.Bias[] bias)",
                "description": "Provides a mapping from the view coordinate space to the logical\n coordinate space of the model.",
                "modAndType": "int"
            }
        ],
        "href": "javax/swing/text/BoxView.html"
    },
    {
        "name": "BreakIterator",
        "constructors": [
            {
                "name": "protected BreakIterator()",
                "description": "Constructor."
            }
        ],
        "methods": [
            {
                "name": "clone()",
                "description": "Create a copy of this iterator",
                "modAndType": "Object"
            },
            {
                "name": "current()",
                "description": "Returns character index of the text boundary that was most\n recently returned by next(), next(int), previous(), first(), last(),\n following(int) or preceding(int).",
                "modAndType": "abstract int"
            },
            {
                "name": "first()",
                "description": "Returns the first boundary.",
                "modAndType": "abstract int"
            },
            {
                "name": "following(int offset)",
                "description": "Returns the first boundary following the specified character offset.",
                "modAndType": "abstract int"
            },
            {
                "name": "getAvailableLocales()",
                "description": "Returns an array of all locales for which the\n get*Instance methods of this class can return\n localized instances.",
                "modAndType": "static Locale[]"
            },
            {
                "name": "getCharacterInstance()",
                "description": "Returns a new BreakIterator instance\n for character breaks\n for the default locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getCharacterInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for character breaks\n for the given locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getLineInstance()",
                "description": "Returns a new BreakIterator instance\n for line breaks\n for the default locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getLineInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for line breaks\n for the given locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getSentenceInstance()",
                "description": "Returns a new BreakIterator instance\n for sentence breaks\n for the default locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getSentenceInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for sentence breaks\n for the given locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getText()",
                "description": "Get the text being scanned",
                "modAndType": "abstract CharacterIterator"
            },
            {
                "name": "getWordInstance()",
                "description": "Returns a new BreakIterator instance\n for word breaks\n for the default locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "getWordInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for word breaks\n for the given locale.",
                "modAndType": "static BreakIterator"
            },
            {
                "name": "isBoundary(int offset)",
                "description": "Returns true if the specified character offset is a text boundary.",
                "modAndType": "boolean"
            },
            {
                "name": "last()",
                "description": "Returns the last boundary.",
                "modAndType": "abstract int"
            },
            {
                "name": "next()",
                "description": "Returns the boundary following the current boundary.",
                "modAndType": "abstract int"
            },
            {
                "name": "next(int n)",
                "description": "Returns the nth boundary from the current boundary.",
                "modAndType": "abstract int"
            },
            {
                "name": "preceding(int offset)",
                "description": "Returns the last boundary preceding the specified character offset.",
                "modAndType": "int"
            },
            {
                "name": "previous()",
                "description": "Returns the boundary preceding the current boundary.",
                "modAndType": "abstract int"
            },
            {
                "name": "setText(CharacterIterator newText)",
                "description": "Set a new text for scanning.",
                "modAndType": "abstract void"
            },
            {
                "name": "setText(String newText)",
                "description": "Set a new text string to be scanned.",
                "modAndType": "void"
            }
        ],
        "href": "java/text/BreakIterator.html"
    },
    {
        "name": "BreakIteratorProvider",
        "constructors": [
            {
                "name": "protected BreakIteratorProvider()",
                "description": "Sole constructor."
            }
        ],
        "methods": [
            {
                "name": "getCharacterInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for character breaks\n for the given locale.",
                "modAndType": "abstract BreakIterator"
            },
            {
                "name": "getLineInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for line breaks\n for the given locale.",
                "modAndType": "abstract BreakIterator"
            },
            {
                "name": "getSentenceInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for sentence breaks\n for the given locale.",
                "modAndType": "abstract BreakIterator"
            },
            {
                "name": "getWordInstance(Locale locale)",
                "description": "Returns a new BreakIterator instance\n for word breaks\n for the given locale.",
                "modAndType": "abstract BreakIterator"
            }
        ],
        "href": "java/text/spi/BreakIteratorProvider.html"
    },
    {
        "name": "BrokenBarrierException",
        "constructors": [
            {
                "name": "BrokenBarrierException()",
                "description": "Constructs a BrokenBarrierException with no specified detail\n message."
            },
            {
                "name": "BrokenBarrierException(String message)",
                "description": "Constructs a BrokenBarrierException with the specified\n detail message."
            }
        ],
        "methods": [],
        "href": "java/util/concurrent/BrokenBarrierException.html"
    },
    {
        "name": "Buffer",
        "constructors": [],
        "methods": [
            {
                "name": "array()",
                "description": "Returns the array that backs this\n buffer  (optional operation).",
                "modAndType": "abstract Object"
            },
            {
                "name": "arrayOffset()",
                "description": "Returns the offset within this buffer's backing array of the first\n element of the buffer  (optional operation).",
                "modAndType": "abstract int"
            },
            {
                "name": "capacity()",
                "description": "Returns this buffer's capacity.",
                "modAndType": "int"
            },
            {
                "name": "clear()",
                "description": "Clears this buffer.",
                "modAndType": "Buffer"
            },
            {
                "name": "flip()",
                "description": "Flips this buffer.",
                "modAndType": "Buffer"
            },
            {
                "name": "hasArray()",
                "description": "Tells whether or not this buffer is backed by an accessible\n array.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "hasRemaining()",
                "description": "Tells whether there are any elements between the current position and\n the limit.",
                "modAndType": "boolean"
            },
            {
                "name": "isDirect()",
                "description": "Tells whether or not this buffer is\n direct.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "isReadOnly()",
                "description": "Tells whether or not this buffer is read-only.",
                "modAndType": "abstract boolean"
            },
            {
                "name": "limit()",
                "description": "Returns this buffer's limit.",
                "modAndType": "int"
            },
            {
                "name": "limit(int newLimit)",
                "description": "Sets this buffer's limit.",
                "modAndType": "Buffer"
            },
            {
                "name": "mark()",
                "description": "Sets this buffer's mark at its position.",
                "modAndType": "Buffer"
            },
            {
                "name": "position()",
                "description": "Returns this buffer's position.",
                "modAndType": "int"
            },
            {
                "name": "position(int newPosition)",
                "description": "Sets this buffer's position.",
                "modAndType": "Buffer"
            },
            {
                "name": "remaining()",
                "description": "Returns the number of elements between the current position and the\n limit.",
                "modAndType": "int"
            },
            {
                "name": "reset()",
                "description": "Resets this buffer's position to the previously-marked position.",
                "modAndType": "Buffer"
            },
            {
                "name": "rewind()",
                "description": "Rewinds this buffer.",
                "modAndType": "Buffer"
            }
        ],
        "href": "java/nio/Buffer.html"
    },
    {
        "name": "BufferCapabilities",
        "constructors": [
            {
                "name": "BufferCapabilities(ImageCapabilities frontCaps,\n                  ImageCapabilities backCaps,\n                  BufferCapabilities.FlipContents flipContents)",
                "description": "Creates a new object for specifying buffering capabilities"
            }
        ],
        "methods": [
            {
                "name": "clone()",
                "description": "Creates and returns a copy of this object.",
                "modAndType": "Object"
            },
            {
                "name": "getBackBufferCapabilities()",
                "description": "",
                "modAndType": "ImageCapabilities"
            },
            {
                "name": "getFlipContents()",
                "description": "",
                "modAndType": "BufferCapabilities.FlipContents"
            },
            {
                "name": "getFrontBufferCapabilities()",
                "description": "",
                "modAndType": "ImageCapabilities"
            },
            {
                "name": "isFullScreenRequired()",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "isMultiBufferAvailable()",
                "description": "",
                "modAndType": "boolean"
            },
            {
                "name": "isPageFlipping()",
                "description": "",
                "modAndType": "boolean"
            }
        ],
        "href": "java/awt/BufferCapabilities.html"
    },
    {
        "name": "BufferCapabilities.FlipContents",
        "constructors": [],
        "methods": [
            {
                "name": "hashCode()",
                "description": "Returns a hash code value for the object.",
                "modAndType": "int"
            },
            {
                "name": "toString()",
                "description": "Returns a string representation of the object.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/BufferCapabilities.FlipContents.html"
    },
    {
        "name": "BufferedImage",
        "constructors": [
            {
                "name": "BufferedImage(ColorModel cm,\n             WritableRaster raster,\n             boolean isRasterPremultiplied,\n             Hashtable<?,?> properties)",
                "description": "Constructs a new BufferedImage with a specified\n ColorModel and Raster."
            },
            {
                "name": "BufferedImage(int width,\n             int height,\n             int imageType)",
                "description": "Constructs a BufferedImage of one of the predefined\n image types."
            },
            {
                "name": "BufferedImage(int width,\n             int height,\n             int imageType,\n             IndexColorModel cm)",
                "description": "Constructs a BufferedImage of one of the predefined\n image types:\n TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED."
            }
        ],
        "methods": [
            {
                "name": "addTileObserver(TileObserver to)",
                "description": "Adds a tile observer.",
                "modAndType": "void"
            },
            {
                "name": "coerceData(boolean isAlphaPremultiplied)",
                "description": "Forces the data to match the state specified in the\n isAlphaPremultiplied variable.",
                "modAndType": "void"
            },
            {
                "name": "copyData(WritableRaster outRaster)",
                "description": "Computes an arbitrary rectangular region of the\n BufferedImage and copies it into a specified\n WritableRaster.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "createGraphics()",
                "description": "Creates a Graphics2D, which can be used to draw into\n this BufferedImage.",
                "modAndType": "Graphics2D"
            },
            {
                "name": "getAlphaRaster()",
                "description": "Returns a WritableRaster representing the alpha\n channel for BufferedImage objects\n with ColorModel objects that support a separate\n spatial alpha channel, such as ComponentColorModel and\n DirectColorModel.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "getColorModel()",
                "description": "Returns the ColorModel.",
                "modAndType": "ColorModel"
            },
            {
                "name": "getData()",
                "description": "Returns the image as one large tile.",
                "modAndType": "Raster"
            },
            {
                "name": "getData(Rectangle rect)",
                "description": "Computes and returns an arbitrary region of the\n BufferedImage.",
                "modAndType": "Raster"
            },
            {
                "name": "getGraphics()",
                "description": "This method returns a Graphics2D, but is here\n for backwards compatibility.",
                "modAndType": "Graphics"
            },
            {
                "name": "getHeight()",
                "description": "Returns the height of the BufferedImage.",
                "modAndType": "int"
            },
            {
                "name": "getHeight(ImageObserver observer)",
                "description": "Returns the height of the BufferedImage.",
                "modAndType": "int"
            },
            {
                "name": "getMinTileX()",
                "description": "Returns the minimum tile index in the x direction.",
                "modAndType": "int"
            },
            {
                "name": "getMinTileY()",
                "description": "Returns the minimum tile index in the y direction.",
                "modAndType": "int"
            },
            {
                "name": "getMinX()",
                "description": "Returns the minimum x coordinate of this\n BufferedImage.",
                "modAndType": "int"
            },
            {
                "name": "getMinY()",
                "description": "Returns the minimum y coordinate of this\n BufferedImage.",
                "modAndType": "int"
            },
            {
                "name": "getNumXTiles()",
                "description": "Returns the number of tiles in the x direction.",
                "modAndType": "int"
            },
            {
                "name": "getNumYTiles()",
                "description": "Returns the number of tiles in the y direction.",
                "modAndType": "int"
            },
            {
                "name": "getProperty(String name)",
                "description": "Returns a property of the image by name.",
                "modAndType": "Object"
            },
            {
                "name": "getProperty(String name,\n           ImageObserver observer)",
                "description": "Returns a property of the image by name.",
                "modAndType": "Object"
            },
            {
                "name": "getPropertyNames()",
                "description": "Returns an array of names recognized by\n getProperty(String)\n or null, if no property names are recognized.",
                "modAndType": "String[]"
            },
            {
                "name": "getRaster()",
                "description": "Returns the WritableRaster.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "getRGB(int x,\n      int y)",
                "description": "Returns an integer pixel in the default RGB color model\n (TYPE_INT_ARGB) and default sRGB colorspace.",
                "modAndType": "int"
            },
            {
                "name": "getRGB(int startX,\n      int startY,\n      int w,\n      int h,\n      int[] rgbArray,\n      int offset,\n      int scansize)",
                "description": "Returns an array of integer pixels in the default RGB color model\n (TYPE_INT_ARGB) and default sRGB color space,\n from a portion of the image data.",
                "modAndType": "int[]"
            },
            {
                "name": "getSampleModel()",
                "description": "Returns the SampleModel associated with this\n BufferedImage.",
                "modAndType": "SampleModel"
            },
            {
                "name": "getSource()",
                "description": "Returns the object that produces the pixels for the image.",
                "modAndType": "ImageProducer"
            },
            {
                "name": "getSources()",
                "description": "Returns a Vector of RenderedImage objects that are\n the immediate sources, not the sources of these immediate sources,\n of image data for this BufferedImage.",
                "modAndType": "Vector<RenderedImage>"
            },
            {
                "name": "getSubimage(int x,\n           int y,\n           int w,\n           int h)",
                "description": "Returns a subimage defined by a specified rectangular region.",
                "modAndType": "BufferedImage"
            },
            {
                "name": "getTile(int tileX,\n       int tileY)",
                "description": "Returns tile (tileX, tileY).",
                "modAndType": "Raster"
            },
            {
                "name": "getTileGridXOffset()",
                "description": "Returns the x offset of the tile grid relative to the origin,\n For example, the x coordinate of the location of tile\n (0, 0).",
                "modAndType": "int"
            },
            {
                "name": "getTileGridYOffset()",
                "description": "Returns the y offset of the tile grid relative to the origin,\n For example, the y coordinate of the location of tile\n (0, 0).",
                "modAndType": "int"
            },
            {
                "name": "getTileHeight()",
                "description": "Returns the tile height in pixels.",
                "modAndType": "int"
            },
            {
                "name": "getTileWidth()",
                "description": "Returns the tile width in pixels.",
                "modAndType": "int"
            },
            {
                "name": "getTransparency()",
                "description": "Returns the transparency.",
                "modAndType": "int"
            },
            {
                "name": "getType()",
                "description": "Returns the image type.",
                "modAndType": "int"
            },
            {
                "name": "getWidth()",
                "description": "Returns the width of the BufferedImage.",
                "modAndType": "int"
            },
            {
                "name": "getWidth(ImageObserver observer)",
                "description": "Returns the width of the BufferedImage.",
                "modAndType": "int"
            },
            {
                "name": "getWritableTile(int tileX,\n               int tileY)",
                "description": "Checks out a tile for writing.",
                "modAndType": "WritableRaster"
            },
            {
                "name": "getWritableTileIndices()",
                "description": "Returns an array of Point objects indicating which tiles\n are checked out for writing.",
                "modAndType": "Point[]"
            },
            {
                "name": "hasTileWriters()",
                "description": "Returns whether or not any tile is checked out for writing.",
                "modAndType": "boolean"
            },
            {
                "name": "isAlphaPremultiplied()",
                "description": "Returns whether or not the alpha has been premultiplied.",
                "modAndType": "boolean"
            },
            {
                "name": "isTileWritable(int tileX,\n              int tileY)",
                "description": "Returns whether or not a tile is currently checked out for writing.",
                "modAndType": "boolean"
            },
            {
                "name": "releaseWritableTile(int tileX,\n                   int tileY)",
                "description": "Relinquishes permission to write to a tile.",
                "modAndType": "void"
            },
            {
                "name": "removeTileObserver(TileObserver to)",
                "description": "Removes a tile observer.",
                "modAndType": "void"
            },
            {
                "name": "setData(Raster r)",
                "description": "Sets a rectangular region of the image to the contents of the\n specified Raster r, which is\n assumed to be in the same coordinate space as the\n BufferedImage.",
                "modAndType": "void"
            },
            {
                "name": "setRGB(int x,\n      int y,\n      int rgb)",
                "description": "Sets a pixel in this BufferedImage to the specified\n RGB value.",
                "modAndType": "void"
            },
            {
                "name": "setRGB(int startX,\n      int startY,\n      int w,\n      int h,\n      int[] rgbArray,\n      int offset,\n      int scansize)",
                "description": "Sets an array of integer pixels in the default RGB color model\n (TYPE_INT_ARGB) and default sRGB color space,\n into a portion of the image data.",
                "modAndType": "void"
            },
            {
                "name": "toString()",
                "description": "Returns a String representation of this\n BufferedImage object and its values.",
                "modAndType": "String"
            }
        ],
        "href": "java/awt/image/BufferedImage.html"
    },
    {
        "name": "BufferedImageFilter",
        "constructors": [
            {
                "name": "BufferedImageFilter(BufferedImageOp op)",
                "description": "Constructs a BufferedImageFilter with the\n specified single-source/single-destination operator."
            }
        ],
        "methods": [
            {
                "name": "getBufferedImageOp()",
                "description": "Returns the BufferedImageOp.",
                "modAndType": "BufferedImageOp"
            },
            {
                "name": "imageComplete(int status)",
                "description": "Filters the information provided in the imageComplete\n method of the ImageConsumer interface.",
                "modAndType": "void"
            },
            {
                "name": "setColorModel(ColorModel model)",
                "description": "Filters the information provided in the\n setColorModel method\n of the ImageConsumer interface.",
                "modAndType": "void"
            },
            {
                "name": "setDimensions(int width,\n             int height)",
                "description": "Filters the information provided in the\n setDimensions  method\n of the ImageConsumer interface.",
                "modAndType": "void"
            },
            {
                "name": "setPixels(int x,\n         int y,\n         int w,\n         int h,\n         ColorModel model,\n         byte[] pixels,\n         int off,\n         int scansize)",
                "description": "Filters the information provided in the setPixels\n method of the ImageConsumer interface which takes\n an array of bytes.",
                "modAndType": "void"
            },
            {
                "name": "setPixels(int x,\n         int y,\n         int w,\n         int h,\n         ColorModel model,\n         int[] pixels,\n         int off,\n         int scansize)",
                "description": "Filters the information provided in the setPixels\n method of the ImageConsumer interface which takes\n an array of integers.",
                "modAndType": "void"
            }
        ],
        "href": "java/awt/image/BufferedImageFilter.html"
    },
    {
        "name": "BufferedImageOp",
        "constructors": [],
        "methods": [
            {
                "name": "createCompatibleDestImage(BufferedImage src,\n                         ColorModel destCM)",
                "description": "Creates a zeroed destination image with the correct size and number of\n bands.",
                "modAndType": "BufferedImage"
            },
            {
                "name": "filter(BufferedImage src,\n      BufferedImage dest)",
                "description": "Performs a single-input/single-output operation on a\n BufferedImage.",
                "modAndType": "BufferedImage"
            },
            {
                "name": "getBounds2D(BufferedImage src)",
                "description": "Returns the bounding box of the filtered destination image.",
                "modAndType": "Rectangle2D"
            },
            {
                "name": "getPoint2D(Point2D srcPt,\n          Point2D dstPt)",
                "description": "Returns the location of the corresponding destination point given a\n point in the source image.",
                "modAndType": "Point2D"
            },
            {
                "name": "getRenderingHints()",
                "description": "Returns the rendering hints for this operation.",
                "modAndType": "RenderingHints"
            }
        ],
        "href": "java/awt/image/BufferedImageOp.html"
    },
    {
        "name": "BufferedInputStream",
        "constructors": [
            {
                "name": "BufferedInputStream(InputStream in)",
                "description": "Creates a BufferedInputStream\n and saves its  argument, the input stream\n in, for later use."
            },
            {
                "name": "BufferedInputStream(InputStream in,\n                   int size)",
                "description": "Creates a BufferedInputStream\n with the specified buffer size,\n and saves its  argument, the input stream\n in, for later use."
            }
        ],
        "methods": [
            {
                "name": "available()",
                "description": "Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream.",
                "modAndType": "int"
            },
            {
                "name": "close()",
                "description": "Closes this input stream and releases any system resources\n associated with the stream.",
                "modAndType": "void"
            },
            {
                "name": "mark(int readlimit)",
                "description": "See the general contract of the mark\n method of InputStream.",
                "modAndType": "void"
            },
            {
                "name": "markSupported()",
                "description": "Tests if this input stream supports the mark\n and reset methods.",
                "modAndType": "boolean"
            },
            {
                "name": "read()",
                "description": "See\n the general contract of the read\n method of InputStream.",
                "modAndType": "int"
            },
            {
                "name": "read(byte[] b,\n    int off,\n    int len)",
                "description": "Reads bytes from this byte-input stream into the specified byte array,\n starting at the given offset.",
                "modAndType": "int"
            },
            {
                "name": "reset()",
                "description": "See the general contract of the reset\n method of InputStream.",
                "modAndType": "void"
            },
            {
                "name": "skip(long n)",
                "description": "See the general contract of the skip\n method of InputStream.",
                "modAndType": "long"
            }
        ],
        "href": "java/io/BufferedInputStream.html"
    },
    {
        "name": "BufferedOutputStream",
        "constructors": [
            {
                "name": "BufferedOutputStream(OutputStream out)",
                "description": "Creates a new buffered output stream to write data to the\n specified underlying output stream."
            },
            {
                "name": "BufferedOutputStream(OutputStream out,\n                    int size)",
                "description": "Creates a new buffered output stream to write data to the\n specified underlying output stream with the specified buffer\n size."
            }
        ],
        "methods": [
            {
                "name": "flush()",
                "description": "Flushes this buffered output stream.",
                "modAndType": "void"
            },
            {
                "name": "write(byte[] b,\n     int off,\n     int len)",
                "description": "Writes len bytes from the specified byte array\n starting at offset off to this buffered output stream.",
                "modAndType": "void"
            },
            {
                "name": "write(int b)",
                "description": "Writes the specified byte to this buffered output stream.",
                "modAndType": "void"
            }
        ],
        "href": "java/io/BufferedOutputStream.html"
    },
    {
        "name": "BufferedReader",
        "constructors": [
            {
                "name": "BufferedReader(Reader in)",
                "description": "Creates a buffering character-input stream that uses a default-sized\n input buffer."
            },
            {
                "name": "BufferedReader(Reader in,\n              int sz)",
                "description": "Creates a buffering character-input stream that uses an input buffer of\n the specified size."
            }
        ],
        "methods": [
            {
                "name": "close()",
                "description": "Closes the stream and releases any system resources associated with\n it.",
                "modAndType": "void"
            },
            {
                "name": "lines()",
                "description": "Returns a Stream, the elements of which are lines read from\n this BufferedReader.",
                "modAndType": "Stream<String>"
            },
            {
                "name": "mark(int readAheadLimit)",
                "description": "Marks the present position in the stream.",
                "modAndType": "void"
            },
            {
                "name": "markSupported()",
                "description": "Tells whether this stream supports the mark() operation, which it does.",
                "modAndType": "boolean"
            },
            {
                "name": "read()",
                "description": "Reads a single character.",
                "modAndType": "int"
            },
            {
                "name": "read(char[] cbuf,\n    int off,\n    int len)",
                "description": "Reads characters into a portion of an array.",
                "modAndType": "int"
            },
            {
                "name": "readLine()",
                "description": "Reads a line of text.",
                "modAndType": "String"
            },
            {
                "name": "ready()",
                "description": "Tells whether this stream is ready to be read.",
                "modAndType": "boolean"
            },
            {
                "name": "reset()",
                "description": "Resets the stream to the most recent mark.",
                "modAndType": "void"
            },
            {
                "name": "skip(long n)",
                "description": "Skips characters.",
                "modAndType": "long"
            }
        ],
        "href": "java/io/BufferedReader.html"
    },
    {
        "name": "BufferedWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/BufferedWriter.html"
    },
    {
        "name": "BufferOverflowException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/BufferOverflowException.html"
    },
    {
        "name": "BufferPoolMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/BufferPoolMXBean.html"
    },
    {
        "name": "BufferStrategy",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/BufferStrategy.html"
    },
    {
        "name": "BufferUnderflowException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/BufferUnderflowException.html"
    },
    {
        "name": "Button",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Button.html"
    },
    {
        "name": "ButtonGroup",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ButtonGroup.html"
    },
    {
        "name": "ButtonModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ButtonModel.html"
    },
    {
        "name": "ButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ButtonUI.html"
    },
    {
        "name": "Byte",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Byte.html"
    },
    {
        "name": "ByteArrayInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/ByteArrayInputStream.html"
    },
    {
        "name": "ByteArrayOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/ByteArrayOutputStream.html"
    },
    {
        "name": "ByteBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/ByteBuffer.html"
    },
    {
        "name": "ByteChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ByteChannel.html"
    },
    {
        "name": "ByteHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ByteHolder.html"
    },
    {
        "name": "ByteLookupTable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ByteLookupTable.html"
    },
    {
        "name": "ByteOrder",
        "constructors": [],
        "methods": [],
        "href": "java/nio/ByteOrder.html"
    },
    {
        "name": "C14NMethodParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/C14NMethodParameterSpec.html"
    },
    {
        "name": "CachedRowSet",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/CachedRowSet.html"
    },
    {
        "name": "CacheRequest",
        "constructors": [],
        "methods": [],
        "href": "java/net/CacheRequest.html"
    },
    {
        "name": "CacheResponse",
        "constructors": [],
        "methods": [],
        "href": "java/net/CacheResponse.html"
    },
    {
        "name": "Calendar",
        "constructors": [],
        "methods": [],
        "href": "java/util/Calendar.html"
    },
    {
        "name": "Calendar.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/util/Calendar.Builder.html"
    },
    {
        "name": "CalendarDataProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/CalendarDataProvider.html"
    },
    {
        "name": "CalendarNameProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/CalendarNameProvider.html"
    },
    {
        "name": "Callable",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Callable.html"
    },
    {
        "name": "CallableStatement",
        "constructors": [],
        "methods": [],
        "href": "java/sql/CallableStatement.html"
    },
    {
        "name": "Callback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/Callback.html"
    },
    {
        "name": "CallbackHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/CallbackHandler.html"
    },
    {
        "name": "CallSite",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/CallSite.html"
    },
    {
        "name": "CancelablePrintJob",
        "constructors": [],
        "methods": [],
        "href": "javax/print/CancelablePrintJob.html"
    },
    {
        "name": "CancellationException",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CancellationException.html"
    },
    {
        "name": "CancelledKeyException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/CancelledKeyException.html"
    },
    {
        "name": "CannotProceed",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/CannotProceed.html"
    },
    {
        "name": "CannotProceedException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/CannotProceedException.html"
    },
    {
        "name": "CannotProceedHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/CannotProceedHelper.html"
    },
    {
        "name": "CannotProceedHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/CannotProceedHolder.html"
    },
    {
        "name": "CannotRedoException",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/CannotRedoException.html"
    },
    {
        "name": "CannotUndoException",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/CannotUndoException.html"
    },
    {
        "name": "CanonicalizationMethod",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/CanonicalizationMethod.html"
    },
    {
        "name": "Canvas",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Canvas.html"
    },
    {
        "name": "CardLayout",
        "constructors": [],
        "methods": [],
        "href": "java/awt/CardLayout.html"
    },
    {
        "name": "Caret",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Caret.html"
    },
    {
        "name": "CaretEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/CaretEvent.html"
    },
    {
        "name": "CaretListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/CaretListener.html"
    },
    {
        "name": "CDATASection",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/CDATASection.html"
    },
    {
        "name": "CellEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/CellEditor.html"
    },
    {
        "name": "CellEditorListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/CellEditorListener.html"
    },
    {
        "name": "CellRendererPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/CellRendererPane.html"
    },
    {
        "name": "Certificate",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/Certificate.html"
    },
    {
        "name": "Certificate",
        "constructors": [],
        "methods": [],
        "href": "java/security/Certificate.html"
    },
    {
        "name": "Certificate",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/Certificate.html"
    },
    {
        "name": "Certificate.CertificateRep",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/Certificate.CertificateRep.html"
    },
    {
        "name": "CertificateEncodingException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateEncodingException.html"
    },
    {
        "name": "CertificateEncodingException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/CertificateEncodingException.html"
    },
    {
        "name": "CertificateException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateException.html"
    },
    {
        "name": "CertificateException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/CertificateException.html"
    },
    {
        "name": "CertificateExpiredException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateExpiredException.html"
    },
    {
        "name": "CertificateExpiredException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/CertificateExpiredException.html"
    },
    {
        "name": "CertificateFactory",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateFactory.html"
    },
    {
        "name": "CertificateFactorySpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateFactorySpi.html"
    },
    {
        "name": "CertificateNotYetValidException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateNotYetValidException.html"
    },
    {
        "name": "CertificateNotYetValidException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/CertificateNotYetValidException.html"
    },
    {
        "name": "CertificateParsingException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateParsingException.html"
    },
    {
        "name": "CertificateParsingException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/CertificateParsingException.html"
    },
    {
        "name": "CertificateRevokedException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertificateRevokedException.html"
    },
    {
        "name": "CertPath",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPath.html"
    },
    {
        "name": "CertPath.CertPathRep",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPath.CertPathRep.html"
    },
    {
        "name": "CertPathBuilder",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathBuilder.html"
    },
    {
        "name": "CertPathBuilderException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathBuilderException.html"
    },
    {
        "name": "CertPathBuilderResult",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathBuilderResult.html"
    },
    {
        "name": "CertPathBuilderSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathBuilderSpi.html"
    },
    {
        "name": "CertPathChecker",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathChecker.html"
    },
    {
        "name": "CertPathParameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathParameters.html"
    },
    {
        "name": "CertPathTrustManagerParameters",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/CertPathTrustManagerParameters.html"
    },
    {
        "name": "CertPathValidator",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathValidator.html"
    },
    {
        "name": "CertPathValidatorException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathValidatorException.html"
    },
    {
        "name": "CertPathValidatorException.BasicReason",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathValidatorException.BasicReason.html"
    },
    {
        "name": "CertPathValidatorException.Reason",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathValidatorException.Reason.html"
    },
    {
        "name": "CertPathValidatorResult",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathValidatorResult.html"
    },
    {
        "name": "CertPathValidatorSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertPathValidatorSpi.html"
    },
    {
        "name": "CertSelector",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertSelector.html"
    },
    {
        "name": "CertStore",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertStore.html"
    },
    {
        "name": "CertStoreException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertStoreException.html"
    },
    {
        "name": "CertStoreParameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertStoreParameters.html"
    },
    {
        "name": "CertStoreSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CertStoreSpi.html"
    },
    {
        "name": "ChangedCharSetException",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/ChangedCharSetException.html"
    },
    {
        "name": "ChangeEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/ChangeEvent.html"
    },
    {
        "name": "ChangeListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/ChangeListener.html"
    },
    {
        "name": "Channel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/Channel.html"
    },
    {
        "name": "ChannelBinding",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/ChannelBinding.html"
    },
    {
        "name": "Channels",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/Channels.html"
    },
    {
        "name": "Character",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Character.html"
    },
    {
        "name": "Character.Subset",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Character.Subset.html"
    },
    {
        "name": "Character.UnicodeBlock",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Character.UnicodeBlock.html"
    },
    {
        "name": "Character.UnicodeScript",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Character.UnicodeScript.html"
    },
    {
        "name": "CharacterCodingException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/CharacterCodingException.html"
    },
    {
        "name": "CharacterData",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/CharacterData.html"
    },
    {
        "name": "CharacterIterator",
        "constructors": [],
        "methods": [],
        "href": "java/text/CharacterIterator.html"
    },
    {
        "name": "Characters",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/Characters.html"
    },
    {
        "name": "CharArrayReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/CharArrayReader.html"
    },
    {
        "name": "CharArrayWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/CharArrayWriter.html"
    },
    {
        "name": "CharBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/CharBuffer.html"
    },
    {
        "name": "CharConversionException",
        "constructors": [],
        "methods": [],
        "href": "java/io/CharConversionException.html"
    },
    {
        "name": "CharHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CharHolder.html"
    },
    {
        "name": "CharSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CharSeqHelper.html"
    },
    {
        "name": "CharSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CharSeqHolder.html"
    },
    {
        "name": "CharSequence",
        "constructors": [],
        "methods": [],
        "href": "java/lang/CharSequence.html"
    },
    {
        "name": "Charset",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/Charset.html"
    },
    {
        "name": "CharsetDecoder",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/CharsetDecoder.html"
    },
    {
        "name": "CharsetEncoder",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/CharsetEncoder.html"
    },
    {
        "name": "CharsetProvider",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/spi/CharsetProvider.html"
    },
    {
        "name": "Checkbox",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Checkbox.html"
    },
    {
        "name": "CheckboxGroup",
        "constructors": [],
        "methods": [],
        "href": "java/awt/CheckboxGroup.html"
    },
    {
        "name": "CheckboxMenuItem",
        "constructors": [],
        "methods": [],
        "href": "java/awt/CheckboxMenuItem.html"
    },
    {
        "name": "CheckedInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/CheckedInputStream.html"
    },
    {
        "name": "CheckedOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/CheckedOutputStream.html"
    },
    {
        "name": "Checksum",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/Checksum.html"
    },
    {
        "name": "Choice",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Choice.html"
    },
    {
        "name": "ChoiceCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/ChoiceCallback.html"
    },
    {
        "name": "ChoiceFormat",
        "constructors": [],
        "methods": [],
        "href": "java/text/ChoiceFormat.html"
    },
    {
        "name": "Chromaticity",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Chromaticity.html"
    },
    {
        "name": "ChronoField",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/ChronoField.html"
    },
    {
        "name": "ChronoLocalDate",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ChronoLocalDate.html"
    },
    {
        "name": "ChronoLocalDateTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ChronoLocalDateTime.html"
    },
    {
        "name": "Chronology",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/Chronology.html"
    },
    {
        "name": "ChronoPeriod",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ChronoPeriod.html"
    },
    {
        "name": "ChronoUnit",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/ChronoUnit.html"
    },
    {
        "name": "ChronoZonedDateTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ChronoZonedDateTime.html"
    },
    {
        "name": "Cipher",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/Cipher.html"
    },
    {
        "name": "CipherInputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/CipherInputStream.html"
    },
    {
        "name": "CipherOutputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/CipherOutputStream.html"
    },
    {
        "name": "CipherSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/CipherSpi.html"
    },
    {
        "name": "Class",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Class.html"
    },
    {
        "name": "ClassCastException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ClassCastException.html"
    },
    {
        "name": "ClassCircularityError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ClassCircularityError.html"
    },
    {
        "name": "ClassDefinition",
        "constructors": [],
        "methods": [],
        "href": "java/lang/instrument/ClassDefinition.html"
    },
    {
        "name": "ClassDesc",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/ClassDesc.html"
    },
    {
        "name": "ClassFileTransformer",
        "constructors": [],
        "methods": [],
        "href": "java/lang/instrument/ClassFileTransformer.html"
    },
    {
        "name": "ClassFormatError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ClassFormatError.html"
    },
    {
        "name": "ClassLoader",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ClassLoader.html"
    },
    {
        "name": "ClassLoaderRepository",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/ClassLoaderRepository.html"
    },
    {
        "name": "ClassLoadingMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/ClassLoadingMXBean.html"
    },
    {
        "name": "ClassNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ClassNotFoundException.html"
    },
    {
        "name": "ClassValue",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ClassValue.html"
    },
    {
        "name": "ClientInfoStatus",
        "constructors": [],
        "methods": [],
        "href": "java/sql/ClientInfoStatus.html"
    },
    {
        "name": "ClientRequestInfo",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ClientRequestInfo.html"
    },
    {
        "name": "ClientRequestInfoOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ClientRequestInfoOperations.html"
    },
    {
        "name": "ClientRequestInterceptor",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ClientRequestInterceptor.html"
    },
    {
        "name": "ClientRequestInterceptorOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ClientRequestInterceptorOperations.html"
    },
    {
        "name": "Clip",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Clip.html"
    },
    {
        "name": "Clipboard",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/Clipboard.html"
    },
    {
        "name": "ClipboardOwner",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/ClipboardOwner.html"
    },
    {
        "name": "Clob",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Clob.html"
    },
    {
        "name": "Clock",
        "constructors": [],
        "methods": [],
        "href": "java/time/Clock.html"
    },
    {
        "name": "Cloneable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Cloneable.html"
    },
    {
        "name": "CloneNotSupportedException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/CloneNotSupportedException.html"
    },
    {
        "name": "Closeable",
        "constructors": [],
        "methods": [],
        "href": "java/io/Closeable.html"
    },
    {
        "name": "ClosedByInterruptException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ClosedByInterruptException.html"
    },
    {
        "name": "ClosedChannelException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ClosedChannelException.html"
    },
    {
        "name": "ClosedDirectoryStreamException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/ClosedDirectoryStreamException.html"
    },
    {
        "name": "ClosedFileSystemException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/ClosedFileSystemException.html"
    },
    {
        "name": "ClosedSelectorException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ClosedSelectorException.html"
    },
    {
        "name": "ClosedWatchServiceException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/ClosedWatchServiceException.html"
    },
    {
        "name": "CMMException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/CMMException.html"
    },
    {
        "name": "Codec",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/Codec.html"
    },
    {
        "name": "CodecFactory",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecFactory.html"
    },
    {
        "name": "CodecFactoryHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecFactoryHelper.html"
    },
    {
        "name": "CodecFactoryOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecFactoryOperations.html"
    },
    {
        "name": "CodecOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecOperations.html"
    },
    {
        "name": "CoderMalfunctionError",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/CoderMalfunctionError.html"
    },
    {
        "name": "CoderResult",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/CoderResult.html"
    },
    {
        "name": "CODESET_INCOMPATIBLE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CODESET_INCOMPATIBLE.html"
    },
    {
        "name": "CodeSets",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodeSets.html"
    },
    {
        "name": "CodeSigner",
        "constructors": [],
        "methods": [],
        "href": "java/security/CodeSigner.html"
    },
    {
        "name": "CodeSource",
        "constructors": [],
        "methods": [],
        "href": "java/security/CodeSource.html"
    },
    {
        "name": "CodingErrorAction",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/CodingErrorAction.html"
    },
    {
        "name": "CollapsedStringAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/CollapsedStringAdapter.html"
    },
    {
        "name": "CollationElementIterator",
        "constructors": [],
        "methods": [],
        "href": "java/text/CollationElementIterator.html"
    },
    {
        "name": "CollationKey",
        "constructors": [],
        "methods": [],
        "href": "java/text/CollationKey.html"
    },
    {
        "name": "Collator",
        "constructors": [],
        "methods": [],
        "href": "java/text/Collator.html"
    },
    {
        "name": "CollatorProvider",
        "constructors": [],
        "methods": [],
        "href": "java/text/spi/CollatorProvider.html"
    },
    {
        "name": "Collection",
        "constructors": [],
        "methods": [],
        "href": "java/util/Collection.html"
    },
    {
        "name": "CollectionCertStoreParameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CollectionCertStoreParameters.html"
    },
    {
        "name": "Collections",
        "constructors": [],
        "methods": [],
        "href": "java/util/Collections.html"
    },
    {
        "name": "Collector",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/Collector.html"
    },
    {
        "name": "Collector.Characteristics",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/Collector.Characteristics.html"
    },
    {
        "name": "Collectors",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/Collectors.html"
    },
    {
        "name": "Color",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Color.html"
    },
    {
        "name": "ColorChooserComponentFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/colorchooser/ColorChooserComponentFactory.html"
    },
    {
        "name": "ColorChooserUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ColorChooserUI.html"
    },
    {
        "name": "ColorConvertOp",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ColorConvertOp.html"
    },
    {
        "name": "ColorModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ColorModel.html"
    },
    {
        "name": "ColorSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/colorchooser/ColorSelectionModel.html"
    },
    {
        "name": "ColorSpace",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/ColorSpace.html"
    },
    {
        "name": "ColorSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/ColorSupported.html"
    },
    {
        "name": "ColorType",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/ColorType.html"
    },
    {
        "name": "ColorUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ColorUIResource.html"
    },
    {
        "name": "ComboBoxEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ComboBoxEditor.html"
    },
    {
        "name": "ComboBoxModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ComboBoxModel.html"
    },
    {
        "name": "ComboBoxUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ComboBoxUI.html"
    },
    {
        "name": "ComboPopup",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/basic/ComboPopup.html"
    },
    {
        "name": "COMM_FAILURE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/COMM_FAILURE.html"
    },
    {
        "name": "CommandInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/CommandInfo.html"
    },
    {
        "name": "CommandMap",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/CommandMap.html"
    },
    {
        "name": "CommandObject",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/CommandObject.html"
    },
    {
        "name": "Comment",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/Comment.html"
    },
    {
        "name": "Comment",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Comment.html"
    },
    {
        "name": "CommonDataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/CommonDataSource.html"
    },
    {
        "name": "CommunicationException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/CommunicationException.html"
    },
    {
        "name": "Comparable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Comparable.html"
    },
    {
        "name": "Comparator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Comparator.html"
    },
    {
        "name": "Compilable",
        "constructors": [],
        "methods": [],
        "href": "javax/script/Compilable.html"
    },
    {
        "name": "CompilationMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/CompilationMXBean.html"
    },
    {
        "name": "CompiledScript",
        "constructors": [],
        "methods": [],
        "href": "javax/script/CompiledScript.html"
    },
    {
        "name": "Compiler",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Compiler.html"
    },
    {
        "name": "CompletableFuture",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CompletableFuture.html"
    },
    {
        "name": "CompletableFuture.AsynchronousCompletionTask",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CompletableFuture.AsynchronousCompletionTask.html"
    },
    {
        "name": "Completion",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/Completion.html"
    },
    {
        "name": "CompletionException",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CompletionException.html"
    },
    {
        "name": "CompletionHandler",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/CompletionHandler.html"
    },
    {
        "name": "Completions",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/Completions.html"
    },
    {
        "name": "CompletionService",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CompletionService.html"
    },
    {
        "name": "CompletionStage",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CompletionStage.html"
    },
    {
        "name": "CompletionStatus",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CompletionStatus.html"
    },
    {
        "name": "CompletionStatusHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CompletionStatusHelper.html"
    },
    {
        "name": "Component",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Component.html"
    },
    {
        "name": "Component.BaselineResizeBehavior",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Component.BaselineResizeBehavior.html"
    },
    {
        "name": "ComponentAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ComponentAdapter.html"
    },
    {
        "name": "ComponentColorModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ComponentColorModel.html"
    },
    {
        "name": "ComponentEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ComponentEvent.html"
    },
    {
        "name": "ComponentIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ComponentIdHelper.html"
    },
    {
        "name": "ComponentInputMap",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ComponentInputMap.html"
    },
    {
        "name": "ComponentInputMapUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ComponentInputMapUIResource.html"
    },
    {
        "name": "ComponentListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ComponentListener.html"
    },
    {
        "name": "ComponentOrientation",
        "constructors": [],
        "methods": [],
        "href": "java/awt/ComponentOrientation.html"
    },
    {
        "name": "ComponentSampleModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ComponentSampleModel.html"
    },
    {
        "name": "ComponentUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ComponentUI.html"
    },
    {
        "name": "ComponentView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/ComponentView.html"
    },
    {
        "name": "Composite",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Composite.html"
    },
    {
        "name": "CompositeContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/CompositeContext.html"
    },
    {
        "name": "CompositeData",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/CompositeData.html"
    },
    {
        "name": "CompositeDataInvocationHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/CompositeDataInvocationHandler.html"
    },
    {
        "name": "CompositeDataSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/CompositeDataSupport.html"
    },
    {
        "name": "CompositeDataView",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/CompositeDataView.html"
    },
    {
        "name": "CompositeName",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/CompositeName.html"
    },
    {
        "name": "CompositeType",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/CompositeType.html"
    },
    {
        "name": "CompositeView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/CompositeView.html"
    },
    {
        "name": "CompoundBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/CompoundBorder.html"
    },
    {
        "name": "CompoundControl",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/CompoundControl.html"
    },
    {
        "name": "CompoundControl.Type",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/CompoundControl.Type.html"
    },
    {
        "name": "CompoundEdit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/CompoundEdit.html"
    },
    {
        "name": "CompoundName",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/CompoundName.html"
    },
    {
        "name": "Compression",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Compression.html"
    },
    {
        "name": "ConcurrentHashMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentHashMap.html"
    },
    {
        "name": "ConcurrentHashMap.KeySetView",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentHashMap.KeySetView.html"
    },
    {
        "name": "ConcurrentLinkedDeque",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentLinkedDeque.html"
    },
    {
        "name": "ConcurrentLinkedQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentLinkedQueue.html"
    },
    {
        "name": "ConcurrentMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentMap.html"
    },
    {
        "name": "ConcurrentModificationException",
        "constructors": [],
        "methods": [],
        "href": "java/util/ConcurrentModificationException.html"
    },
    {
        "name": "ConcurrentNavigableMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentNavigableMap.html"
    },
    {
        "name": "ConcurrentSkipListMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentSkipListMap.html"
    },
    {
        "name": "ConcurrentSkipListSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ConcurrentSkipListSet.html"
    },
    {
        "name": "Condition",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/Condition.html"
    },
    {
        "name": "Configuration",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/Configuration.html"
    },
    {
        "name": "Configuration.Parameters",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/Configuration.Parameters.html"
    },
    {
        "name": "ConfigurationException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ConfigurationException.html"
    },
    {
        "name": "ConfigurationSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/ConfigurationSpi.html"
    },
    {
        "name": "ConfirmationCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/ConfirmationCallback.html"
    },
    {
        "name": "ConnectException",
        "constructors": [],
        "methods": [],
        "href": "java/net/ConnectException.html"
    },
    {
        "name": "ConnectException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/ConnectException.html"
    },
    {
        "name": "ConnectIOException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/ConnectIOException.html"
    },
    {
        "name": "Connection",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Connection.html"
    },
    {
        "name": "ConnectionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/ConnectionEvent.html"
    },
    {
        "name": "ConnectionEventListener",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/ConnectionEventListener.html"
    },
    {
        "name": "ConnectionPendingException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ConnectionPendingException.html"
    },
    {
        "name": "ConnectionPoolDataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/ConnectionPoolDataSource.html"
    },
    {
        "name": "Console",
        "constructors": [],
        "methods": [],
        "href": "java/io/Console.html"
    },
    {
        "name": "ConsoleHandler",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/ConsoleHandler.html"
    },
    {
        "name": "ConstantCallSite",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/ConstantCallSite.html"
    },
    {
        "name": "Constructor",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Constructor.html"
    },
    {
        "name": "ConstructorProperties",
        "constructors": [],
        "methods": [],
        "href": "java/beans/ConstructorProperties.html"
    },
    {
        "name": "Consumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/Consumer.html"
    },
    {
        "name": "Container",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Container.html"
    },
    {
        "name": "ContainerAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ContainerAdapter.html"
    },
    {
        "name": "ContainerEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ContainerEvent.html"
    },
    {
        "name": "ContainerListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ContainerListener.html"
    },
    {
        "name": "ContainerOrderFocusTraversalPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/awt/ContainerOrderFocusTraversalPolicy.html"
    },
    {
        "name": "ContentHandler",
        "constructors": [],
        "methods": [],
        "href": "java/net/ContentHandler.html"
    },
    {
        "name": "ContentHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ContentHandler.html"
    },
    {
        "name": "ContentHandlerFactory",
        "constructors": [],
        "methods": [],
        "href": "java/net/ContentHandlerFactory.html"
    },
    {
        "name": "ContentModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/ContentModel.html"
    },
    {
        "name": "Context",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/Context.html"
    },
    {
        "name": "Context",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Context.html"
    },
    {
        "name": "ContextList",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ContextList.html"
    },
    {
        "name": "ContextNotEmptyException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ContextNotEmptyException.html"
    },
    {
        "name": "ContextualRenderedImageFactory",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/ContextualRenderedImageFactory.html"
    },
    {
        "name": "Control",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/Control.html"
    },
    {
        "name": "Control",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Control.html"
    },
    {
        "name": "Control.Type",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Control.Type.html"
    },
    {
        "name": "ControlFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/ControlFactory.html"
    },
    {
        "name": "ControllerEventListener",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/ControllerEventListener.html"
    },
    {
        "name": "ConvolveOp",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ConvolveOp.html"
    },
    {
        "name": "CookieHandler",
        "constructors": [],
        "methods": [],
        "href": "java/net/CookieHandler.html"
    },
    {
        "name": "CookieHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantLocatorPackage/CookieHolder.html"
    },
    {
        "name": "CookieManager",
        "constructors": [],
        "methods": [],
        "href": "java/net/CookieManager.html"
    },
    {
        "name": "CookiePolicy",
        "constructors": [],
        "methods": [],
        "href": "java/net/CookiePolicy.html"
    },
    {
        "name": "CookieStore",
        "constructors": [],
        "methods": [],
        "href": "java/net/CookieStore.html"
    },
    {
        "name": "Copies",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Copies.html"
    },
    {
        "name": "CopiesSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/CopiesSupported.html"
    },
    {
        "name": "CopyOnWriteArrayList",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CopyOnWriteArrayList.html"
    },
    {
        "name": "CopyOnWriteArraySet",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CopyOnWriteArraySet.html"
    },
    {
        "name": "CopyOption",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/CopyOption.html"
    },
    {
        "name": "CountDownLatch",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CountDownLatch.html"
    },
    {
        "name": "CountedCompleter",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CountedCompleter.html"
    },
    {
        "name": "CounterMonitor",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/CounterMonitor.html"
    },
    {
        "name": "CounterMonitorMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/CounterMonitorMBean.html"
    },
    {
        "name": "CRC32",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/CRC32.html"
    },
    {
        "name": "CredentialException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/CredentialException.html"
    },
    {
        "name": "CredentialExpiredException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/CredentialExpiredException.html"
    },
    {
        "name": "CredentialNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/CredentialNotFoundException.html"
    },
    {
        "name": "CRL",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CRL.html"
    },
    {
        "name": "CRLException",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CRLException.html"
    },
    {
        "name": "CRLReason",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CRLReason.html"
    },
    {
        "name": "CRLSelector",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/CRLSelector.html"
    },
    {
        "name": "CropImageFilter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/CropImageFilter.html"
    },
    {
        "name": "CryptoPrimitive",
        "constructors": [],
        "methods": [],
        "href": "java/security/CryptoPrimitive.html"
    },
    {
        "name": "CSS",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/CSS.html"
    },
    {
        "name": "CSS.Attribute",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/CSS.Attribute.html"
    },
    {
        "name": "CTX_RESTRICT_SCOPE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CTX_RESTRICT_SCOPE.html"
    },
    {
        "name": "CubicCurve2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/CubicCurve2D.html"
    },
    {
        "name": "CubicCurve2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/CubicCurve2D.Double.html"
    },
    {
        "name": "CubicCurve2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/CubicCurve2D.Float.html"
    },
    {
        "name": "Currency",
        "constructors": [],
        "methods": [],
        "href": "java/util/Currency.html"
    },
    {
        "name": "CurrencyNameProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/CurrencyNameProvider.html"
    },
    {
        "name": "Current",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Current.html"
    },
    {
        "name": "Current",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/Current.html"
    },
    {
        "name": "Current",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/Current.html"
    },
    {
        "name": "CurrentHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CurrentHelper.html"
    },
    {
        "name": "CurrentHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/CurrentHelper.html"
    },
    {
        "name": "CurrentHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/CurrentHelper.html"
    },
    {
        "name": "CurrentHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CurrentHolder.html"
    },
    {
        "name": "CurrentOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CurrentOperations.html"
    },
    {
        "name": "CurrentOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/CurrentOperations.html"
    },
    {
        "name": "CurrentOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/CurrentOperations.html"
    },
    {
        "name": "Cursor",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Cursor.html"
    },
    {
        "name": "Customizer",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Customizer.html"
    },
    {
        "name": "CustomMarshal",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/CustomMarshal.html"
    },
    {
        "name": "CustomValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/CustomValue.html"
    },
    {
        "name": "CyclicBarrier",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/CyclicBarrier.html"
    },
    {
        "name": "Data",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/Data.html"
    },
    {
        "name": "DATA_CONVERSION",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DATA_CONVERSION.html"
    },
    {
        "name": "DatabaseMetaData",
        "constructors": [],
        "methods": [],
        "href": "java/sql/DatabaseMetaData.html"
    },
    {
        "name": "DataBindingException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/DataBindingException.html"
    },
    {
        "name": "DataBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBuffer.html"
    },
    {
        "name": "DataBufferByte",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBufferByte.html"
    },
    {
        "name": "DataBufferDouble",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBufferDouble.html"
    },
    {
        "name": "DataBufferFloat",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBufferFloat.html"
    },
    {
        "name": "DataBufferInt",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBufferInt.html"
    },
    {
        "name": "DataBufferShort",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBufferShort.html"
    },
    {
        "name": "DataBufferUShort",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DataBufferUShort.html"
    },
    {
        "name": "DataContentHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/DataContentHandler.html"
    },
    {
        "name": "DataContentHandlerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/DataContentHandlerFactory.html"
    },
    {
        "name": "DataFlavor",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/DataFlavor.html"
    },
    {
        "name": "DataFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/DataFormatException.html"
    },
    {
        "name": "DatagramChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/DatagramChannel.html"
    },
    {
        "name": "DatagramPacket",
        "constructors": [],
        "methods": [],
        "href": "java/net/DatagramPacket.html"
    },
    {
        "name": "DatagramSocket",
        "constructors": [],
        "methods": [],
        "href": "java/net/DatagramSocket.html"
    },
    {
        "name": "DatagramSocketImpl",
        "constructors": [],
        "methods": [],
        "href": "java/net/DatagramSocketImpl.html"
    },
    {
        "name": "DatagramSocketImplFactory",
        "constructors": [],
        "methods": [],
        "href": "java/net/DatagramSocketImplFactory.html"
    },
    {
        "name": "DataHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/DataHandler.html"
    },
    {
        "name": "DataInput",
        "constructors": [],
        "methods": [],
        "href": "java/io/DataInput.html"
    },
    {
        "name": "DataInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/DataInputStream.html"
    },
    {
        "name": "DataInputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DataInputStream.html"
    },
    {
        "name": "DataLine",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/DataLine.html"
    },
    {
        "name": "DataLine.Info",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/DataLine.Info.html"
    },
    {
        "name": "DataOutput",
        "constructors": [],
        "methods": [],
        "href": "java/io/DataOutput.html"
    },
    {
        "name": "DataOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/DataOutputStream.html"
    },
    {
        "name": "DataOutputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DataOutputStream.html"
    },
    {
        "name": "DataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/DataSource.html"
    },
    {
        "name": "DataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/DataSource.html"
    },
    {
        "name": "DataTruncation",
        "constructors": [],
        "methods": [],
        "href": "java/sql/DataTruncation.html"
    },
    {
        "name": "DatatypeConfigurationException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/datatype/DatatypeConfigurationException.html"
    },
    {
        "name": "DatatypeConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/datatype/DatatypeConstants.html"
    },
    {
        "name": "DatatypeConstants.Field",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/datatype/DatatypeConstants.Field.html"
    },
    {
        "name": "DatatypeConverter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/DatatypeConverter.html"
    },
    {
        "name": "DatatypeConverterInterface",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/DatatypeConverterInterface.html"
    },
    {
        "name": "DatatypeFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/datatype/DatatypeFactory.html"
    },
    {
        "name": "Date",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Date.html"
    },
    {
        "name": "Date",
        "constructors": [],
        "methods": [],
        "href": "java/util/Date.html"
    },
    {
        "name": "DateFormat",
        "constructors": [],
        "methods": [],
        "href": "java/text/DateFormat.html"
    },
    {
        "name": "DateFormat.Field",
        "constructors": [],
        "methods": [],
        "href": "java/text/DateFormat.Field.html"
    },
    {
        "name": "DateFormatProvider",
        "constructors": [],
        "methods": [],
        "href": "java/text/spi/DateFormatProvider.html"
    },
    {
        "name": "DateFormatSymbols",
        "constructors": [],
        "methods": [],
        "href": "java/text/DateFormatSymbols.html"
    },
    {
        "name": "DateFormatSymbolsProvider",
        "constructors": [],
        "methods": [],
        "href": "java/text/spi/DateFormatSymbolsProvider.html"
    },
    {
        "name": "DateFormatter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DateFormatter.html"
    },
    {
        "name": "DateTimeAtCompleted",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/DateTimeAtCompleted.html"
    },
    {
        "name": "DateTimeAtCreation",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/DateTimeAtCreation.html"
    },
    {
        "name": "DateTimeAtProcessing",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/DateTimeAtProcessing.html"
    },
    {
        "name": "DateTimeException",
        "constructors": [],
        "methods": [],
        "href": "java/time/DateTimeException.html"
    },
    {
        "name": "DateTimeFormatter",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/DateTimeFormatter.html"
    },
    {
        "name": "DateTimeFormatterBuilder",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/DateTimeFormatterBuilder.html"
    },
    {
        "name": "DateTimeParseException",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/DateTimeParseException.html"
    },
    {
        "name": "DateTimeSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/DateTimeSyntax.html"
    },
    {
        "name": "DayOfWeek",
        "constructors": [],
        "methods": [],
        "href": "java/time/DayOfWeek.html"
    },
    {
        "name": "DebugGraphics",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DebugGraphics.html"
    },
    {
        "name": "DecimalFormat",
        "constructors": [],
        "methods": [],
        "href": "java/text/DecimalFormat.html"
    },
    {
        "name": "DecimalFormatSymbols",
        "constructors": [],
        "methods": [],
        "href": "java/text/DecimalFormatSymbols.html"
    },
    {
        "name": "DecimalFormatSymbolsProvider",
        "constructors": [],
        "methods": [],
        "href": "java/text/spi/DecimalFormatSymbolsProvider.html"
    },
    {
        "name": "DecimalStyle",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/DecimalStyle.html"
    },
    {
        "name": "DeclaredType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/DeclaredType.html"
    },
    {
        "name": "DeclHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ext/DeclHandler.html"
    },
    {
        "name": "DefaultBoundedRangeModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultBoundedRangeModel.html"
    },
    {
        "name": "DefaultButtonModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultButtonModel.html"
    },
    {
        "name": "DefaultCaret",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultCaret.html"
    },
    {
        "name": "DefaultCellEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultCellEditor.html"
    },
    {
        "name": "DefaultColorSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/colorchooser/DefaultColorSelectionModel.html"
    },
    {
        "name": "DefaultComboBoxModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultComboBoxModel.html"
    },
    {
        "name": "DefaultDesktopManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultDesktopManager.html"
    },
    {
        "name": "DefaultEditorKit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.html"
    },
    {
        "name": "DefaultEditorKit.BeepAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.BeepAction.html"
    },
    {
        "name": "DefaultEditorKit.CopyAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.CopyAction.html"
    },
    {
        "name": "DefaultEditorKit.CutAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.CutAction.html"
    },
    {
        "name": "DefaultEditorKit.DefaultKeyTypedAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.DefaultKeyTypedAction.html"
    },
    {
        "name": "DefaultEditorKit.InsertBreakAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.InsertBreakAction.html"
    },
    {
        "name": "DefaultEditorKit.InsertContentAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.InsertContentAction.html"
    },
    {
        "name": "DefaultEditorKit.InsertTabAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.InsertTabAction.html"
    },
    {
        "name": "DefaultEditorKit.PasteAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultEditorKit.PasteAction.html"
    },
    {
        "name": "DefaultFocusManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultFocusManager.html"
    },
    {
        "name": "DefaultFocusTraversalPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/awt/DefaultFocusTraversalPolicy.html"
    },
    {
        "name": "DefaultFormatter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultFormatter.html"
    },
    {
        "name": "DefaultFormatterFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultFormatterFactory.html"
    },
    {
        "name": "DefaultHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/DefaultHandler.html"
    },
    {
        "name": "DefaultHandler2",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ext/DefaultHandler2.html"
    },
    {
        "name": "DefaultHighlighter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultHighlighter.html"
    },
    {
        "name": "DefaultHighlighter.DefaultHighlightPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultHighlighter.DefaultHighlightPainter.html"
    },
    {
        "name": "DefaultKeyboardFocusManager",
        "constructors": [],
        "methods": [],
        "href": "java/awt/DefaultKeyboardFocusManager.html"
    },
    {
        "name": "DefaultListCellRenderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultListCellRenderer.html"
    },
    {
        "name": "DefaultListCellRenderer.UIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultListCellRenderer.UIResource.html"
    },
    {
        "name": "DefaultListModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultListModel.html"
    },
    {
        "name": "DefaultListSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultListSelectionModel.html"
    },
    {
        "name": "DefaultLoaderRepository",
        "constructors": [],
        "methods": [],
        "href": "javax/management/DefaultLoaderRepository.html"
    },
    {
        "name": "DefaultLoaderRepository",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/DefaultLoaderRepository.html"
    },
    {
        "name": "DefaultMenuLayout",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/basic/DefaultMenuLayout.html"
    },
    {
        "name": "DefaultMetalTheme",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/DefaultMetalTheme.html"
    },
    {
        "name": "DefaultMutableTreeNode",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/DefaultMutableTreeNode.html"
    },
    {
        "name": "DefaultPersistenceDelegate",
        "constructors": [],
        "methods": [],
        "href": "java/beans/DefaultPersistenceDelegate.html"
    },
    {
        "name": "DefaultRowSorter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultRowSorter.html"
    },
    {
        "name": "DefaultRowSorter.ModelWrapper",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultRowSorter.ModelWrapper.html"
    },
    {
        "name": "DefaultSingleSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DefaultSingleSelectionModel.html"
    },
    {
        "name": "DefaultStyledDocument",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultStyledDocument.html"
    },
    {
        "name": "DefaultStyledDocument.AttributeUndoableEdit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultStyledDocument.AttributeUndoableEdit.html"
    },
    {
        "name": "DefaultStyledDocument.ElementSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultStyledDocument.ElementSpec.html"
    },
    {
        "name": "DefaultTableCellRenderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/DefaultTableCellRenderer.html"
    },
    {
        "name": "DefaultTableCellRenderer.UIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/DefaultTableCellRenderer.UIResource.html"
    },
    {
        "name": "DefaultTableColumnModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/DefaultTableColumnModel.html"
    },
    {
        "name": "DefaultTableModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/DefaultTableModel.html"
    },
    {
        "name": "DefaultTextUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DefaultTextUI.html"
    },
    {
        "name": "DefaultTreeCellEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/DefaultTreeCellEditor.html"
    },
    {
        "name": "DefaultTreeCellRenderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/DefaultTreeCellRenderer.html"
    },
    {
        "name": "DefaultTreeModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/DefaultTreeModel.html"
    },
    {
        "name": "DefaultTreeSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/DefaultTreeSelectionModel.html"
    },
    {
        "name": "DefaultValidationEventHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/helpers/DefaultValidationEventHandler.html"
    },
    {
        "name": "DefinitionKind",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DefinitionKind.html"
    },
    {
        "name": "DefinitionKindHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DefinitionKindHelper.html"
    },
    {
        "name": "Deflater",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/Deflater.html"
    },
    {
        "name": "DeflaterInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/DeflaterInputStream.html"
    },
    {
        "name": "DeflaterOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/DeflaterOutputStream.html"
    },
    {
        "name": "Delayed",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Delayed.html"
    },
    {
        "name": "DelayQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/DelayQueue.html"
    },
    {
        "name": "Delegate",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/Delegate.html"
    },
    {
        "name": "Delegate",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA_2_3/portable/Delegate.html"
    },
    {
        "name": "Delegate",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/portable/Delegate.html"
    },
    {
        "name": "DelegationPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/kerberos/DelegationPermission.html"
    },
    {
        "name": "Deprecated",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Deprecated.html"
    },
    {
        "name": "Deque",
        "constructors": [],
        "methods": [],
        "href": "java/util/Deque.html"
    },
    {
        "name": "Descriptor",
        "constructors": [],
        "methods": [],
        "href": "javax/management/Descriptor.html"
    },
    {
        "name": "DescriptorAccess",
        "constructors": [],
        "methods": [],
        "href": "javax/management/DescriptorAccess.html"
    },
    {
        "name": "DescriptorKey",
        "constructors": [],
        "methods": [],
        "href": "javax/management/DescriptorKey.html"
    },
    {
        "name": "DescriptorRead",
        "constructors": [],
        "methods": [],
        "href": "javax/management/DescriptorRead.html"
    },
    {
        "name": "DescriptorSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/DescriptorSupport.html"
    },
    {
        "name": "DESedeKeySpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/DESedeKeySpec.html"
    },
    {
        "name": "DesignMode",
        "constructors": [],
        "methods": [],
        "href": "java/beans/DesignMode.html"
    },
    {
        "name": "DESKeySpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/DESKeySpec.html"
    },
    {
        "name": "Desktop",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Desktop.html"
    },
    {
        "name": "Desktop.Action",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Desktop.Action.html"
    },
    {
        "name": "DesktopIconUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/DesktopIconUI.html"
    },
    {
        "name": "DesktopManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DesktopManager.html"
    },
    {
        "name": "DesktopPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/DesktopPaneUI.html"
    },
    {
        "name": "Destination",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Destination.html"
    },
    {
        "name": "Destroyable",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/Destroyable.html"
    },
    {
        "name": "DestroyFailedException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/DestroyFailedException.html"
    },
    {
        "name": "Detail",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/Detail.html"
    },
    {
        "name": "DetailEntry",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/DetailEntry.html"
    },
    {
        "name": "DGC",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/dgc/DGC.html"
    },
    {
        "name": "DHGenParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/DHGenParameterSpec.html"
    },
    {
        "name": "DHKey",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/interfaces/DHKey.html"
    },
    {
        "name": "DHParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/DHParameterSpec.html"
    },
    {
        "name": "DHPrivateKey",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/interfaces/DHPrivateKey.html"
    },
    {
        "name": "DHPrivateKeySpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/DHPrivateKeySpec.html"
    },
    {
        "name": "DHPublicKey",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/interfaces/DHPublicKey.html"
    },
    {
        "name": "DHPublicKeySpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/DHPublicKeySpec.html"
    },
    {
        "name": "Diagnostic",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/Diagnostic.html"
    },
    {
        "name": "Diagnostic.Kind",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/Diagnostic.Kind.html"
    },
    {
        "name": "DiagnosticCollector",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/DiagnosticCollector.html"
    },
    {
        "name": "DiagnosticListener",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/DiagnosticListener.html"
    },
    {
        "name": "Dialog",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Dialog.html"
    },
    {
        "name": "Dialog.ModalExclusionType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Dialog.ModalExclusionType.html"
    },
    {
        "name": "Dialog.ModalityType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Dialog.ModalityType.html"
    },
    {
        "name": "DialogTypeSelection",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/DialogTypeSelection.html"
    },
    {
        "name": "Dictionary",
        "constructors": [],
        "methods": [],
        "href": "java/util/Dictionary.html"
    },
    {
        "name": "DigestException",
        "constructors": [],
        "methods": [],
        "href": "java/security/DigestException.html"
    },
    {
        "name": "DigestInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/security/DigestInputStream.html"
    },
    {
        "name": "DigestMethod",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/DigestMethod.html"
    },
    {
        "name": "DigestMethodParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/DigestMethodParameterSpec.html"
    },
    {
        "name": "DigestOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/security/DigestOutputStream.html"
    },
    {
        "name": "Dimension",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Dimension.html"
    },
    {
        "name": "Dimension2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Dimension2D.html"
    },
    {
        "name": "DimensionUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/DimensionUIResource.html"
    },
    {
        "name": "DirContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/DirContext.html"
    },
    {
        "name": "DirectColorModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/DirectColorModel.html"
    },
    {
        "name": "DirectoryIteratorException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/DirectoryIteratorException.html"
    },
    {
        "name": "DirectoryManager",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/DirectoryManager.html"
    },
    {
        "name": "DirectoryNotEmptyException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/DirectoryNotEmptyException.html"
    },
    {
        "name": "DirectoryStream",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/DirectoryStream.html"
    },
    {
        "name": "DirectoryStream.Filter",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/DirectoryStream.Filter.html"
    },
    {
        "name": "DirObjectFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/DirObjectFactory.html"
    },
    {
        "name": "DirStateFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/DirStateFactory.html"
    },
    {
        "name": "DirStateFactory.Result",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/DirStateFactory.Result.html"
    },
    {
        "name": "DISCARDING",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/DISCARDING.html"
    },
    {
        "name": "Dispatch",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Dispatch.html"
    },
    {
        "name": "DisplayMode",
        "constructors": [],
        "methods": [],
        "href": "java/awt/DisplayMode.html"
    },
    {
        "name": "DnDConstants",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DnDConstants.html"
    },
    {
        "name": "Doc",
        "constructors": [],
        "methods": [],
        "href": "javax/print/Doc.html"
    },
    {
        "name": "DocAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/DocAttribute.html"
    },
    {
        "name": "DocAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/DocAttributeSet.html"
    },
    {
        "name": "DocFlavor",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.html"
    },
    {
        "name": "DocFlavor.BYTE_ARRAY",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.BYTE_ARRAY.html"
    },
    {
        "name": "DocFlavor.CHAR_ARRAY",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.CHAR_ARRAY.html"
    },
    {
        "name": "DocFlavor.INPUT_STREAM",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.INPUT_STREAM.html"
    },
    {
        "name": "DocFlavor.READER",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.READER.html"
    },
    {
        "name": "DocFlavor.SERVICE_FORMATTED",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.SERVICE_FORMATTED.html"
    },
    {
        "name": "DocFlavor.STRING",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.STRING.html"
    },
    {
        "name": "DocFlavor.URL",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocFlavor.URL.html"
    },
    {
        "name": "DocPrintJob",
        "constructors": [],
        "methods": [],
        "href": "javax/print/DocPrintJob.html"
    },
    {
        "name": "Document",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Document.html"
    },
    {
        "name": "Document",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Document.html"
    },
    {
        "name": "DocumentationTool",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/DocumentationTool.html"
    },
    {
        "name": "DocumentationTool.DocumentationTask",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/DocumentationTool.DocumentationTask.html"
    },
    {
        "name": "DocumentationTool.Location",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/DocumentationTool.Location.html"
    },
    {
        "name": "DocumentBuilder",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/parsers/DocumentBuilder.html"
    },
    {
        "name": "DocumentBuilderFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/parsers/DocumentBuilderFactory.html"
    },
    {
        "name": "Documented",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/Documented.html"
    },
    {
        "name": "DocumentEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/DocumentEvent.html"
    },
    {
        "name": "DocumentEvent",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/DocumentEvent.html"
    },
    {
        "name": "DocumentEvent.ElementChange",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/DocumentEvent.ElementChange.html"
    },
    {
        "name": "DocumentEvent.EventType",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/DocumentEvent.EventType.html"
    },
    {
        "name": "DocumentFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DocumentFilter.html"
    },
    {
        "name": "DocumentFilter.FilterBypass",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/DocumentFilter.FilterBypass.html"
    },
    {
        "name": "DocumentFragment",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DocumentFragment.html"
    },
    {
        "name": "DocumentHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/DocumentHandler.html"
    },
    {
        "name": "DocumentListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/DocumentListener.html"
    },
    {
        "name": "DocumentName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/DocumentName.html"
    },
    {
        "name": "DocumentParser",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/DocumentParser.html"
    },
    {
        "name": "DocumentType",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DocumentType.html"
    },
    {
        "name": "DocumentView",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/views/DocumentView.html"
    },
    {
        "name": "DomainCombiner",
        "constructors": [],
        "methods": [],
        "href": "java/security/DomainCombiner.html"
    },
    {
        "name": "DomainLoadStoreParameter",
        "constructors": [],
        "methods": [],
        "href": "java/security/DomainLoadStoreParameter.html"
    },
    {
        "name": "DomainManager",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DomainManager.html"
    },
    {
        "name": "DomainManagerOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DomainManagerOperations.html"
    },
    {
        "name": "DOMConfiguration",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMConfiguration.html"
    },
    {
        "name": "DOMCryptoContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dom/DOMCryptoContext.html"
    },
    {
        "name": "DOMError",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMError.html"
    },
    {
        "name": "DOMErrorHandler",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMErrorHandler.html"
    },
    {
        "name": "DOMException",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMException.html"
    },
    {
        "name": "DomHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/DomHandler.html"
    },
    {
        "name": "DOMImplementation",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMImplementation.html"
    },
    {
        "name": "DOMImplementationList",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMImplementationList.html"
    },
    {
        "name": "DOMImplementationLS",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/DOMImplementationLS.html"
    },
    {
        "name": "DOMImplementationRegistry",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/bootstrap/DOMImplementationRegistry.html"
    },
    {
        "name": "DOMImplementationSource",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMImplementationSource.html"
    },
    {
        "name": "DOMLocator",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/dom/DOMLocator.html"
    },
    {
        "name": "DOMLocator",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMLocator.html"
    },
    {
        "name": "DOMResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/dom/DOMResult.html"
    },
    {
        "name": "DOMSignContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/dom/DOMSignContext.html"
    },
    {
        "name": "DOMSource",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/dom/DOMSource.html"
    },
    {
        "name": "DOMStringList",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/DOMStringList.html"
    },
    {
        "name": "DOMStructure",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dom/DOMStructure.html"
    },
    {
        "name": "DOMURIReference",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dom/DOMURIReference.html"
    },
    {
        "name": "DOMValidateContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/dom/DOMValidateContext.html"
    },
    {
        "name": "DosFileAttributes",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/DosFileAttributes.html"
    },
    {
        "name": "DosFileAttributeView",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/DosFileAttributeView.html"
    },
    {
        "name": "Double",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Double.html"
    },
    {
        "name": "DoubleAccumulator",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/atomic/DoubleAccumulator.html"
    },
    {
        "name": "DoubleAdder",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/atomic/DoubleAdder.html"
    },
    {
        "name": "DoubleBinaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleBinaryOperator.html"
    },
    {
        "name": "DoubleBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/DoubleBuffer.html"
    },
    {
        "name": "DoubleConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleConsumer.html"
    },
    {
        "name": "DoubleFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleFunction.html"
    },
    {
        "name": "DoubleHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DoubleHolder.html"
    },
    {
        "name": "DoublePredicate",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoublePredicate.html"
    },
    {
        "name": "DoubleSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DoubleSeqHelper.html"
    },
    {
        "name": "DoubleSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DoubleSeqHolder.html"
    },
    {
        "name": "DoubleStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/DoubleStream.html"
    },
    {
        "name": "DoubleStream.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/DoubleStream.Builder.html"
    },
    {
        "name": "DoubleSummaryStatistics",
        "constructors": [],
        "methods": [],
        "href": "java/util/DoubleSummaryStatistics.html"
    },
    {
        "name": "DoubleSupplier",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleSupplier.html"
    },
    {
        "name": "DoubleToIntFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleToIntFunction.html"
    },
    {
        "name": "DoubleToLongFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleToLongFunction.html"
    },
    {
        "name": "DoubleUnaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/DoubleUnaryOperator.html"
    },
    {
        "name": "DragGestureEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragGestureEvent.html"
    },
    {
        "name": "DragGestureListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragGestureListener.html"
    },
    {
        "name": "DragGestureRecognizer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragGestureRecognizer.html"
    },
    {
        "name": "DragSource",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSource.html"
    },
    {
        "name": "DragSourceAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceAdapter.html"
    },
    {
        "name": "DragSourceContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceContext.html"
    },
    {
        "name": "DragSourceDragEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceDragEvent.html"
    },
    {
        "name": "DragSourceDropEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceDropEvent.html"
    },
    {
        "name": "DragSourceEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceEvent.html"
    },
    {
        "name": "DragSourceListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceListener.html"
    },
    {
        "name": "DragSourceMotionListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DragSourceMotionListener.html"
    },
    {
        "name": "Driver",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Driver.html"
    },
    {
        "name": "DriverAction",
        "constructors": [],
        "methods": [],
        "href": "java/sql/DriverAction.html"
    },
    {
        "name": "DriverManager",
        "constructors": [],
        "methods": [],
        "href": "java/sql/DriverManager.html"
    },
    {
        "name": "DriverPropertyInfo",
        "constructors": [],
        "methods": [],
        "href": "java/sql/DriverPropertyInfo.html"
    },
    {
        "name": "DropMode",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/DropMode.html"
    },
    {
        "name": "DropTarget",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTarget.html"
    },
    {
        "name": "DropTarget.DropTargetAutoScroller",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTarget.DropTargetAutoScroller.html"
    },
    {
        "name": "DropTargetAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTargetAdapter.html"
    },
    {
        "name": "DropTargetContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTargetContext.html"
    },
    {
        "name": "DropTargetDragEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTargetDragEvent.html"
    },
    {
        "name": "DropTargetDropEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTargetDropEvent.html"
    },
    {
        "name": "DropTargetEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTargetEvent.html"
    },
    {
        "name": "DropTargetListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/DropTargetListener.html"
    },
    {
        "name": "DSAGenParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/DSAGenParameterSpec.html"
    },
    {
        "name": "DSAKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/DSAKey.html"
    },
    {
        "name": "DSAKeyPairGenerator",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/DSAKeyPairGenerator.html"
    },
    {
        "name": "DSAParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/DSAParameterSpec.html"
    },
    {
        "name": "DSAParams",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/DSAParams.html"
    },
    {
        "name": "DSAPrivateKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/DSAPrivateKey.html"
    },
    {
        "name": "DSAPrivateKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/DSAPrivateKeySpec.html"
    },
    {
        "name": "DSAPublicKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/DSAPublicKey.html"
    },
    {
        "name": "DSAPublicKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/DSAPublicKeySpec.html"
    },
    {
        "name": "DTD",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/DTD.html"
    },
    {
        "name": "DTD",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/DTD.html"
    },
    {
        "name": "DTDConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/DTDConstants.html"
    },
    {
        "name": "DTDHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/DTDHandler.html"
    },
    {
        "name": "DuplicateFormatFlagsException",
        "constructors": [],
        "methods": [],
        "href": "java/util/DuplicateFormatFlagsException.html"
    },
    {
        "name": "DuplicateName",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfoPackage/DuplicateName.html"
    },
    {
        "name": "DuplicateNameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfoPackage/DuplicateNameHelper.html"
    },
    {
        "name": "Duration",
        "constructors": [],
        "methods": [],
        "href": "java/time/Duration.html"
    },
    {
        "name": "Duration",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/datatype/Duration.html"
    },
    {
        "name": "DynamicImplementation",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynamicImplementation.html"
    },
    {
        "name": "DynamicImplementation",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/DynamicImplementation.html"
    },
    {
        "name": "DynamicMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/DynamicMBean.html"
    },
    {
        "name": "DynAny",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynAny.html"
    },
    {
        "name": "DynAny",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAny.html"
    },
    {
        "name": "DynAnyFactory",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyFactory.html"
    },
    {
        "name": "DynAnyFactoryHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyFactoryHelper.html"
    },
    {
        "name": "DynAnyFactoryOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyFactoryOperations.html"
    },
    {
        "name": "DynAnyHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyHelper.html"
    },
    {
        "name": "DynAnyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyOperations.html"
    },
    {
        "name": "DynAnySeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnySeqHelper.html"
    },
    {
        "name": "DynArray",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynArray.html"
    },
    {
        "name": "DynArray",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynArray.html"
    },
    {
        "name": "DynArrayHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynArrayHelper.html"
    },
    {
        "name": "DynArrayOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynArrayOperations.html"
    },
    {
        "name": "DynEnum",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynEnum.html"
    },
    {
        "name": "DynEnum",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynEnum.html"
    },
    {
        "name": "DynEnumHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynEnumHelper.html"
    },
    {
        "name": "DynEnumOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynEnumOperations.html"
    },
    {
        "name": "DynFixed",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynFixed.html"
    },
    {
        "name": "DynFixed",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynFixed.html"
    },
    {
        "name": "DynFixedHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynFixedHelper.html"
    },
    {
        "name": "DynFixedOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynFixedOperations.html"
    },
    {
        "name": "DynSequence",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynSequence.html"
    },
    {
        "name": "DynSequence",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynSequence.html"
    },
    {
        "name": "DynSequenceHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynSequenceHelper.html"
    },
    {
        "name": "DynSequenceOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynSequenceOperations.html"
    },
    {
        "name": "DynStruct",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynStruct.html"
    },
    {
        "name": "DynStruct",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynStruct.html"
    },
    {
        "name": "DynStructHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynStructHelper.html"
    },
    {
        "name": "DynStructOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynStructOperations.html"
    },
    {
        "name": "DynUnion",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynUnion.html"
    },
    {
        "name": "DynUnion",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynUnion.html"
    },
    {
        "name": "DynUnionHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynUnionHelper.html"
    },
    {
        "name": "DynUnionOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynUnionOperations.html"
    },
    {
        "name": "DynValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynValue.html"
    },
    {
        "name": "DynValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValue.html"
    },
    {
        "name": "DynValueBox",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValueBox.html"
    },
    {
        "name": "DynValueBoxOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValueBoxOperations.html"
    },
    {
        "name": "DynValueCommon",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValueCommon.html"
    },
    {
        "name": "DynValueCommonOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValueCommonOperations.html"
    },
    {
        "name": "DynValueHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValueHelper.html"
    },
    {
        "name": "DynValueOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynValueOperations.html"
    },
    {
        "name": "ECField",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECField.html"
    },
    {
        "name": "ECFieldF2m",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECFieldF2m.html"
    },
    {
        "name": "ECFieldFp",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECFieldFp.html"
    },
    {
        "name": "ECGenParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECGenParameterSpec.html"
    },
    {
        "name": "ECKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/ECKey.html"
    },
    {
        "name": "ECParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECParameterSpec.html"
    },
    {
        "name": "ECPoint",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECPoint.html"
    },
    {
        "name": "ECPrivateKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/ECPrivateKey.html"
    },
    {
        "name": "ECPrivateKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECPrivateKeySpec.html"
    },
    {
        "name": "ECPublicKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/ECPublicKey.html"
    },
    {
        "name": "ECPublicKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/ECPublicKeySpec.html"
    },
    {
        "name": "EditorKit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/EditorKit.html"
    },
    {
        "name": "Element",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/Element.html"
    },
    {
        "name": "Element",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Element.html"
    },
    {
        "name": "Element",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/Element.html"
    },
    {
        "name": "Element",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/Element.html"
    },
    {
        "name": "Element",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Element.html"
    },
    {
        "name": "ElementFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementFilter.html"
    },
    {
        "name": "ElementIterator",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/ElementIterator.html"
    },
    {
        "name": "ElementKind",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/ElementKind.html"
    },
    {
        "name": "ElementKindVisitor6",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementKindVisitor6.html"
    },
    {
        "name": "ElementKindVisitor7",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementKindVisitor7.html"
    },
    {
        "name": "ElementKindVisitor8",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementKindVisitor8.html"
    },
    {
        "name": "Elements",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/Elements.html"
    },
    {
        "name": "ElementScanner6",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementScanner6.html"
    },
    {
        "name": "ElementScanner7",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementScanner7.html"
    },
    {
        "name": "ElementScanner8",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/ElementScanner8.html"
    },
    {
        "name": "ElementType",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/ElementType.html"
    },
    {
        "name": "ElementVisitor",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/ElementVisitor.html"
    },
    {
        "name": "Ellipse2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Ellipse2D.html"
    },
    {
        "name": "Ellipse2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Ellipse2D.Double.html"
    },
    {
        "name": "Ellipse2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Ellipse2D.Float.html"
    },
    {
        "name": "EllipticCurve",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/EllipticCurve.html"
    },
    {
        "name": "EmptyBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/EmptyBorder.html"
    },
    {
        "name": "EmptyStackException",
        "constructors": [],
        "methods": [],
        "href": "java/util/EmptyStackException.html"
    },
    {
        "name": "EncodedKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/EncodedKeySpec.html"
    },
    {
        "name": "Encoder",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Encoder.html"
    },
    {
        "name": "Encoding",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/Encoding.html"
    },
    {
        "name": "ENCODING_CDR_ENCAPS",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ENCODING_CDR_ENCAPS.html"
    },
    {
        "name": "EncryptedPrivateKeyInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/EncryptedPrivateKeyInfo.html"
    },
    {
        "name": "EndDocument",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/EndDocument.html"
    },
    {
        "name": "EndElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/EndElement.html"
    },
    {
        "name": "Endpoint",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Endpoint.html"
    },
    {
        "name": "EndpointContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/EndpointContext.html"
    },
    {
        "name": "EndpointReference",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/EndpointReference.html"
    },
    {
        "name": "Entity",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/Entity.html"
    },
    {
        "name": "Entity",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Entity.html"
    },
    {
        "name": "EntityDeclaration",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/EntityDeclaration.html"
    },
    {
        "name": "EntityReference",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/EntityReference.html"
    },
    {
        "name": "EntityReference",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/EntityReference.html"
    },
    {
        "name": "EntityResolver",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/EntityResolver.html"
    },
    {
        "name": "EntityResolver2",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ext/EntityResolver2.html"
    },
    {
        "name": "Enum",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Enum.html"
    },
    {
        "name": "EnumConstantNotPresentException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/EnumConstantNotPresentException.html"
    },
    {
        "name": "EnumControl",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/EnumControl.html"
    },
    {
        "name": "EnumControl.Type",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/EnumControl.Type.html"
    },
    {
        "name": "Enumeration",
        "constructors": [],
        "methods": [],
        "href": "java/util/Enumeration.html"
    },
    {
        "name": "EnumMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/EnumMap.html"
    },
    {
        "name": "EnumSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/EnumSet.html"
    },
    {
        "name": "EnumSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/EnumSyntax.html"
    },
    {
        "name": "Environment",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Environment.html"
    },
    {
        "name": "EOFException",
        "constructors": [],
        "methods": [],
        "href": "java/io/EOFException.html"
    },
    {
        "name": "Era",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/Era.html"
    },
    {
        "name": "Error",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Error.html"
    },
    {
        "name": "ErrorHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ErrorHandler.html"
    },
    {
        "name": "ErrorListener",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/ErrorListener.html"
    },
    {
        "name": "ErrorManager",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/ErrorManager.html"
    },
    {
        "name": "ErrorType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/ErrorType.html"
    },
    {
        "name": "EtchedBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/EtchedBorder.html"
    },
    {
        "name": "Event",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Event.html"
    },
    {
        "name": "Event",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/Event.html"
    },
    {
        "name": "EventContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/EventContext.html"
    },
    {
        "name": "EventDirContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/EventDirContext.html"
    },
    {
        "name": "EventException",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/EventException.html"
    },
    {
        "name": "EventFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/EventFilter.html"
    },
    {
        "name": "EventHandler",
        "constructors": [],
        "methods": [],
        "href": "java/beans/EventHandler.html"
    },
    {
        "name": "EventListener",
        "constructors": [],
        "methods": [],
        "href": "java/util/EventListener.html"
    },
    {
        "name": "EventListener",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/EventListener.html"
    },
    {
        "name": "EventListenerList",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/EventListenerList.html"
    },
    {
        "name": "EventListenerProxy",
        "constructors": [],
        "methods": [],
        "href": "java/util/EventListenerProxy.html"
    },
    {
        "name": "EventObject",
        "constructors": [],
        "methods": [],
        "href": "java/util/EventObject.html"
    },
    {
        "name": "EventQueue",
        "constructors": [],
        "methods": [],
        "href": "java/awt/EventQueue.html"
    },
    {
        "name": "EventReaderDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/util/EventReaderDelegate.html"
    },
    {
        "name": "EventSetDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/EventSetDescriptor.html"
    },
    {
        "name": "EventTarget",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/EventTarget.html"
    },
    {
        "name": "ExcC14NParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/ExcC14NParameterSpec.html"
    },
    {
        "name": "Exception",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Exception.html"
    },
    {
        "name": "ExceptionDetailMessage",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ExceptionDetailMessage.html"
    },
    {
        "name": "ExceptionInInitializerError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ExceptionInInitializerError.html"
    },
    {
        "name": "ExceptionList",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ExceptionList.html"
    },
    {
        "name": "ExceptionListener",
        "constructors": [],
        "methods": [],
        "href": "java/beans/ExceptionListener.html"
    },
    {
        "name": "Exchanger",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Exchanger.html"
    },
    {
        "name": "Executable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Executable.html"
    },
    {
        "name": "ExecutableElement",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/ExecutableElement.html"
    },
    {
        "name": "ExecutableType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/ExecutableType.html"
    },
    {
        "name": "ExecutionException",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ExecutionException.html"
    },
    {
        "name": "Executor",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Executor.html"
    },
    {
        "name": "ExecutorCompletionService",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ExecutorCompletionService.html"
    },
    {
        "name": "Executors",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Executors.html"
    },
    {
        "name": "ExecutorService",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ExecutorService.html"
    },
    {
        "name": "ExemptionMechanism",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/ExemptionMechanism.html"
    },
    {
        "name": "ExemptionMechanismException",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/ExemptionMechanismException.html"
    },
    {
        "name": "ExemptionMechanismSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/ExemptionMechanismSpi.html"
    },
    {
        "name": "ExpandVetoException",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/ExpandVetoException.html"
    },
    {
        "name": "ExportException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/ExportException.html"
    },
    {
        "name": "Expression",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Expression.html"
    },
    {
        "name": "ExtendedRequest",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/ExtendedRequest.html"
    },
    {
        "name": "ExtendedResponse",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/ExtendedResponse.html"
    },
    {
        "name": "ExtendedSSLSession",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/ExtendedSSLSession.html"
    },
    {
        "name": "Extension",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/Extension.html"
    },
    {
        "name": "Externalizable",
        "constructors": [],
        "methods": [],
        "href": "java/io/Externalizable.html"
    },
    {
        "name": "FactoryConfigurationError",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/parsers/FactoryConfigurationError.html"
    },
    {
        "name": "FactoryConfigurationError",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/FactoryConfigurationError.html"
    },
    {
        "name": "FailedLoginException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/FailedLoginException.html"
    },
    {
        "name": "FaultAction",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/FaultAction.html"
    },
    {
        "name": "FeatureDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/FeatureDescriptor.html"
    },
    {
        "name": "Fidelity",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Fidelity.html"
    },
    {
        "name": "Field",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Field.html"
    },
    {
        "name": "FieldNameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/FieldNameHelper.html"
    },
    {
        "name": "FieldNameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/FieldNameHelper.html"
    },
    {
        "name": "FieldPosition",
        "constructors": [],
        "methods": [],
        "href": "java/text/FieldPosition.html"
    },
    {
        "name": "FieldView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/FieldView.html"
    },
    {
        "name": "File",
        "constructors": [],
        "methods": [],
        "href": "java/io/File.html"
    },
    {
        "name": "FileAlreadyExistsException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileAlreadyExistsException.html"
    },
    {
        "name": "FileAttribute",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/FileAttribute.html"
    },
    {
        "name": "FileAttributeView",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/FileAttributeView.html"
    },
    {
        "name": "FileCacheImageInputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/FileCacheImageInputStream.html"
    },
    {
        "name": "FileCacheImageOutputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/FileCacheImageOutputStream.html"
    },
    {
        "name": "FileChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/FileChannel.html"
    },
    {
        "name": "FileChannel.MapMode",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/FileChannel.MapMode.html"
    },
    {
        "name": "FileChooserUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/FileChooserUI.html"
    },
    {
        "name": "FileDataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/FileDataSource.html"
    },
    {
        "name": "FileDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileDescriptor.html"
    },
    {
        "name": "FileDialog",
        "constructors": [],
        "methods": [],
        "href": "java/awt/FileDialog.html"
    },
    {
        "name": "FileFilter",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileFilter.html"
    },
    {
        "name": "FileFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/filechooser/FileFilter.html"
    },
    {
        "name": "FileHandler",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/FileHandler.html"
    },
    {
        "name": "FileImageInputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/FileImageInputStream.html"
    },
    {
        "name": "FileImageOutputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/FileImageOutputStream.html"
    },
    {
        "name": "FileInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileInputStream.html"
    },
    {
        "name": "FileLock",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/FileLock.html"
    },
    {
        "name": "FileLockInterruptionException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/FileLockInterruptionException.html"
    },
    {
        "name": "FileNameExtensionFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/filechooser/FileNameExtensionFilter.html"
    },
    {
        "name": "FilenameFilter",
        "constructors": [],
        "methods": [],
        "href": "java/io/FilenameFilter.html"
    },
    {
        "name": "FileNameMap",
        "constructors": [],
        "methods": [],
        "href": "java/net/FileNameMap.html"
    },
    {
        "name": "FileNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileNotFoundException.html"
    },
    {
        "name": "FileObject",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/FileObject.html"
    },
    {
        "name": "FileOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileOutputStream.html"
    },
    {
        "name": "FileOwnerAttributeView",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/FileOwnerAttributeView.html"
    },
    {
        "name": "FilePermission",
        "constructors": [],
        "methods": [],
        "href": "java/io/FilePermission.html"
    },
    {
        "name": "Filer",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/Filer.html"
    },
    {
        "name": "FileReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileReader.html"
    },
    {
        "name": "FilerException",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/FilerException.html"
    },
    {
        "name": "Files",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/Files.html"
    },
    {
        "name": "FileStore",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileStore.html"
    },
    {
        "name": "FileStoreAttributeView",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/FileStoreAttributeView.html"
    },
    {
        "name": "FileSystem",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileSystem.html"
    },
    {
        "name": "FileSystemAlreadyExistsException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileSystemAlreadyExistsException.html"
    },
    {
        "name": "FileSystemException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileSystemException.html"
    },
    {
        "name": "FileSystemLoopException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileSystemLoopException.html"
    },
    {
        "name": "FileSystemNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileSystemNotFoundException.html"
    },
    {
        "name": "FileSystemProvider",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/spi/FileSystemProvider.html"
    },
    {
        "name": "FileSystems",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileSystems.html"
    },
    {
        "name": "FileSystemView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/filechooser/FileSystemView.html"
    },
    {
        "name": "FileTime",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/FileTime.html"
    },
    {
        "name": "FileTypeDetector",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/spi/FileTypeDetector.html"
    },
    {
        "name": "FileTypeMap",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/FileTypeMap.html"
    },
    {
        "name": "FileView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/filechooser/FileView.html"
    },
    {
        "name": "FileVisitOption",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileVisitOption.html"
    },
    {
        "name": "FileVisitor",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileVisitor.html"
    },
    {
        "name": "FileVisitResult",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/FileVisitResult.html"
    },
    {
        "name": "FileWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/FileWriter.html"
    },
    {
        "name": "Filter",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/Filter.html"
    },
    {
        "name": "FilteredImageSource",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/FilteredImageSource.html"
    },
    {
        "name": "FilteredRowSet",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/FilteredRowSet.html"
    },
    {
        "name": "FilterInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/FilterInputStream.html"
    },
    {
        "name": "FilterOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/FilterOutputStream.html"
    },
    {
        "name": "FilterReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/FilterReader.html"
    },
    {
        "name": "FilterWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/FilterWriter.html"
    },
    {
        "name": "Finishings",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Finishings.html"
    },
    {
        "name": "FixedHeightLayoutCache",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/FixedHeightLayoutCache.html"
    },
    {
        "name": "FixedHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/FixedHolder.html"
    },
    {
        "name": "FlatteningPathIterator",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/FlatteningPathIterator.html"
    },
    {
        "name": "FlavorEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/FlavorEvent.html"
    },
    {
        "name": "FlavorException",
        "constructors": [],
        "methods": [],
        "href": "javax/print/FlavorException.html"
    },
    {
        "name": "FlavorListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/FlavorListener.html"
    },
    {
        "name": "FlavorMap",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/FlavorMap.html"
    },
    {
        "name": "FlavorTable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/FlavorTable.html"
    },
    {
        "name": "Float",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Float.html"
    },
    {
        "name": "FloatBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/FloatBuffer.html"
    },
    {
        "name": "FloatControl",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/FloatControl.html"
    },
    {
        "name": "FloatControl.Type",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/FloatControl.Type.html"
    },
    {
        "name": "FloatHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/FloatHolder.html"
    },
    {
        "name": "FloatSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/FloatSeqHelper.html"
    },
    {
        "name": "FloatSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/FloatSeqHolder.html"
    },
    {
        "name": "FlowLayout",
        "constructors": [],
        "methods": [],
        "href": "java/awt/FlowLayout.html"
    },
    {
        "name": "FlowView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/FlowView.html"
    },
    {
        "name": "FlowView.FlowStrategy",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/FlowView.FlowStrategy.html"
    },
    {
        "name": "Flushable",
        "constructors": [],
        "methods": [],
        "href": "java/io/Flushable.html"
    },
    {
        "name": "FocusAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/FocusAdapter.html"
    },
    {
        "name": "FocusEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/FocusEvent.html"
    },
    {
        "name": "FocusListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/FocusListener.html"
    },
    {
        "name": "FocusManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/FocusManager.html"
    },
    {
        "name": "FocusTraversalPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/awt/FocusTraversalPolicy.html"
    },
    {
        "name": "Font",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Font.html"
    },
    {
        "name": "FontFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/FontFormatException.html"
    },
    {
        "name": "FontMetrics",
        "constructors": [],
        "methods": [],
        "href": "java/awt/FontMetrics.html"
    },
    {
        "name": "FontRenderContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/FontRenderContext.html"
    },
    {
        "name": "FontUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/FontUIResource.html"
    },
    {
        "name": "ForkJoinPool",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ForkJoinPool.html"
    },
    {
        "name": "ForkJoinPool.ForkJoinWorkerThreadFactory",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html"
    },
    {
        "name": "ForkJoinPool.ManagedBlocker",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ForkJoinPool.ManagedBlocker.html"
    },
    {
        "name": "ForkJoinTask",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ForkJoinTask.html"
    },
    {
        "name": "ForkJoinWorkerThread",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ForkJoinWorkerThread.html"
    },
    {
        "name": "Format",
        "constructors": [],
        "methods": [],
        "href": "java/text/Format.html"
    },
    {
        "name": "Format.Field",
        "constructors": [],
        "methods": [],
        "href": "java/text/Format.Field.html"
    },
    {
        "name": "FormatConversionProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/spi/FormatConversionProvider.html"
    },
    {
        "name": "FormatFlagsConversionMismatchException",
        "constructors": [],
        "methods": [],
        "href": "java/util/FormatFlagsConversionMismatchException.html"
    },
    {
        "name": "FormatMismatch",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecPackage/FormatMismatch.html"
    },
    {
        "name": "FormatMismatchHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecPackage/FormatMismatchHelper.html"
    },
    {
        "name": "FormatStyle",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/FormatStyle.html"
    },
    {
        "name": "Formattable",
        "constructors": [],
        "methods": [],
        "href": "java/util/Formattable.html"
    },
    {
        "name": "FormattableFlags",
        "constructors": [],
        "methods": [],
        "href": "java/util/FormattableFlags.html"
    },
    {
        "name": "Formatter",
        "constructors": [],
        "methods": [],
        "href": "java/util/Formatter.html"
    },
    {
        "name": "Formatter",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/Formatter.html"
    },
    {
        "name": "Formatter.BigDecimalLayoutForm",
        "constructors": [],
        "methods": [],
        "href": "java/util/Formatter.BigDecimalLayoutForm.html"
    },
    {
        "name": "FormatterClosedException",
        "constructors": [],
        "methods": [],
        "href": "java/util/FormatterClosedException.html"
    },
    {
        "name": "FormSubmitEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/FormSubmitEvent.html"
    },
    {
        "name": "FormSubmitEvent.MethodType",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/FormSubmitEvent.MethodType.html"
    },
    {
        "name": "FormView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/FormView.html"
    },
    {
        "name": "ForwardingFileObject",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/ForwardingFileObject.html"
    },
    {
        "name": "ForwardingJavaFileManager",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/ForwardingJavaFileManager.html"
    },
    {
        "name": "ForwardingJavaFileObject",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/ForwardingJavaFileObject.html"
    },
    {
        "name": "ForwardRequest",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ForwardRequest.html"
    },
    {
        "name": "ForwardRequest",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ForwardRequest.html"
    },
    {
        "name": "ForwardRequestHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ForwardRequestHelper.html"
    },
    {
        "name": "ForwardRequestHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ForwardRequestHelper.html"
    },
    {
        "name": "Frame",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Frame.html"
    },
    {
        "name": "FREE_MEM",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/FREE_MEM.html"
    },
    {
        "name": "Function",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/Function.html"
    },
    {
        "name": "FunctionalInterface",
        "constructors": [],
        "methods": [],
        "href": "java/lang/FunctionalInterface.html"
    },
    {
        "name": "Future",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Future.html"
    },
    {
        "name": "FutureTask",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/FutureTask.html"
    },
    {
        "name": "GapContent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/GapContent.html"
    },
    {
        "name": "GarbageCollectorMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/GarbageCollectorMXBean.html"
    },
    {
        "name": "GatheringByteChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/GatheringByteChannel.html"
    },
    {
        "name": "GaugeMonitor",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/GaugeMonitor.html"
    },
    {
        "name": "GaugeMonitorMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/GaugeMonitorMBean.html"
    },
    {
        "name": "GCMParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/GCMParameterSpec.html"
    },
    {
        "name": "GeneralPath",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/GeneralPath.html"
    },
    {
        "name": "GeneralSecurityException",
        "constructors": [],
        "methods": [],
        "href": "java/security/GeneralSecurityException.html"
    },
    {
        "name": "Generated",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/Generated.html"
    },
    {
        "name": "GenericArrayType",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/GenericArrayType.html"
    },
    {
        "name": "GenericDeclaration",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/GenericDeclaration.html"
    },
    {
        "name": "GenericSignatureFormatError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/GenericSignatureFormatError.html"
    },
    {
        "name": "GlyphJustificationInfo",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/GlyphJustificationInfo.html"
    },
    {
        "name": "GlyphMetrics",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/GlyphMetrics.html"
    },
    {
        "name": "GlyphVector",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/GlyphVector.html"
    },
    {
        "name": "GlyphView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/GlyphView.html"
    },
    {
        "name": "GlyphView.GlyphPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/GlyphView.GlyphPainter.html"
    },
    {
        "name": "GradientPaint",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GradientPaint.html"
    },
    {
        "name": "GraphicAttribute",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/GraphicAttribute.html"
    },
    {
        "name": "Graphics",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Graphics.html"
    },
    {
        "name": "Graphics2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Graphics2D.html"
    },
    {
        "name": "GraphicsConfigTemplate",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GraphicsConfigTemplate.html"
    },
    {
        "name": "GraphicsConfiguration",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GraphicsConfiguration.html"
    },
    {
        "name": "GraphicsDevice",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GraphicsDevice.html"
    },
    {
        "name": "GraphicsDevice.WindowTranslucency",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GraphicsDevice.WindowTranslucency.html"
    },
    {
        "name": "GraphicsEnvironment",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GraphicsEnvironment.html"
    },
    {
        "name": "GrayFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/GrayFilter.html"
    },
    {
        "name": "GregorianCalendar",
        "constructors": [],
        "methods": [],
        "href": "java/util/GregorianCalendar.html"
    },
    {
        "name": "GridBagConstraints",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GridBagConstraints.html"
    },
    {
        "name": "GridBagLayout",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GridBagLayout.html"
    },
    {
        "name": "GridBagLayoutInfo",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GridBagLayoutInfo.html"
    },
    {
        "name": "GridLayout",
        "constructors": [],
        "methods": [],
        "href": "java/awt/GridLayout.html"
    },
    {
        "name": "Group",
        "constructors": [],
        "methods": [],
        "href": "java/security/acl/Group.html"
    },
    {
        "name": "GroupLayout",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/GroupLayout.html"
    },
    {
        "name": "GroupLayout.Alignment",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/GroupLayout.Alignment.html"
    },
    {
        "name": "GroupPrincipal",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/GroupPrincipal.html"
    },
    {
        "name": "GSSContext",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/GSSContext.html"
    },
    {
        "name": "GSSCredential",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/GSSCredential.html"
    },
    {
        "name": "GSSException",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/GSSException.html"
    },
    {
        "name": "GSSManager",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/GSSManager.html"
    },
    {
        "name": "GSSName",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/GSSName.html"
    },
    {
        "name": "Guard",
        "constructors": [],
        "methods": [],
        "href": "java/security/Guard.html"
    },
    {
        "name": "GuardedObject",
        "constructors": [],
        "methods": [],
        "href": "java/security/GuardedObject.html"
    },
    {
        "name": "GZIPInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/GZIPInputStream.html"
    },
    {
        "name": "GZIPOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/GZIPOutputStream.html"
    },
    {
        "name": "Handler",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/Handler.html"
    },
    {
        "name": "Handler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/Handler.html"
    },
    {
        "name": "HandlerBase",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/HandlerBase.html"
    },
    {
        "name": "HandlerChain",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/HandlerChain.html"
    },
    {
        "name": "HandlerResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/HandlerResolver.html"
    },
    {
        "name": "HandshakeCompletedEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/HandshakeCompletedEvent.html"
    },
    {
        "name": "HandshakeCompletedListener",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/HandshakeCompletedListener.html"
    },
    {
        "name": "HasControls",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/HasControls.html"
    },
    {
        "name": "HashAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/HashAttributeSet.html"
    },
    {
        "name": "HashDocAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/HashDocAttributeSet.html"
    },
    {
        "name": "HashMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/HashMap.html"
    },
    {
        "name": "HashPrintJobAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/HashPrintJobAttributeSet.html"
    },
    {
        "name": "HashPrintRequestAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/HashPrintRequestAttributeSet.html"
    },
    {
        "name": "HashPrintServiceAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/HashPrintServiceAttributeSet.html"
    },
    {
        "name": "HashSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/HashSet.html"
    },
    {
        "name": "Hashtable",
        "constructors": [],
        "methods": [],
        "href": "java/util/Hashtable.html"
    },
    {
        "name": "HeadlessException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/HeadlessException.html"
    },
    {
        "name": "HexBinaryAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/HexBinaryAdapter.html"
    },
    {
        "name": "HierarchyBoundsAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/HierarchyBoundsAdapter.html"
    },
    {
        "name": "HierarchyBoundsListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/HierarchyBoundsListener.html"
    },
    {
        "name": "HierarchyEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/HierarchyEvent.html"
    },
    {
        "name": "HierarchyListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/HierarchyListener.html"
    },
    {
        "name": "Highlighter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Highlighter.html"
    },
    {
        "name": "Highlighter.Highlight",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Highlighter.Highlight.html"
    },
    {
        "name": "Highlighter.HighlightPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Highlighter.HighlightPainter.html"
    },
    {
        "name": "HijrahChronology",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/HijrahChronology.html"
    },
    {
        "name": "HijrahDate",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/HijrahDate.html"
    },
    {
        "name": "HijrahEra",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/HijrahEra.html"
    },
    {
        "name": "HMACParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/HMACParameterSpec.html"
    },
    {
        "name": "Holder",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Holder.html"
    },
    {
        "name": "HOLDING",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/HOLDING.html"
    },
    {
        "name": "HostnameVerifier",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/HostnameVerifier.html"
    },
    {
        "name": "HTML",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTML.html"
    },
    {
        "name": "HTML.Attribute",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTML.Attribute.html"
    },
    {
        "name": "HTML.Tag",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTML.Tag.html"
    },
    {
        "name": "HTML.UnknownTag",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTML.UnknownTag.html"
    },
    {
        "name": "HTMLDocument",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLDocument.html"
    },
    {
        "name": "HTMLDocument.Iterator",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLDocument.Iterator.html"
    },
    {
        "name": "HTMLEditorKit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.html"
    },
    {
        "name": "HTMLEditorKit.HTMLFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.HTMLFactory.html"
    },
    {
        "name": "HTMLEditorKit.HTMLTextAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.HTMLTextAction.html"
    },
    {
        "name": "HTMLEditorKit.InsertHTMLTextAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.InsertHTMLTextAction.html"
    },
    {
        "name": "HTMLEditorKit.LinkController",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.LinkController.html"
    },
    {
        "name": "HTMLEditorKit.Parser",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.Parser.html"
    },
    {
        "name": "HTMLEditorKit.ParserCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLEditorKit.ParserCallback.html"
    },
    {
        "name": "HTMLFrameHyperlinkEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLFrameHyperlinkEvent.html"
    },
    {
        "name": "HTMLWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/HTMLWriter.html"
    },
    {
        "name": "HTTPBinding",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/http/HTTPBinding.html"
    },
    {
        "name": "HttpContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/http/HttpContext.html"
    },
    {
        "name": "HttpCookie",
        "constructors": [],
        "methods": [],
        "href": "java/net/HttpCookie.html"
    },
    {
        "name": "HTTPException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/http/HTTPException.html"
    },
    {
        "name": "HttpExchange",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/http/HttpExchange.html"
    },
    {
        "name": "HttpHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/http/HttpHandler.html"
    },
    {
        "name": "HttpRetryException",
        "constructors": [],
        "methods": [],
        "href": "java/net/HttpRetryException.html"
    },
    {
        "name": "HttpsURLConnection",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/HttpsURLConnection.html"
    },
    {
        "name": "HttpURLConnection",
        "constructors": [],
        "methods": [],
        "href": "java/net/HttpURLConnection.html"
    },
    {
        "name": "HyperlinkEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/HyperlinkEvent.html"
    },
    {
        "name": "HyperlinkEvent.EventType",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/HyperlinkEvent.EventType.html"
    },
    {
        "name": "HyperlinkListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/HyperlinkListener.html"
    },
    {
        "name": "ICC_ColorSpace",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/ICC_ColorSpace.html"
    },
    {
        "name": "ICC_Profile",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/ICC_Profile.html"
    },
    {
        "name": "ICC_ProfileGray",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/ICC_ProfileGray.html"
    },
    {
        "name": "ICC_ProfileRGB",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/ICC_ProfileRGB.html"
    },
    {
        "name": "Icon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Icon.html"
    },
    {
        "name": "IconUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/IconUIResource.html"
    },
    {
        "name": "IconView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/IconView.html"
    },
    {
        "name": "ID_ASSIGNMENT_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ID_ASSIGNMENT_POLICY_ID.html"
    },
    {
        "name": "ID_UNIQUENESS_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ID_UNIQUENESS_POLICY_ID.html"
    },
    {
        "name": "IdAssignmentPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IdAssignmentPolicy.html"
    },
    {
        "name": "IdAssignmentPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IdAssignmentPolicyOperations.html"
    },
    {
        "name": "IdAssignmentPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IdAssignmentPolicyValue.html"
    },
    {
        "name": "IdentifierHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IdentifierHelper.html"
    },
    {
        "name": "Identity",
        "constructors": [],
        "methods": [],
        "href": "java/security/Identity.html"
    },
    {
        "name": "IdentityHashMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/IdentityHashMap.html"
    },
    {
        "name": "IdentityScope",
        "constructors": [],
        "methods": [],
        "href": "java/security/IdentityScope.html"
    },
    {
        "name": "IDLEntity",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/IDLEntity.html"
    },
    {
        "name": "IDLType",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IDLType.html"
    },
    {
        "name": "IDLTypeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IDLTypeHelper.html"
    },
    {
        "name": "IDLTypeOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IDLTypeOperations.html"
    },
    {
        "name": "IDN",
        "constructors": [],
        "methods": [],
        "href": "java/net/IDN.html"
    },
    {
        "name": "IdUniquenessPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IdUniquenessPolicy.html"
    },
    {
        "name": "IdUniquenessPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IdUniquenessPolicyOperations.html"
    },
    {
        "name": "IdUniquenessPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IdUniquenessPolicyValue.html"
    },
    {
        "name": "IIOByteBuffer",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/IIOByteBuffer.html"
    },
    {
        "name": "IIOException",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/IIOException.html"
    },
    {
        "name": "IIOImage",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/IIOImage.html"
    },
    {
        "name": "IIOInvalidTreeException",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/metadata/IIOInvalidTreeException.html"
    },
    {
        "name": "IIOMetadata",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/metadata/IIOMetadata.html"
    },
    {
        "name": "IIOMetadataController",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/metadata/IIOMetadataController.html"
    },
    {
        "name": "IIOMetadataFormat",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/metadata/IIOMetadataFormat.html"
    },
    {
        "name": "IIOMetadataFormatImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/metadata/IIOMetadataFormatImpl.html"
    },
    {
        "name": "IIOMetadataNode",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/metadata/IIOMetadataNode.html"
    },
    {
        "name": "IIOParam",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/IIOParam.html"
    },
    {
        "name": "IIOParamController",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/IIOParamController.html"
    },
    {
        "name": "IIOReadProgressListener",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/event/IIOReadProgressListener.html"
    },
    {
        "name": "IIOReadUpdateListener",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/event/IIOReadUpdateListener.html"
    },
    {
        "name": "IIOReadWarningListener",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/event/IIOReadWarningListener.html"
    },
    {
        "name": "IIORegistry",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/IIORegistry.html"
    },
    {
        "name": "IIOServiceProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/IIOServiceProvider.html"
    },
    {
        "name": "IIOWriteProgressListener",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/event/IIOWriteProgressListener.html"
    },
    {
        "name": "IIOWriteWarningListener",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/event/IIOWriteWarningListener.html"
    },
    {
        "name": "IllegalAccessError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IllegalAccessError.html"
    },
    {
        "name": "IllegalAccessException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IllegalAccessException.html"
    },
    {
        "name": "IllegalArgumentException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IllegalArgumentException.html"
    },
    {
        "name": "IllegalBlockingModeException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/IllegalBlockingModeException.html"
    },
    {
        "name": "IllegalBlockSizeException",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/IllegalBlockSizeException.html"
    },
    {
        "name": "IllegalChannelGroupException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/IllegalChannelGroupException.html"
    },
    {
        "name": "IllegalCharsetNameException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/IllegalCharsetNameException.html"
    },
    {
        "name": "IllegalClassFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/instrument/IllegalClassFormatException.html"
    },
    {
        "name": "IllegalComponentStateException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/IllegalComponentStateException.html"
    },
    {
        "name": "IllegalFormatCodePointException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllegalFormatCodePointException.html"
    },
    {
        "name": "IllegalFormatConversionException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllegalFormatConversionException.html"
    },
    {
        "name": "IllegalFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllegalFormatException.html"
    },
    {
        "name": "IllegalFormatFlagsException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllegalFormatFlagsException.html"
    },
    {
        "name": "IllegalFormatPrecisionException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllegalFormatPrecisionException.html"
    },
    {
        "name": "IllegalFormatWidthException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllegalFormatWidthException.html"
    },
    {
        "name": "IllegalMonitorStateException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IllegalMonitorStateException.html"
    },
    {
        "name": "IllegalPathStateException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/IllegalPathStateException.html"
    },
    {
        "name": "IllegalSelectorException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/IllegalSelectorException.html"
    },
    {
        "name": "IllegalStateException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IllegalStateException.html"
    },
    {
        "name": "IllegalThreadStateException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IllegalThreadStateException.html"
    },
    {
        "name": "IllformedLocaleException",
        "constructors": [],
        "methods": [],
        "href": "java/util/IllformedLocaleException.html"
    },
    {
        "name": "Image",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Image.html"
    },
    {
        "name": "ImageCapabilities",
        "constructors": [],
        "methods": [],
        "href": "java/awt/ImageCapabilities.html"
    },
    {
        "name": "ImageConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ImageConsumer.html"
    },
    {
        "name": "ImageFilter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ImageFilter.html"
    },
    {
        "name": "ImageGraphicAttribute",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/ImageGraphicAttribute.html"
    },
    {
        "name": "ImageIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ImageIcon.html"
    },
    {
        "name": "ImageInputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/ImageInputStream.html"
    },
    {
        "name": "ImageInputStreamImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/ImageInputStreamImpl.html"
    },
    {
        "name": "ImageInputStreamSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ImageInputStreamSpi.html"
    },
    {
        "name": "ImageIO",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageIO.html"
    },
    {
        "name": "ImageObserver",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ImageObserver.html"
    },
    {
        "name": "ImageOutputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/ImageOutputStream.html"
    },
    {
        "name": "ImageOutputStreamImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/ImageOutputStreamImpl.html"
    },
    {
        "name": "ImageOutputStreamSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ImageOutputStreamSpi.html"
    },
    {
        "name": "ImageProducer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ImageProducer.html"
    },
    {
        "name": "ImageReader",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageReader.html"
    },
    {
        "name": "ImageReaderSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ImageReaderSpi.html"
    },
    {
        "name": "ImageReaderWriterSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ImageReaderWriterSpi.html"
    },
    {
        "name": "ImageReadParam",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageReadParam.html"
    },
    {
        "name": "ImageTranscoder",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageTranscoder.html"
    },
    {
        "name": "ImageTranscoderSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ImageTranscoderSpi.html"
    },
    {
        "name": "ImageTypeSpecifier",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageTypeSpecifier.html"
    },
    {
        "name": "ImageView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/ImageView.html"
    },
    {
        "name": "ImageWriteParam",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageWriteParam.html"
    },
    {
        "name": "ImageWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/ImageWriter.html"
    },
    {
        "name": "ImageWriterSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ImageWriterSpi.html"
    },
    {
        "name": "ImagingOpException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ImagingOpException.html"
    },
    {
        "name": "ImmutableDescriptor",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ImmutableDescriptor.html"
    },
    {
        "name": "IMP_LIMIT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IMP_LIMIT.html"
    },
    {
        "name": "IMPLICIT_ACTIVATION_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/IMPLICIT_ACTIVATION_POLICY_ID.html"
    },
    {
        "name": "ImplicitActivationPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ImplicitActivationPolicy.html"
    },
    {
        "name": "ImplicitActivationPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ImplicitActivationPolicyOperations.html"
    },
    {
        "name": "ImplicitActivationPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ImplicitActivationPolicyValue.html"
    },
    {
        "name": "INACTIVE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/INACTIVE.html"
    },
    {
        "name": "IncompatibleClassChangeError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IncompatibleClassChangeError.html"
    },
    {
        "name": "IncompleteAnnotationException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/IncompleteAnnotationException.html"
    },
    {
        "name": "InconsistentTypeCode",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ORBPackage/InconsistentTypeCode.html"
    },
    {
        "name": "InconsistentTypeCode",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyFactoryPackage/InconsistentTypeCode.html"
    },
    {
        "name": "InconsistentTypeCodeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyFactoryPackage/InconsistentTypeCodeHelper.html"
    },
    {
        "name": "IndexColorModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/IndexColorModel.html"
    },
    {
        "name": "IndexedPropertyChangeEvent",
        "constructors": [],
        "methods": [],
        "href": "java/beans/IndexedPropertyChangeEvent.html"
    },
    {
        "name": "IndexedPropertyDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/IndexedPropertyDescriptor.html"
    },
    {
        "name": "IndexOutOfBoundsException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/IndexOutOfBoundsException.html"
    },
    {
        "name": "IndirectionException",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/IndirectionException.html"
    },
    {
        "name": "Inet4Address",
        "constructors": [],
        "methods": [],
        "href": "java/net/Inet4Address.html"
    },
    {
        "name": "Inet6Address",
        "constructors": [],
        "methods": [],
        "href": "java/net/Inet6Address.html"
    },
    {
        "name": "InetAddress",
        "constructors": [],
        "methods": [],
        "href": "java/net/InetAddress.html"
    },
    {
        "name": "InetSocketAddress",
        "constructors": [],
        "methods": [],
        "href": "java/net/InetSocketAddress.html"
    },
    {
        "name": "Inflater",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/Inflater.html"
    },
    {
        "name": "InflaterInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/InflaterInputStream.html"
    },
    {
        "name": "InflaterOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/InflaterOutputStream.html"
    },
    {
        "name": "InheritableThreadLocal",
        "constructors": [],
        "methods": [],
        "href": "java/lang/InheritableThreadLocal.html"
    },
    {
        "name": "Inherited",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/Inherited.html"
    },
    {
        "name": "InitialContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/InitialContext.html"
    },
    {
        "name": "InitialContextFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/InitialContextFactory.html"
    },
    {
        "name": "InitialContextFactoryBuilder",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/InitialContextFactoryBuilder.html"
    },
    {
        "name": "InitialDirContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/InitialDirContext.html"
    },
    {
        "name": "INITIALIZE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INITIALIZE.html"
    },
    {
        "name": "InitialLdapContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/InitialLdapContext.html"
    },
    {
        "name": "InitParam",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/InitParam.html"
    },
    {
        "name": "InlineView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/InlineView.html"
    },
    {
        "name": "InputContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/InputContext.html"
    },
    {
        "name": "InputEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/InputEvent.html"
    },
    {
        "name": "InputMap",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/InputMap.html"
    },
    {
        "name": "InputMapUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/InputMapUIResource.html"
    },
    {
        "name": "InputMethod",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/spi/InputMethod.html"
    },
    {
        "name": "InputMethodContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/spi/InputMethodContext.html"
    },
    {
        "name": "InputMethodDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/spi/InputMethodDescriptor.html"
    },
    {
        "name": "InputMethodEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/InputMethodEvent.html"
    },
    {
        "name": "InputMethodHighlight",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/InputMethodHighlight.html"
    },
    {
        "name": "InputMethodListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/InputMethodListener.html"
    },
    {
        "name": "InputMethodRequests",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/InputMethodRequests.html"
    },
    {
        "name": "InputMismatchException",
        "constructors": [],
        "methods": [],
        "href": "java/util/InputMismatchException.html"
    },
    {
        "name": "InputSource",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/InputSource.html"
    },
    {
        "name": "InputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/InputStream.html"
    },
    {
        "name": "InputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/InputStream.html"
    },
    {
        "name": "InputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA_2_3/portable/InputStream.html"
    },
    {
        "name": "InputStreamReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/InputStreamReader.html"
    },
    {
        "name": "InputSubset",
        "constructors": [],
        "methods": [],
        "href": "java/awt/im/InputSubset.html"
    },
    {
        "name": "InputVerifier",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/InputVerifier.html"
    },
    {
        "name": "Insets",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Insets.html"
    },
    {
        "name": "InsetsUIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/InsetsUIResource.html"
    },
    {
        "name": "InstanceAlreadyExistsException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/InstanceAlreadyExistsException.html"
    },
    {
        "name": "InstanceNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/InstanceNotFoundException.html"
    },
    {
        "name": "Instant",
        "constructors": [],
        "methods": [],
        "href": "java/time/Instant.html"
    },
    {
        "name": "InstantiationError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/InstantiationError.html"
    },
    {
        "name": "InstantiationException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/InstantiationException.html"
    },
    {
        "name": "Instrument",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Instrument.html"
    },
    {
        "name": "Instrumentation",
        "constructors": [],
        "methods": [],
        "href": "java/lang/instrument/Instrumentation.html"
    },
    {
        "name": "InsufficientResourcesException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/InsufficientResourcesException.html"
    },
    {
        "name": "IntBinaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntBinaryOperator.html"
    },
    {
        "name": "IntBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/IntBuffer.html"
    },
    {
        "name": "IntConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntConsumer.html"
    },
    {
        "name": "Integer",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Integer.html"
    },
    {
        "name": "IntegerSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/IntegerSyntax.html"
    },
    {
        "name": "Interceptor",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/Interceptor.html"
    },
    {
        "name": "InterceptorOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/InterceptorOperations.html"
    },
    {
        "name": "InterfaceAddress",
        "constructors": [],
        "methods": [],
        "href": "java/net/InterfaceAddress.html"
    },
    {
        "name": "INTERNAL",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INTERNAL.html"
    },
    {
        "name": "InternalError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/InternalError.html"
    },
    {
        "name": "InternalFrameAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/InternalFrameAdapter.html"
    },
    {
        "name": "InternalFrameEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/InternalFrameEvent.html"
    },
    {
        "name": "InternalFrameFocusTraversalPolicy",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/InternalFrameFocusTraversalPolicy.html"
    },
    {
        "name": "InternalFrameListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/InternalFrameListener.html"
    },
    {
        "name": "InternalFrameUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/InternalFrameUI.html"
    },
    {
        "name": "InternationalFormatter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/InternationalFormatter.html"
    },
    {
        "name": "InterruptedByTimeoutException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/InterruptedByTimeoutException.html"
    },
    {
        "name": "InterruptedException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/InterruptedException.html"
    },
    {
        "name": "InterruptedIOException",
        "constructors": [],
        "methods": [],
        "href": "java/io/InterruptedIOException.html"
    },
    {
        "name": "InterruptedNamingException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/InterruptedNamingException.html"
    },
    {
        "name": "InterruptibleChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/InterruptibleChannel.html"
    },
    {
        "name": "IntersectionType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/IntersectionType.html"
    },
    {
        "name": "INTF_REPOS",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INTF_REPOS.html"
    },
    {
        "name": "IntFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntFunction.html"
    },
    {
        "name": "IntHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IntHolder.html"
    },
    {
        "name": "IntPredicate",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntPredicate.html"
    },
    {
        "name": "IntrospectionException",
        "constructors": [],
        "methods": [],
        "href": "java/beans/IntrospectionException.html"
    },
    {
        "name": "IntrospectionException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/IntrospectionException.html"
    },
    {
        "name": "Introspector",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Introspector.html"
    },
    {
        "name": "IntStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/IntStream.html"
    },
    {
        "name": "IntStream.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/IntStream.Builder.html"
    },
    {
        "name": "IntSummaryStatistics",
        "constructors": [],
        "methods": [],
        "href": "java/util/IntSummaryStatistics.html"
    },
    {
        "name": "IntSupplier",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntSupplier.html"
    },
    {
        "name": "IntToDoubleFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntToDoubleFunction.html"
    },
    {
        "name": "IntToLongFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntToLongFunction.html"
    },
    {
        "name": "IntUnaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/IntUnaryOperator.html"
    },
    {
        "name": "INV_FLAG",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INV_FLAG.html"
    },
    {
        "name": "INV_IDENT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INV_IDENT.html"
    },
    {
        "name": "INV_OBJREF",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INV_OBJREF.html"
    },
    {
        "name": "INV_POLICY",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INV_POLICY.html"
    },
    {
        "name": "Invalid",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynAnyPackage/Invalid.html"
    },
    {
        "name": "INVALID_ACTIVITY",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INVALID_ACTIVITY.html"
    },
    {
        "name": "INVALID_TRANSACTION",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/INVALID_TRANSACTION.html"
    },
    {
        "name": "InvalidActivityException",
        "constructors": [],
        "methods": [],
        "href": "javax/activity/InvalidActivityException.html"
    },
    {
        "name": "InvalidAddress",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtPackage/InvalidAddress.html"
    },
    {
        "name": "InvalidAddressHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtPackage/InvalidAddressHelper.html"
    },
    {
        "name": "InvalidAddressHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtPackage/InvalidAddressHolder.html"
    },
    {
        "name": "InvalidAlgorithmParameterException",
        "constructors": [],
        "methods": [],
        "href": "java/security/InvalidAlgorithmParameterException.html"
    },
    {
        "name": "InvalidApplicationException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/InvalidApplicationException.html"
    },
    {
        "name": "InvalidAttributeIdentifierException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/InvalidAttributeIdentifierException.html"
    },
    {
        "name": "InvalidAttributesException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/InvalidAttributesException.html"
    },
    {
        "name": "InvalidAttributeValueException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/InvalidAttributeValueException.html"
    },
    {
        "name": "InvalidAttributeValueException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/InvalidAttributeValueException.html"
    },
    {
        "name": "InvalidClassException",
        "constructors": [],
        "methods": [],
        "href": "java/io/InvalidClassException.html"
    },
    {
        "name": "InvalidDnDOperationException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/InvalidDnDOperationException.html"
    },
    {
        "name": "InvalidKeyException",
        "constructors": [],
        "methods": [],
        "href": "java/security/InvalidKeyException.html"
    },
    {
        "name": "InvalidKeyException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/InvalidKeyException.html"
    },
    {
        "name": "InvalidKeySpecException",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/InvalidKeySpecException.html"
    },
    {
        "name": "InvalidMarkException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/InvalidMarkException.html"
    },
    {
        "name": "InvalidMidiDataException",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/InvalidMidiDataException.html"
    },
    {
        "name": "InvalidName",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ORBPackage/InvalidName.html"
    },
    {
        "name": "InvalidName",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/InvalidName.html"
    },
    {
        "name": "InvalidName",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfoPackage/InvalidName.html"
    },
    {
        "name": "InvalidNameException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/InvalidNameException.html"
    },
    {
        "name": "InvalidNameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/InvalidNameHelper.html"
    },
    {
        "name": "InvalidNameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfoPackage/InvalidNameHelper.html"
    },
    {
        "name": "InvalidNameHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/InvalidNameHolder.html"
    },
    {
        "name": "InvalidObjectException",
        "constructors": [],
        "methods": [],
        "href": "java/io/InvalidObjectException.html"
    },
    {
        "name": "InvalidOpenTypeException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/InvalidOpenTypeException.html"
    },
    {
        "name": "InvalidParameterException",
        "constructors": [],
        "methods": [],
        "href": "java/security/InvalidParameterException.html"
    },
    {
        "name": "InvalidParameterSpecException",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/InvalidParameterSpecException.html"
    },
    {
        "name": "InvalidPathException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/InvalidPathException.html"
    },
    {
        "name": "InvalidPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/InvalidPolicy.html"
    },
    {
        "name": "InvalidPolicyHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/InvalidPolicyHelper.html"
    },
    {
        "name": "InvalidPreferencesFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/InvalidPreferencesFormatException.html"
    },
    {
        "name": "InvalidPropertiesFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/util/InvalidPropertiesFormatException.html"
    },
    {
        "name": "InvalidRelationIdException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/InvalidRelationIdException.html"
    },
    {
        "name": "InvalidRelationServiceException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/InvalidRelationServiceException.html"
    },
    {
        "name": "InvalidRelationTypeException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/InvalidRelationTypeException.html"
    },
    {
        "name": "InvalidRoleInfoException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/InvalidRoleInfoException.html"
    },
    {
        "name": "InvalidRoleValueException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/InvalidRoleValueException.html"
    },
    {
        "name": "InvalidSearchControlsException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/InvalidSearchControlsException.html"
    },
    {
        "name": "InvalidSearchFilterException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/InvalidSearchFilterException.html"
    },
    {
        "name": "InvalidSeq",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynAnyPackage/InvalidSeq.html"
    },
    {
        "name": "InvalidSlot",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/InvalidSlot.html"
    },
    {
        "name": "InvalidSlotHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/InvalidSlotHelper.html"
    },
    {
        "name": "InvalidTargetObjectTypeException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/InvalidTargetObjectTypeException.html"
    },
    {
        "name": "InvalidTransactionException",
        "constructors": [],
        "methods": [],
        "href": "javax/transaction/InvalidTransactionException.html"
    },
    {
        "name": "InvalidTypeForEncoding",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecPackage/InvalidTypeForEncoding.html"
    },
    {
        "name": "InvalidTypeForEncodingHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecPackage/InvalidTypeForEncodingHelper.html"
    },
    {
        "name": "InvalidValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynAnyPackage/InvalidValue.html"
    },
    {
        "name": "InvalidValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyPackage/InvalidValue.html"
    },
    {
        "name": "InvalidValueHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyPackage/InvalidValueHelper.html"
    },
    {
        "name": "Invocable",
        "constructors": [],
        "methods": [],
        "href": "javax/script/Invocable.html"
    },
    {
        "name": "InvocationEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/InvocationEvent.html"
    },
    {
        "name": "InvocationHandler",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/InvocationHandler.html"
    },
    {
        "name": "InvocationTargetException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/InvocationTargetException.html"
    },
    {
        "name": "InvokeHandler",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/InvokeHandler.html"
    },
    {
        "name": "Invoker",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/Invoker.html"
    },
    {
        "name": "IOError",
        "constructors": [],
        "methods": [],
        "href": "java/io/IOError.html"
    },
    {
        "name": "IOException",
        "constructors": [],
        "methods": [],
        "href": "java/io/IOException.html"
    },
    {
        "name": "IOR",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/IOR.html"
    },
    {
        "name": "IORHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/IORHelper.html"
    },
    {
        "name": "IORHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/IORHolder.html"
    },
    {
        "name": "IORInfo",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInfo.html"
    },
    {
        "name": "IORInfoOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInfoOperations.html"
    },
    {
        "name": "IORInterceptor",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInterceptor.html"
    },
    {
        "name": "IORInterceptor_3_0",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInterceptor_3_0.html"
    },
    {
        "name": "IORInterceptor_3_0Helper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInterceptor_3_0Helper.html"
    },
    {
        "name": "IORInterceptor_3_0Holder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInterceptor_3_0Holder.html"
    },
    {
        "name": "IORInterceptor_3_0Operations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInterceptor_3_0Operations.html"
    },
    {
        "name": "IORInterceptorOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/IORInterceptorOperations.html"
    },
    {
        "name": "IRObject",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IRObject.html"
    },
    {
        "name": "IRObjectOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/IRObjectOperations.html"
    },
    {
        "name": "IsoChronology",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/IsoChronology.html"
    },
    {
        "name": "IsoEra",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/IsoEra.html"
    },
    {
        "name": "IsoFields",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/IsoFields.html"
    },
    {
        "name": "IstringHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/IstringHelper.html"
    },
    {
        "name": "ItemEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ItemEvent.html"
    },
    {
        "name": "ItemListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/ItemListener.html"
    },
    {
        "name": "ItemSelectable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/ItemSelectable.html"
    },
    {
        "name": "Iterable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Iterable.html"
    },
    {
        "name": "Iterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Iterator.html"
    },
    {
        "name": "IvParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/IvParameterSpec.html"
    },
    {
        "name": "JapaneseChronology",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/JapaneseChronology.html"
    },
    {
        "name": "JapaneseDate",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/JapaneseDate.html"
    },
    {
        "name": "JapaneseEra",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/JapaneseEra.html"
    },
    {
        "name": "JApplet",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JApplet.html"
    },
    {
        "name": "JarEntry",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/JarEntry.html"
    },
    {
        "name": "JarException",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/JarException.html"
    },
    {
        "name": "JarFile",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/JarFile.html"
    },
    {
        "name": "JarInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/JarInputStream.html"
    },
    {
        "name": "JarOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/JarOutputStream.html"
    },
    {
        "name": "JarURLConnection",
        "constructors": [],
        "methods": [],
        "href": "java/net/JarURLConnection.html"
    },
    {
        "name": "JavaCompiler",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/JavaCompiler.html"
    },
    {
        "name": "JavaCompiler.CompilationTask",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/JavaCompiler.CompilationTask.html"
    },
    {
        "name": "JavaFileManager",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/JavaFileManager.html"
    },
    {
        "name": "JavaFileManager.Location",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/JavaFileManager.Location.html"
    },
    {
        "name": "JavaFileObject",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/JavaFileObject.html"
    },
    {
        "name": "JavaFileObject.Kind",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/JavaFileObject.Kind.html"
    },
    {
        "name": "JAXB",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXB.html"
    },
    {
        "name": "JAXBContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXBContext.html"
    },
    {
        "name": "JAXBElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXBElement.html"
    },
    {
        "name": "JAXBElement.GlobalScope",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXBElement.GlobalScope.html"
    },
    {
        "name": "JAXBException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXBException.html"
    },
    {
        "name": "JAXBIntrospector",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXBIntrospector.html"
    },
    {
        "name": "JAXBPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/JAXBPermission.html"
    },
    {
        "name": "JAXBResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/util/JAXBResult.html"
    },
    {
        "name": "JAXBSource",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/util/JAXBSource.html"
    },
    {
        "name": "JButton",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JButton.html"
    },
    {
        "name": "JCheckBox",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JCheckBox.html"
    },
    {
        "name": "JCheckBoxMenuItem",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JCheckBoxMenuItem.html"
    },
    {
        "name": "JColorChooser",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JColorChooser.html"
    },
    {
        "name": "JComboBox",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JComboBox.html"
    },
    {
        "name": "JComboBox.KeySelectionManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JComboBox.KeySelectionManager.html"
    },
    {
        "name": "JComponent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JComponent.html"
    },
    {
        "name": "JdbcRowSet",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/JdbcRowSet.html"
    },
    {
        "name": "JDBCType",
        "constructors": [],
        "methods": [],
        "href": "java/sql/JDBCType.html"
    },
    {
        "name": "JDesktopPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JDesktopPane.html"
    },
    {
        "name": "JDialog",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JDialog.html"
    },
    {
        "name": "JEditorPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JEditorPane.html"
    },
    {
        "name": "JFileChooser",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JFileChooser.html"
    },
    {
        "name": "JFormattedTextField",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JFormattedTextField.html"
    },
    {
        "name": "JFormattedTextField.AbstractFormatter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JFormattedTextField.AbstractFormatter.html"
    },
    {
        "name": "JFormattedTextField.AbstractFormatterFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JFormattedTextField.AbstractFormatterFactory.html"
    },
    {
        "name": "JFrame",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JFrame.html"
    },
    {
        "name": "JInternalFrame",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JInternalFrame.html"
    },
    {
        "name": "JInternalFrame.JDesktopIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JInternalFrame.JDesktopIcon.html"
    },
    {
        "name": "JLabel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JLabel.html"
    },
    {
        "name": "JLayer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JLayer.html"
    },
    {
        "name": "JLayeredPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JLayeredPane.html"
    },
    {
        "name": "JList",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JList.html"
    },
    {
        "name": "JList.DropLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JList.DropLocation.html"
    },
    {
        "name": "JMenu",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JMenu.html"
    },
    {
        "name": "JMenuBar",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JMenuBar.html"
    },
    {
        "name": "JMenuItem",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JMenuItem.html"
    },
    {
        "name": "JMException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/JMException.html"
    },
    {
        "name": "JMRuntimeException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/JMRuntimeException.html"
    },
    {
        "name": "JMX",
        "constructors": [],
        "methods": [],
        "href": "javax/management/JMX.html"
    },
    {
        "name": "JMXAddressable",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXAddressable.html"
    },
    {
        "name": "JMXAuthenticator",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXAuthenticator.html"
    },
    {
        "name": "JMXConnectionNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectionNotification.html"
    },
    {
        "name": "JMXConnector",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnector.html"
    },
    {
        "name": "JMXConnectorFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectorFactory.html"
    },
    {
        "name": "JMXConnectorProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectorProvider.html"
    },
    {
        "name": "JMXConnectorServer",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectorServer.html"
    },
    {
        "name": "JMXConnectorServerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectorServerFactory.html"
    },
    {
        "name": "JMXConnectorServerMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectorServerMBean.html"
    },
    {
        "name": "JMXConnectorServerProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXConnectorServerProvider.html"
    },
    {
        "name": "JMXPrincipal",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXPrincipal.html"
    },
    {
        "name": "JMXProviderException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXProviderException.html"
    },
    {
        "name": "JMXServerErrorException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXServerErrorException.html"
    },
    {
        "name": "JMXServiceURL",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/JMXServiceURL.html"
    },
    {
        "name": "JobAttributes",
        "constructors": [],
        "methods": [],
        "href": "java/awt/JobAttributes.html"
    },
    {
        "name": "JobAttributes.DefaultSelectionType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/JobAttributes.DefaultSelectionType.html"
    },
    {
        "name": "JobAttributes.DestinationType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/JobAttributes.DestinationType.html"
    },
    {
        "name": "JobAttributes.DialogType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/JobAttributes.DialogType.html"
    },
    {
        "name": "JobAttributes.MultipleDocumentHandlingType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/JobAttributes.MultipleDocumentHandlingType.html"
    },
    {
        "name": "JobAttributes.SidesType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/JobAttributes.SidesType.html"
    },
    {
        "name": "JobHoldUntil",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobHoldUntil.html"
    },
    {
        "name": "JobImpressions",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobImpressions.html"
    },
    {
        "name": "JobImpressionsCompleted",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobImpressionsCompleted.html"
    },
    {
        "name": "JobImpressionsSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobImpressionsSupported.html"
    },
    {
        "name": "JobKOctets",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobKOctets.html"
    },
    {
        "name": "JobKOctetsProcessed",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobKOctetsProcessed.html"
    },
    {
        "name": "JobKOctetsSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobKOctetsSupported.html"
    },
    {
        "name": "JobMediaSheets",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobMediaSheets.html"
    },
    {
        "name": "JobMediaSheetsCompleted",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobMediaSheetsCompleted.html"
    },
    {
        "name": "JobMediaSheetsSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobMediaSheetsSupported.html"
    },
    {
        "name": "JobMessageFromOperator",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobMessageFromOperator.html"
    },
    {
        "name": "JobName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobName.html"
    },
    {
        "name": "JobOriginatingUserName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobOriginatingUserName.html"
    },
    {
        "name": "JobPriority",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobPriority.html"
    },
    {
        "name": "JobPrioritySupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobPrioritySupported.html"
    },
    {
        "name": "JobSheets",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobSheets.html"
    },
    {
        "name": "JobState",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobState.html"
    },
    {
        "name": "JobStateReason",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobStateReason.html"
    },
    {
        "name": "JobStateReasons",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/JobStateReasons.html"
    },
    {
        "name": "Joinable",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/Joinable.html"
    },
    {
        "name": "JoinRowSet",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/JoinRowSet.html"
    },
    {
        "name": "JOptionPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JOptionPane.html"
    },
    {
        "name": "JPanel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JPanel.html"
    },
    {
        "name": "JPasswordField",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JPasswordField.html"
    },
    {
        "name": "JPEGHuffmanTable",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/plugins/jpeg/JPEGHuffmanTable.html"
    },
    {
        "name": "JPEGImageReadParam",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/plugins/jpeg/JPEGImageReadParam.html"
    },
    {
        "name": "JPEGImageWriteParam",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/plugins/jpeg/JPEGImageWriteParam.html"
    },
    {
        "name": "JPEGQTable",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/plugins/jpeg/JPEGQTable.html"
    },
    {
        "name": "JPopupMenu",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JPopupMenu.html"
    },
    {
        "name": "JPopupMenu.Separator",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JPopupMenu.Separator.html"
    },
    {
        "name": "JProgressBar",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JProgressBar.html"
    },
    {
        "name": "JRadioButton",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JRadioButton.html"
    },
    {
        "name": "JRadioButtonMenuItem",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JRadioButtonMenuItem.html"
    },
    {
        "name": "JRootPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JRootPane.html"
    },
    {
        "name": "JScrollBar",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JScrollBar.html"
    },
    {
        "name": "JScrollPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JScrollPane.html"
    },
    {
        "name": "JSeparator",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSeparator.html"
    },
    {
        "name": "JSlider",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSlider.html"
    },
    {
        "name": "JSpinner",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSpinner.html"
    },
    {
        "name": "JSpinner.DateEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSpinner.DateEditor.html"
    },
    {
        "name": "JSpinner.DefaultEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSpinner.DefaultEditor.html"
    },
    {
        "name": "JSpinner.ListEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSpinner.ListEditor.html"
    },
    {
        "name": "JSpinner.NumberEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSpinner.NumberEditor.html"
    },
    {
        "name": "JSplitPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JSplitPane.html"
    },
    {
        "name": "JTabbedPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTabbedPane.html"
    },
    {
        "name": "JTable",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTable.html"
    },
    {
        "name": "JTable.DropLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTable.DropLocation.html"
    },
    {
        "name": "JTable.PrintMode",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTable.PrintMode.html"
    },
    {
        "name": "JTableHeader",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/JTableHeader.html"
    },
    {
        "name": "JTextArea",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTextArea.html"
    },
    {
        "name": "JTextComponent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/JTextComponent.html"
    },
    {
        "name": "JTextComponent.DropLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/JTextComponent.DropLocation.html"
    },
    {
        "name": "JTextComponent.KeyBinding",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/JTextComponent.KeyBinding.html"
    },
    {
        "name": "JTextField",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTextField.html"
    },
    {
        "name": "JTextPane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTextPane.html"
    },
    {
        "name": "JToggleButton",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JToggleButton.html"
    },
    {
        "name": "JToggleButton.ToggleButtonModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JToggleButton.ToggleButtonModel.html"
    },
    {
        "name": "JToolBar",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JToolBar.html"
    },
    {
        "name": "JToolBar.Separator",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JToolBar.Separator.html"
    },
    {
        "name": "JToolTip",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JToolTip.html"
    },
    {
        "name": "JTree",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTree.html"
    },
    {
        "name": "JTree.DropLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTree.DropLocation.html"
    },
    {
        "name": "JTree.DynamicUtilTreeNode",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTree.DynamicUtilTreeNode.html"
    },
    {
        "name": "JTree.EmptySelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JTree.EmptySelectionModel.html"
    },
    {
        "name": "JulianFields",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/JulianFields.html"
    },
    {
        "name": "JViewport",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JViewport.html"
    },
    {
        "name": "JWindow",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/JWindow.html"
    },
    {
        "name": "KerberosKey",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/kerberos/KerberosKey.html"
    },
    {
        "name": "KerberosPrincipal",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/kerberos/KerberosPrincipal.html"
    },
    {
        "name": "KerberosTicket",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/kerberos/KerberosTicket.html"
    },
    {
        "name": "Kernel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/Kernel.html"
    },
    {
        "name": "Key",
        "constructors": [],
        "methods": [],
        "href": "java/security/Key.html"
    },
    {
        "name": "KeyAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/KeyAdapter.html"
    },
    {
        "name": "KeyAgreement",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/KeyAgreement.html"
    },
    {
        "name": "KeyAgreementSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/KeyAgreementSpi.html"
    },
    {
        "name": "KeyAlreadyExistsException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/KeyAlreadyExistsException.html"
    },
    {
        "name": "KeyboardFocusManager",
        "constructors": [],
        "methods": [],
        "href": "java/awt/KeyboardFocusManager.html"
    },
    {
        "name": "KeyEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/KeyEvent.html"
    },
    {
        "name": "KeyEventDispatcher",
        "constructors": [],
        "methods": [],
        "href": "java/awt/KeyEventDispatcher.html"
    },
    {
        "name": "KeyEventPostProcessor",
        "constructors": [],
        "methods": [],
        "href": "java/awt/KeyEventPostProcessor.html"
    },
    {
        "name": "KeyException",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyException.html"
    },
    {
        "name": "KeyFactory",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyFactory.html"
    },
    {
        "name": "KeyFactorySpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyFactorySpi.html"
    },
    {
        "name": "KeyGenerator",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/KeyGenerator.html"
    },
    {
        "name": "KeyGeneratorSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/KeyGeneratorSpi.html"
    },
    {
        "name": "KeyInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/KeyInfo.html"
    },
    {
        "name": "KeyInfoFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/KeyInfoFactory.html"
    },
    {
        "name": "KeyListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/KeyListener.html"
    },
    {
        "name": "KeyManagementException",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyManagementException.html"
    },
    {
        "name": "KeyManager",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/KeyManager.html"
    },
    {
        "name": "KeyManagerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/KeyManagerFactory.html"
    },
    {
        "name": "KeyManagerFactorySpi",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/KeyManagerFactorySpi.html"
    },
    {
        "name": "Keymap",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Keymap.html"
    },
    {
        "name": "KeyName",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/KeyName.html"
    },
    {
        "name": "KeyPair",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyPair.html"
    },
    {
        "name": "KeyPairGenerator",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyPairGenerator.html"
    },
    {
        "name": "KeyPairGeneratorSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyPairGeneratorSpi.html"
    },
    {
        "name": "KeyRep",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyRep.html"
    },
    {
        "name": "KeyRep.Type",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyRep.Type.html"
    },
    {
        "name": "KeySelector",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/KeySelector.html"
    },
    {
        "name": "KeySelector.Purpose",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/KeySelector.Purpose.html"
    },
    {
        "name": "KeySelectorException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/KeySelectorException.html"
    },
    {
        "name": "KeySelectorResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/KeySelectorResult.html"
    },
    {
        "name": "KeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/KeySpec.html"
    },
    {
        "name": "KeyStore",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.html"
    },
    {
        "name": "KeyStore.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.Builder.html"
    },
    {
        "name": "KeyStore.CallbackHandlerProtection",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.CallbackHandlerProtection.html"
    },
    {
        "name": "KeyStore.Entry",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.Entry.html"
    },
    {
        "name": "KeyStore.Entry.Attribute",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.Entry.Attribute.html"
    },
    {
        "name": "KeyStore.LoadStoreParameter",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.LoadStoreParameter.html"
    },
    {
        "name": "KeyStore.PasswordProtection",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.PasswordProtection.html"
    },
    {
        "name": "KeyStore.PrivateKeyEntry",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.PrivateKeyEntry.html"
    },
    {
        "name": "KeyStore.ProtectionParameter",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.ProtectionParameter.html"
    },
    {
        "name": "KeyStore.SecretKeyEntry",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.SecretKeyEntry.html"
    },
    {
        "name": "KeyStore.TrustedCertificateEntry",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStore.TrustedCertificateEntry.html"
    },
    {
        "name": "KeyStoreBuilderParameters",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/KeyStoreBuilderParameters.html"
    },
    {
        "name": "KeyStoreException",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStoreException.html"
    },
    {
        "name": "KeyStoreSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/KeyStoreSpi.html"
    },
    {
        "name": "KeyStroke",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/KeyStroke.html"
    },
    {
        "name": "KeyTab",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/kerberos/KeyTab.html"
    },
    {
        "name": "KeyValue",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/KeyValue.html"
    },
    {
        "name": "Label",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Label.html"
    },
    {
        "name": "LabelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/LabelUI.html"
    },
    {
        "name": "LabelView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/LabelView.html"
    },
    {
        "name": "LambdaConversionException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/LambdaConversionException.html"
    },
    {
        "name": "LambdaMetafactory",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/LambdaMetafactory.html"
    },
    {
        "name": "LanguageCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/LanguageCallback.html"
    },
    {
        "name": "LastOwnerException",
        "constructors": [],
        "methods": [],
        "href": "java/security/acl/LastOwnerException.html"
    },
    {
        "name": "LayeredHighlighter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/LayeredHighlighter.html"
    },
    {
        "name": "LayeredHighlighter.LayerPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/LayeredHighlighter.LayerPainter.html"
    },
    {
        "name": "LayerUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/LayerUI.html"
    },
    {
        "name": "LayoutFocusTraversalPolicy",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/LayoutFocusTraversalPolicy.html"
    },
    {
        "name": "LayoutManager",
        "constructors": [],
        "methods": [],
        "href": "java/awt/LayoutManager.html"
    },
    {
        "name": "LayoutManager2",
        "constructors": [],
        "methods": [],
        "href": "java/awt/LayoutManager2.html"
    },
    {
        "name": "LayoutPath",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/LayoutPath.html"
    },
    {
        "name": "LayoutQueue",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/LayoutQueue.html"
    },
    {
        "name": "LayoutStyle",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/LayoutStyle.html"
    },
    {
        "name": "LayoutStyle.ComponentPlacement",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/LayoutStyle.ComponentPlacement.html"
    },
    {
        "name": "LDAPCertStoreParameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/LDAPCertStoreParameters.html"
    },
    {
        "name": "LdapContext",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/LdapContext.html"
    },
    {
        "name": "LdapName",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/LdapName.html"
    },
    {
        "name": "LdapReferralException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/LdapReferralException.html"
    },
    {
        "name": "Lease",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/dgc/Lease.html"
    },
    {
        "name": "Level",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/Level.html"
    },
    {
        "name": "LexicalHandler",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ext/LexicalHandler.html"
    },
    {
        "name": "LIFESPAN_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/LIFESPAN_POLICY_ID.html"
    },
    {
        "name": "LifespanPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/LifespanPolicy.html"
    },
    {
        "name": "LifespanPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/LifespanPolicyOperations.html"
    },
    {
        "name": "LifespanPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/LifespanPolicyValue.html"
    },
    {
        "name": "LimitExceededException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/LimitExceededException.html"
    },
    {
        "name": "Line",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Line.html"
    },
    {
        "name": "Line.Info",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Line.Info.html"
    },
    {
        "name": "Line2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Line2D.html"
    },
    {
        "name": "Line2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Line2D.Double.html"
    },
    {
        "name": "Line2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Line2D.Float.html"
    },
    {
        "name": "LinearGradientPaint",
        "constructors": [],
        "methods": [],
        "href": "java/awt/LinearGradientPaint.html"
    },
    {
        "name": "LineBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/LineBorder.html"
    },
    {
        "name": "LineBreakMeasurer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/LineBreakMeasurer.html"
    },
    {
        "name": "LineEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/LineEvent.html"
    },
    {
        "name": "LineEvent.Type",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/LineEvent.Type.html"
    },
    {
        "name": "LineListener",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/LineListener.html"
    },
    {
        "name": "LineMetrics",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/LineMetrics.html"
    },
    {
        "name": "LineNumberInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/LineNumberInputStream.html"
    },
    {
        "name": "LineNumberReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/LineNumberReader.html"
    },
    {
        "name": "LineUnavailableException",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/LineUnavailableException.html"
    },
    {
        "name": "LinkageError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/LinkageError.html"
    },
    {
        "name": "LinkedBlockingDeque",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/LinkedBlockingDeque.html"
    },
    {
        "name": "LinkedBlockingQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/LinkedBlockingQueue.html"
    },
    {
        "name": "LinkedHashMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/LinkedHashMap.html"
    },
    {
        "name": "LinkedHashSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/LinkedHashSet.html"
    },
    {
        "name": "LinkedList",
        "constructors": [],
        "methods": [],
        "href": "java/util/LinkedList.html"
    },
    {
        "name": "LinkedTransferQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/LinkedTransferQueue.html"
    },
    {
        "name": "LinkException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/LinkException.html"
    },
    {
        "name": "LinkLoopException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/LinkLoopException.html"
    },
    {
        "name": "LinkOption",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/LinkOption.html"
    },
    {
        "name": "LinkPermission",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/LinkPermission.html"
    },
    {
        "name": "LinkRef",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/LinkRef.html"
    },
    {
        "name": "List",
        "constructors": [],
        "methods": [],
        "href": "java/awt/List.html"
    },
    {
        "name": "List",
        "constructors": [],
        "methods": [],
        "href": "java/util/List.html"
    },
    {
        "name": "ListCellRenderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ListCellRenderer.html"
    },
    {
        "name": "ListDataEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/ListDataEvent.html"
    },
    {
        "name": "ListDataListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/ListDataListener.html"
    },
    {
        "name": "ListenerNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ListenerNotFoundException.html"
    },
    {
        "name": "ListIterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/ListIterator.html"
    },
    {
        "name": "ListModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ListModel.html"
    },
    {
        "name": "ListResourceBundle",
        "constructors": [],
        "methods": [],
        "href": "java/util/ListResourceBundle.html"
    },
    {
        "name": "ListSelectionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/ListSelectionEvent.html"
    },
    {
        "name": "ListSelectionListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/ListSelectionListener.html"
    },
    {
        "name": "ListSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ListSelectionModel.html"
    },
    {
        "name": "ListUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ListUI.html"
    },
    {
        "name": "ListView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/ListView.html"
    },
    {
        "name": "LoaderHandler",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/LoaderHandler.html"
    },
    {
        "name": "LocalDate",
        "constructors": [],
        "methods": [],
        "href": "java/time/LocalDate.html"
    },
    {
        "name": "LocalDateTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/LocalDateTime.html"
    },
    {
        "name": "Locale",
        "constructors": [],
        "methods": [],
        "href": "java/util/Locale.html"
    },
    {
        "name": "Locale.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/util/Locale.Builder.html"
    },
    {
        "name": "Locale.Category",
        "constructors": [],
        "methods": [],
        "href": "java/util/Locale.Category.html"
    },
    {
        "name": "Locale.FilteringMode",
        "constructors": [],
        "methods": [],
        "href": "java/util/Locale.FilteringMode.html"
    },
    {
        "name": "Locale.LanguageRange",
        "constructors": [],
        "methods": [],
        "href": "java/util/Locale.LanguageRange.html"
    },
    {
        "name": "LocaleNameProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/LocaleNameProvider.html"
    },
    {
        "name": "LocaleServiceProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/LocaleServiceProvider.html"
    },
    {
        "name": "LocalObject",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/LocalObject.html"
    },
    {
        "name": "LocalTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/LocalTime.html"
    },
    {
        "name": "LocateRegistry",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/registry/LocateRegistry.html"
    },
    {
        "name": "Location",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/Location.html"
    },
    {
        "name": "LOCATION_FORWARD",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/LOCATION_FORWARD.html"
    },
    {
        "name": "Locator",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/Locator.html"
    },
    {
        "name": "Locator2",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ext/Locator2.html"
    },
    {
        "name": "Locator2Impl",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/ext/Locator2Impl.html"
    },
    {
        "name": "LocatorImpl",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/LocatorImpl.html"
    },
    {
        "name": "Lock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/Lock.html"
    },
    {
        "name": "LockInfo",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/LockInfo.html"
    },
    {
        "name": "LockSupport",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/LockSupport.html"
    },
    {
        "name": "Logger",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/Logger.html"
    },
    {
        "name": "LoggingMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/LoggingMXBean.html"
    },
    {
        "name": "LoggingPermission",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/LoggingPermission.html"
    },
    {
        "name": "LogicalHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/LogicalHandler.html"
    },
    {
        "name": "LogicalMessage",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/LogicalMessage.html"
    },
    {
        "name": "LogicalMessageContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/LogicalMessageContext.html"
    },
    {
        "name": "LoginContext",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/LoginContext.html"
    },
    {
        "name": "LoginException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/login/LoginException.html"
    },
    {
        "name": "LoginModule",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/spi/LoginModule.html"
    },
    {
        "name": "LogManager",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/LogManager.html"
    },
    {
        "name": "LogRecord",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/LogRecord.html"
    },
    {
        "name": "LogStream",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/LogStream.html"
    },
    {
        "name": "Long",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Long.html"
    },
    {
        "name": "LongAccumulator",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/atomic/LongAccumulator.html"
    },
    {
        "name": "LongAdder",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/atomic/LongAdder.html"
    },
    {
        "name": "LongBinaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongBinaryOperator.html"
    },
    {
        "name": "LongBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/LongBuffer.html"
    },
    {
        "name": "LongConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongConsumer.html"
    },
    {
        "name": "LongFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongFunction.html"
    },
    {
        "name": "LongHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/LongHolder.html"
    },
    {
        "name": "LongLongSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/LongLongSeqHelper.html"
    },
    {
        "name": "LongLongSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/LongLongSeqHolder.html"
    },
    {
        "name": "LongPredicate",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongPredicate.html"
    },
    {
        "name": "LongSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/LongSeqHelper.html"
    },
    {
        "name": "LongSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/LongSeqHolder.html"
    },
    {
        "name": "LongStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/LongStream.html"
    },
    {
        "name": "LongStream.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/LongStream.Builder.html"
    },
    {
        "name": "LongSummaryStatistics",
        "constructors": [],
        "methods": [],
        "href": "java/util/LongSummaryStatistics.html"
    },
    {
        "name": "LongSupplier",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongSupplier.html"
    },
    {
        "name": "LongToDoubleFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongToDoubleFunction.html"
    },
    {
        "name": "LongToIntFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongToIntFunction.html"
    },
    {
        "name": "LongUnaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/LongUnaryOperator.html"
    },
    {
        "name": "LookAndFeel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/LookAndFeel.html"
    },
    {
        "name": "LookupOp",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/LookupOp.html"
    },
    {
        "name": "LookupTable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/LookupTable.html"
    },
    {
        "name": "LSException",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSException.html"
    },
    {
        "name": "LSInput",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSInput.html"
    },
    {
        "name": "LSLoadEvent",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSLoadEvent.html"
    },
    {
        "name": "LSOutput",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSOutput.html"
    },
    {
        "name": "LSParser",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSParser.html"
    },
    {
        "name": "LSParserFilter",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSParserFilter.html"
    },
    {
        "name": "LSProgressEvent",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSProgressEvent.html"
    },
    {
        "name": "LSResourceResolver",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSResourceResolver.html"
    },
    {
        "name": "LSSerializer",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSSerializer.html"
    },
    {
        "name": "LSSerializerFilter",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ls/LSSerializerFilter.html"
    },
    {
        "name": "Mac",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/Mac.html"
    },
    {
        "name": "MacSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/MacSpi.html"
    },
    {
        "name": "MailcapCommandMap",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/MailcapCommandMap.html"
    },
    {
        "name": "MalformedInputException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/MalformedInputException.html"
    },
    {
        "name": "MalformedLinkException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/MalformedLinkException.html"
    },
    {
        "name": "MalformedObjectNameException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MalformedObjectNameException.html"
    },
    {
        "name": "MalformedParameterizedTypeException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/MalformedParameterizedTypeException.html"
    },
    {
        "name": "MalformedParametersException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/MalformedParametersException.html"
    },
    {
        "name": "MalformedURLException",
        "constructors": [],
        "methods": [],
        "href": "java/net/MalformedURLException.html"
    },
    {
        "name": "ManagementFactory",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/ManagementFactory.html"
    },
    {
        "name": "ManagementPermission",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/ManagementPermission.html"
    },
    {
        "name": "ManageReferralControl",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/ManageReferralControl.html"
    },
    {
        "name": "ManagerFactoryParameters",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/ManagerFactoryParameters.html"
    },
    {
        "name": "Manifest",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/Manifest.html"
    },
    {
        "name": "Manifest",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/Manifest.html"
    },
    {
        "name": "Map",
        "constructors": [],
        "methods": [],
        "href": "java/util/Map.html"
    },
    {
        "name": "Map.Entry",
        "constructors": [],
        "methods": [],
        "href": "java/util/Map.Entry.html"
    },
    {
        "name": "MappedByteBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/MappedByteBuffer.html"
    },
    {
        "name": "MARSHAL",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/MARSHAL.html"
    },
    {
        "name": "MarshalException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/MarshalException.html"
    },
    {
        "name": "MarshalException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/MarshalException.html"
    },
    {
        "name": "MarshalException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/MarshalException.html"
    },
    {
        "name": "MarshalledObject",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/MarshalledObject.html"
    },
    {
        "name": "Marshaller",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/Marshaller.html"
    },
    {
        "name": "Marshaller.Listener",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/Marshaller.Listener.html"
    },
    {
        "name": "MaskFormatter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/MaskFormatter.html"
    },
    {
        "name": "Matcher",
        "constructors": [],
        "methods": [],
        "href": "java/util/regex/Matcher.html"
    },
    {
        "name": "MatchResult",
        "constructors": [],
        "methods": [],
        "href": "java/util/regex/MatchResult.html"
    },
    {
        "name": "Math",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Math.html"
    },
    {
        "name": "MathContext",
        "constructors": [],
        "methods": [],
        "href": "java/math/MathContext.html"
    },
    {
        "name": "MatteBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/MatteBorder.html"
    },
    {
        "name": "MBeanAttributeInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanAttributeInfo.html"
    },
    {
        "name": "MBeanConstructorInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanConstructorInfo.html"
    },
    {
        "name": "MBeanException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanException.html"
    },
    {
        "name": "MBeanFeatureInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanFeatureInfo.html"
    },
    {
        "name": "MBeanInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanInfo.html"
    },
    {
        "name": "MBeanNotificationInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanNotificationInfo.html"
    },
    {
        "name": "MBeanOperationInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanOperationInfo.html"
    },
    {
        "name": "MBeanParameterInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanParameterInfo.html"
    },
    {
        "name": "MBeanPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanPermission.html"
    },
    {
        "name": "MBeanRegistration",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanRegistration.html"
    },
    {
        "name": "MBeanRegistrationException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanRegistrationException.html"
    },
    {
        "name": "MBeanServer",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServer.html"
    },
    {
        "name": "MBeanServerBuilder",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerBuilder.html"
    },
    {
        "name": "MBeanServerConnection",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerConnection.html"
    },
    {
        "name": "MBeanServerDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerDelegate.html"
    },
    {
        "name": "MBeanServerDelegateMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerDelegateMBean.html"
    },
    {
        "name": "MBeanServerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerFactory.html"
    },
    {
        "name": "MBeanServerForwarder",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/MBeanServerForwarder.html"
    },
    {
        "name": "MBeanServerInvocationHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerInvocationHandler.html"
    },
    {
        "name": "MBeanServerNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerNotification.html"
    },
    {
        "name": "MBeanServerNotificationFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/MBeanServerNotificationFilter.html"
    },
    {
        "name": "MBeanServerPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanServerPermission.html"
    },
    {
        "name": "MBeanTrustPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MBeanTrustPermission.html"
    },
    {
        "name": "Media",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Media.html"
    },
    {
        "name": "MediaName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaName.html"
    },
    {
        "name": "MediaPrintableArea",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaPrintableArea.html"
    },
    {
        "name": "MediaSize",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSize.html"
    },
    {
        "name": "MediaSize.Engineering",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSize.Engineering.html"
    },
    {
        "name": "MediaSize.ISO",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSize.ISO.html"
    },
    {
        "name": "MediaSize.JIS",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSize.JIS.html"
    },
    {
        "name": "MediaSize.NA",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSize.NA.html"
    },
    {
        "name": "MediaSize.Other",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSize.Other.html"
    },
    {
        "name": "MediaSizeName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaSizeName.html"
    },
    {
        "name": "MediaTracker",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MediaTracker.html"
    },
    {
        "name": "MediaTray",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MediaTray.html"
    },
    {
        "name": "Member",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Member.html"
    },
    {
        "name": "MembershipKey",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/MembershipKey.html"
    },
    {
        "name": "MemoryCacheImageInputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/MemoryCacheImageInputStream.html"
    },
    {
        "name": "MemoryCacheImageOutputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/stream/MemoryCacheImageOutputStream.html"
    },
    {
        "name": "MemoryHandler",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/MemoryHandler.html"
    },
    {
        "name": "MemoryImageSource",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/MemoryImageSource.html"
    },
    {
        "name": "MemoryManagerMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MemoryManagerMXBean.html"
    },
    {
        "name": "MemoryMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MemoryMXBean.html"
    },
    {
        "name": "MemoryNotificationInfo",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MemoryNotificationInfo.html"
    },
    {
        "name": "MemoryPoolMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MemoryPoolMXBean.html"
    },
    {
        "name": "MemoryType",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MemoryType.html"
    },
    {
        "name": "MemoryUsage",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MemoryUsage.html"
    },
    {
        "name": "Menu",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Menu.html"
    },
    {
        "name": "MenuBar",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MenuBar.html"
    },
    {
        "name": "MenuBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/MenuBarUI.html"
    },
    {
        "name": "MenuComponent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MenuComponent.html"
    },
    {
        "name": "MenuContainer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MenuContainer.html"
    },
    {
        "name": "MenuDragMouseEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MenuDragMouseEvent.html"
    },
    {
        "name": "MenuDragMouseListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MenuDragMouseListener.html"
    },
    {
        "name": "MenuElement",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/MenuElement.html"
    },
    {
        "name": "MenuEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MenuEvent.html"
    },
    {
        "name": "MenuItem",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MenuItem.html"
    },
    {
        "name": "MenuItemUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/MenuItemUI.html"
    },
    {
        "name": "MenuKeyEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MenuKeyEvent.html"
    },
    {
        "name": "MenuKeyListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MenuKeyListener.html"
    },
    {
        "name": "MenuListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MenuListener.html"
    },
    {
        "name": "MenuSelectionManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/MenuSelectionManager.html"
    },
    {
        "name": "MenuShortcut",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MenuShortcut.html"
    },
    {
        "name": "MessageContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/MessageContext.html"
    },
    {
        "name": "MessageContext.Scope",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/MessageContext.Scope.html"
    },
    {
        "name": "MessageDigest",
        "constructors": [],
        "methods": [],
        "href": "java/security/MessageDigest.html"
    },
    {
        "name": "MessageDigestSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/MessageDigestSpi.html"
    },
    {
        "name": "MessageFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/MessageFactory.html"
    },
    {
        "name": "MessageFormat",
        "constructors": [],
        "methods": [],
        "href": "java/text/MessageFormat.html"
    },
    {
        "name": "MessageFormat.Field",
        "constructors": [],
        "methods": [],
        "href": "java/text/MessageFormat.Field.html"
    },
    {
        "name": "MessageProp",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/MessageProp.html"
    },
    {
        "name": "Messager",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/Messager.html"
    },
    {
        "name": "MetaEventListener",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MetaEventListener.html"
    },
    {
        "name": "MetalBorders",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.html"
    },
    {
        "name": "MetalBorders.ButtonBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.ButtonBorder.html"
    },
    {
        "name": "MetalBorders.Flush3DBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.Flush3DBorder.html"
    },
    {
        "name": "MetalBorders.InternalFrameBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.InternalFrameBorder.html"
    },
    {
        "name": "MetalBorders.MenuBarBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.MenuBarBorder.html"
    },
    {
        "name": "MetalBorders.MenuItemBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.MenuItemBorder.html"
    },
    {
        "name": "MetalBorders.OptionDialogBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.OptionDialogBorder.html"
    },
    {
        "name": "MetalBorders.PaletteBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.PaletteBorder.html"
    },
    {
        "name": "MetalBorders.PopupMenuBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.PopupMenuBorder.html"
    },
    {
        "name": "MetalBorders.RolloverButtonBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.RolloverButtonBorder.html"
    },
    {
        "name": "MetalBorders.ScrollPaneBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.ScrollPaneBorder.html"
    },
    {
        "name": "MetalBorders.TableHeaderBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.TableHeaderBorder.html"
    },
    {
        "name": "MetalBorders.TextFieldBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.TextFieldBorder.html"
    },
    {
        "name": "MetalBorders.ToggleButtonBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.ToggleButtonBorder.html"
    },
    {
        "name": "MetalBorders.ToolBarBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalBorders.ToolBarBorder.html"
    },
    {
        "name": "MetalButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalButtonUI.html"
    },
    {
        "name": "MetalCheckBoxIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalCheckBoxIcon.html"
    },
    {
        "name": "MetalCheckBoxUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalCheckBoxUI.html"
    },
    {
        "name": "MetalComboBoxButton",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalComboBoxButton.html"
    },
    {
        "name": "MetalComboBoxEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalComboBoxEditor.html"
    },
    {
        "name": "MetalComboBoxEditor.UIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalComboBoxEditor.UIResource.html"
    },
    {
        "name": "MetalComboBoxIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalComboBoxIcon.html"
    },
    {
        "name": "MetalComboBoxUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalComboBoxUI.html"
    },
    {
        "name": "MetalDesktopIconUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalDesktopIconUI.html"
    },
    {
        "name": "MetalFileChooserUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalFileChooserUI.html"
    },
    {
        "name": "MetalIconFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.html"
    },
    {
        "name": "MetalIconFactory.FileIcon16",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.FileIcon16.html"
    },
    {
        "name": "MetalIconFactory.FolderIcon16",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.FolderIcon16.html"
    },
    {
        "name": "MetalIconFactory.PaletteCloseIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.PaletteCloseIcon.html"
    },
    {
        "name": "MetalIconFactory.TreeControlIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.TreeControlIcon.html"
    },
    {
        "name": "MetalIconFactory.TreeFolderIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.TreeFolderIcon.html"
    },
    {
        "name": "MetalIconFactory.TreeLeafIcon",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalIconFactory.TreeLeafIcon.html"
    },
    {
        "name": "MetalInternalFrameTitlePane",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalInternalFrameTitlePane.html"
    },
    {
        "name": "MetalInternalFrameUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalInternalFrameUI.html"
    },
    {
        "name": "MetalLabelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalLabelUI.html"
    },
    {
        "name": "MetalLookAndFeel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalLookAndFeel.html"
    },
    {
        "name": "MetalMenuBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalMenuBarUI.html"
    },
    {
        "name": "MetalPopupMenuSeparatorUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.html"
    },
    {
        "name": "MetalProgressBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalProgressBarUI.html"
    },
    {
        "name": "MetalRadioButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalRadioButtonUI.html"
    },
    {
        "name": "MetalRootPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalRootPaneUI.html"
    },
    {
        "name": "MetalScrollBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalScrollBarUI.html"
    },
    {
        "name": "MetalScrollButton",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalScrollButton.html"
    },
    {
        "name": "MetalScrollPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalScrollPaneUI.html"
    },
    {
        "name": "MetalSeparatorUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalSeparatorUI.html"
    },
    {
        "name": "MetalSliderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalSliderUI.html"
    },
    {
        "name": "MetalSplitPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalSplitPaneUI.html"
    },
    {
        "name": "MetalTabbedPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalTabbedPaneUI.html"
    },
    {
        "name": "MetalTextFieldUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalTextFieldUI.html"
    },
    {
        "name": "MetalTheme",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalTheme.html"
    },
    {
        "name": "MetalToggleButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalToggleButtonUI.html"
    },
    {
        "name": "MetalToolBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalToolBarUI.html"
    },
    {
        "name": "MetalToolTipUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalToolTipUI.html"
    },
    {
        "name": "MetalTreeUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/MetalTreeUI.html"
    },
    {
        "name": "MetaMessage",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MetaMessage.html"
    },
    {
        "name": "Method",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Method.html"
    },
    {
        "name": "MethodDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/MethodDescriptor.html"
    },
    {
        "name": "MethodHandle",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MethodHandle.html"
    },
    {
        "name": "MethodHandleInfo",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MethodHandleInfo.html"
    },
    {
        "name": "MethodHandleProxies",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MethodHandleProxies.html"
    },
    {
        "name": "MethodHandles",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MethodHandles.html"
    },
    {
        "name": "MethodHandles.Lookup",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MethodHandles.Lookup.html"
    },
    {
        "name": "MethodType",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MethodType.html"
    },
    {
        "name": "MGF1ParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/MGF1ParameterSpec.html"
    },
    {
        "name": "MidiChannel",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiChannel.html"
    },
    {
        "name": "MidiDevice",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiDevice.html"
    },
    {
        "name": "MidiDevice.Info",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiDevice.Info.html"
    },
    {
        "name": "MidiDeviceProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/spi/MidiDeviceProvider.html"
    },
    {
        "name": "MidiDeviceReceiver",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiDeviceReceiver.html"
    },
    {
        "name": "MidiDeviceTransmitter",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiDeviceTransmitter.html"
    },
    {
        "name": "MidiEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiEvent.html"
    },
    {
        "name": "MidiFileFormat",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiFileFormat.html"
    },
    {
        "name": "MidiFileReader",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/spi/MidiFileReader.html"
    },
    {
        "name": "MidiFileWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/spi/MidiFileWriter.html"
    },
    {
        "name": "MidiMessage",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiMessage.html"
    },
    {
        "name": "MidiSystem",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiSystem.html"
    },
    {
        "name": "MidiUnavailableException",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/MidiUnavailableException.html"
    },
    {
        "name": "MimeHeader",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/MimeHeader.html"
    },
    {
        "name": "MimeHeaders",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/MimeHeaders.html"
    },
    {
        "name": "MimeType",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/MimeType.html"
    },
    {
        "name": "MimeTypeParameterList",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/MimeTypeParameterList.html"
    },
    {
        "name": "MimeTypeParseException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/MimeTypeParseException.html"
    },
    {
        "name": "MimeTypeParseException",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/MimeTypeParseException.html"
    },
    {
        "name": "MimetypesFileTypeMap",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/MimetypesFileTypeMap.html"
    },
    {
        "name": "MinguoChronology",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/MinguoChronology.html"
    },
    {
        "name": "MinguoDate",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/MinguoDate.html"
    },
    {
        "name": "MinguoEra",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/MinguoEra.html"
    },
    {
        "name": "MinimalHTMLWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/MinimalHTMLWriter.html"
    },
    {
        "name": "MirroredTypeException",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/MirroredTypeException.html"
    },
    {
        "name": "MirroredTypesException",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/MirroredTypesException.html"
    },
    {
        "name": "MissingFormatArgumentException",
        "constructors": [],
        "methods": [],
        "href": "java/util/MissingFormatArgumentException.html"
    },
    {
        "name": "MissingFormatWidthException",
        "constructors": [],
        "methods": [],
        "href": "java/util/MissingFormatWidthException.html"
    },
    {
        "name": "MissingResourceException",
        "constructors": [],
        "methods": [],
        "href": "java/util/MissingResourceException.html"
    },
    {
        "name": "Mixer",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Mixer.html"
    },
    {
        "name": "Mixer.Info",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Mixer.Info.html"
    },
    {
        "name": "MixerProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/spi/MixerProvider.html"
    },
    {
        "name": "MLet",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/MLet.html"
    },
    {
        "name": "MLetContent",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/MLetContent.html"
    },
    {
        "name": "MLetMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/MLetMBean.html"
    },
    {
        "name": "ModelMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBean.html"
    },
    {
        "name": "ModelMBeanAttributeInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanAttributeInfo.html"
    },
    {
        "name": "ModelMBeanConstructorInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanConstructorInfo.html"
    },
    {
        "name": "ModelMBeanInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanInfo.html"
    },
    {
        "name": "ModelMBeanInfoSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanInfoSupport.html"
    },
    {
        "name": "ModelMBeanNotificationBroadcaster",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanNotificationBroadcaster.html"
    },
    {
        "name": "ModelMBeanNotificationInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanNotificationInfo.html"
    },
    {
        "name": "ModelMBeanOperationInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/ModelMBeanOperationInfo.html"
    },
    {
        "name": "ModificationItem",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/ModificationItem.html"
    },
    {
        "name": "Modifier",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Modifier.html"
    },
    {
        "name": "Modifier",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/Modifier.html"
    },
    {
        "name": "Monitor",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/Monitor.html"
    },
    {
        "name": "MonitorInfo",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/MonitorInfo.html"
    },
    {
        "name": "MonitorMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/MonitorMBean.html"
    },
    {
        "name": "MonitorNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/MonitorNotification.html"
    },
    {
        "name": "MonitorSettingException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/MonitorSettingException.html"
    },
    {
        "name": "Month",
        "constructors": [],
        "methods": [],
        "href": "java/time/Month.html"
    },
    {
        "name": "MonthDay",
        "constructors": [],
        "methods": [],
        "href": "java/time/MonthDay.html"
    },
    {
        "name": "MouseAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseAdapter.html"
    },
    {
        "name": "MouseDragGestureRecognizer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/dnd/MouseDragGestureRecognizer.html"
    },
    {
        "name": "MouseEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseEvent.html"
    },
    {
        "name": "MouseEvent",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/MouseEvent.html"
    },
    {
        "name": "MouseInfo",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MouseInfo.html"
    },
    {
        "name": "MouseInputAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MouseInputAdapter.html"
    },
    {
        "name": "MouseInputListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/MouseInputListener.html"
    },
    {
        "name": "MouseListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseListener.html"
    },
    {
        "name": "MouseMotionAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseMotionAdapter.html"
    },
    {
        "name": "MouseMotionListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseMotionListener.html"
    },
    {
        "name": "MouseWheelEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseWheelEvent.html"
    },
    {
        "name": "MouseWheelListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/MouseWheelListener.html"
    },
    {
        "name": "MTOM",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/soap/MTOM.html"
    },
    {
        "name": "MTOMFeature",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/soap/MTOMFeature.html"
    },
    {
        "name": "MultiButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiButtonUI.html"
    },
    {
        "name": "MulticastChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/MulticastChannel.html"
    },
    {
        "name": "MulticastSocket",
        "constructors": [],
        "methods": [],
        "href": "java/net/MulticastSocket.html"
    },
    {
        "name": "MultiColorChooserUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiColorChooserUI.html"
    },
    {
        "name": "MultiComboBoxUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiComboBoxUI.html"
    },
    {
        "name": "MultiDesktopIconUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiDesktopIconUI.html"
    },
    {
        "name": "MultiDesktopPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiDesktopPaneUI.html"
    },
    {
        "name": "MultiDoc",
        "constructors": [],
        "methods": [],
        "href": "javax/print/MultiDoc.html"
    },
    {
        "name": "MultiDocPrintJob",
        "constructors": [],
        "methods": [],
        "href": "javax/print/MultiDocPrintJob.html"
    },
    {
        "name": "MultiDocPrintService",
        "constructors": [],
        "methods": [],
        "href": "javax/print/MultiDocPrintService.html"
    },
    {
        "name": "MultiFileChooserUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiFileChooserUI.html"
    },
    {
        "name": "MultiInternalFrameUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiInternalFrameUI.html"
    },
    {
        "name": "MultiLabelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiLabelUI.html"
    },
    {
        "name": "MultiListUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiListUI.html"
    },
    {
        "name": "MultiLookAndFeel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiLookAndFeel.html"
    },
    {
        "name": "MultiMenuBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiMenuBarUI.html"
    },
    {
        "name": "MultiMenuItemUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiMenuItemUI.html"
    },
    {
        "name": "MultiOptionPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiOptionPaneUI.html"
    },
    {
        "name": "MultiPanelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiPanelUI.html"
    },
    {
        "name": "MultiPixelPackedSampleModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/MultiPixelPackedSampleModel.html"
    },
    {
        "name": "MultipleComponentProfileHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/MultipleComponentProfileHelper.html"
    },
    {
        "name": "MultipleComponentProfileHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/MultipleComponentProfileHolder.html"
    },
    {
        "name": "MultipleDocumentHandling",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/MultipleDocumentHandling.html"
    },
    {
        "name": "MultipleGradientPaint",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MultipleGradientPaint.html"
    },
    {
        "name": "MultipleGradientPaint.ColorSpaceType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MultipleGradientPaint.ColorSpaceType.html"
    },
    {
        "name": "MultipleGradientPaint.CycleMethod",
        "constructors": [],
        "methods": [],
        "href": "java/awt/MultipleGradientPaint.CycleMethod.html"
    },
    {
        "name": "MultipleMaster",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/MultipleMaster.html"
    },
    {
        "name": "MultiPopupMenuUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiPopupMenuUI.html"
    },
    {
        "name": "MultiProgressBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiProgressBarUI.html"
    },
    {
        "name": "MultiRootPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiRootPaneUI.html"
    },
    {
        "name": "MultiScrollBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiScrollBarUI.html"
    },
    {
        "name": "MultiScrollPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiScrollPaneUI.html"
    },
    {
        "name": "MultiSeparatorUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiSeparatorUI.html"
    },
    {
        "name": "MultiSliderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiSliderUI.html"
    },
    {
        "name": "MultiSpinnerUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiSpinnerUI.html"
    },
    {
        "name": "MultiSplitPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiSplitPaneUI.html"
    },
    {
        "name": "MultiTabbedPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiTabbedPaneUI.html"
    },
    {
        "name": "MultiTableHeaderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiTableHeaderUI.html"
    },
    {
        "name": "MultiTableUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiTableUI.html"
    },
    {
        "name": "MultiTextUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiTextUI.html"
    },
    {
        "name": "MultiToolBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiToolBarUI.html"
    },
    {
        "name": "MultiToolTipUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiToolTipUI.html"
    },
    {
        "name": "MultiTreeUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiTreeUI.html"
    },
    {
        "name": "MultiViewportUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/multi/MultiViewportUI.html"
    },
    {
        "name": "MutableAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/MutableAttributeSet.html"
    },
    {
        "name": "MutableCallSite",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/MutableCallSite.html"
    },
    {
        "name": "MutableComboBoxModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/MutableComboBoxModel.html"
    },
    {
        "name": "MutableTreeNode",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/MutableTreeNode.html"
    },
    {
        "name": "MutationEvent",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/MutationEvent.html"
    },
    {
        "name": "MXBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/MXBean.html"
    },
    {
        "name": "Name",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/Name.html"
    },
    {
        "name": "Name",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/Name.html"
    },
    {
        "name": "Name",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/Name.html"
    },
    {
        "name": "NameAlreadyBoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NameAlreadyBoundException.html"
    },
    {
        "name": "NameCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/NameCallback.html"
    },
    {
        "name": "NameClassPair",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NameClassPair.html"
    },
    {
        "name": "NameComponent",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NameComponent.html"
    },
    {
        "name": "NameComponentHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NameComponentHelper.html"
    },
    {
        "name": "NameComponentHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NameComponentHolder.html"
    },
    {
        "name": "NamedNodeMap",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/NamedNodeMap.html"
    },
    {
        "name": "NamedValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NamedValue.html"
    },
    {
        "name": "NameDynAnyPair",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/NameDynAnyPair.html"
    },
    {
        "name": "NameDynAnyPairHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/NameDynAnyPairHelper.html"
    },
    {
        "name": "NameDynAnyPairSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/NameDynAnyPairSeqHelper.html"
    },
    {
        "name": "NameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NameHelper.html"
    },
    {
        "name": "NameHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NameHolder.html"
    },
    {
        "name": "NameList",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/NameList.html"
    },
    {
        "name": "NameNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NameNotFoundException.html"
    },
    {
        "name": "NameParser",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NameParser.html"
    },
    {
        "name": "Namespace",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/Namespace.html"
    },
    {
        "name": "NamespaceChangeListener",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/NamespaceChangeListener.html"
    },
    {
        "name": "NamespaceContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/namespace/NamespaceContext.html"
    },
    {
        "name": "NamespaceSupport",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/NamespaceSupport.html"
    },
    {
        "name": "NameValuePair",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NameValuePair.html"
    },
    {
        "name": "NameValuePair",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/NameValuePair.html"
    },
    {
        "name": "NameValuePairHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NameValuePairHelper.html"
    },
    {
        "name": "NameValuePairHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/NameValuePairHelper.html"
    },
    {
        "name": "NameValuePairSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/NameValuePairSeqHelper.html"
    },
    {
        "name": "Naming",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/Naming.html"
    },
    {
        "name": "NamingContext",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContext.html"
    },
    {
        "name": "NamingContextExt",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExt.html"
    },
    {
        "name": "NamingContextExtHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtHelper.html"
    },
    {
        "name": "NamingContextExtHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtHolder.html"
    },
    {
        "name": "NamingContextExtOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtOperations.html"
    },
    {
        "name": "NamingContextExtPOA",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtPOA.html"
    },
    {
        "name": "NamingContextHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextHelper.html"
    },
    {
        "name": "NamingContextHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextHolder.html"
    },
    {
        "name": "NamingContextOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextOperations.html"
    },
    {
        "name": "NamingContextPOA",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPOA.html"
    },
    {
        "name": "NamingEnumeration",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NamingEnumeration.html"
    },
    {
        "name": "NamingEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/NamingEvent.html"
    },
    {
        "name": "NamingException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NamingException.html"
    },
    {
        "name": "NamingExceptionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/NamingExceptionEvent.html"
    },
    {
        "name": "NamingListener",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/NamingListener.html"
    },
    {
        "name": "NamingManager",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/NamingManager.html"
    },
    {
        "name": "NamingSecurityException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NamingSecurityException.html"
    },
    {
        "name": "Native",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/Native.html"
    },
    {
        "name": "NavigableMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/NavigableMap.html"
    },
    {
        "name": "NavigableSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/NavigableSet.html"
    },
    {
        "name": "NavigationFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/NavigationFilter.html"
    },
    {
        "name": "NavigationFilter.FilterBypass",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/NavigationFilter.FilterBypass.html"
    },
    {
        "name": "NClob",
        "constructors": [],
        "methods": [],
        "href": "java/sql/NClob.html"
    },
    {
        "name": "NegativeArraySizeException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NegativeArraySizeException.html"
    },
    {
        "name": "NestingKind",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/NestingKind.html"
    },
    {
        "name": "NetPermission",
        "constructors": [],
        "methods": [],
        "href": "java/net/NetPermission.html"
    },
    {
        "name": "NetworkChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/NetworkChannel.html"
    },
    {
        "name": "NetworkInterface",
        "constructors": [],
        "methods": [],
        "href": "java/net/NetworkInterface.html"
    },
    {
        "name": "NimbusLookAndFeel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/nimbus/NimbusLookAndFeel.html"
    },
    {
        "name": "NimbusStyle",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/nimbus/NimbusStyle.html"
    },
    {
        "name": "NO_IMPLEMENT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NO_IMPLEMENT.html"
    },
    {
        "name": "NO_MEMORY",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NO_MEMORY.html"
    },
    {
        "name": "NO_PERMISSION",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NO_PERMISSION.html"
    },
    {
        "name": "NO_RESOURCES",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NO_RESOURCES.html"
    },
    {
        "name": "NO_RESPONSE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NO_RESPONSE.html"
    },
    {
        "name": "NoClassDefFoundError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NoClassDefFoundError.html"
    },
    {
        "name": "NoConnectionPendingException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/NoConnectionPendingException.html"
    },
    {
        "name": "NoContext",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/CurrentPackage/NoContext.html"
    },
    {
        "name": "NoContextHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/CurrentPackage/NoContextHelper.html"
    },
    {
        "name": "Node",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/Node.html"
    },
    {
        "name": "Node",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Node.html"
    },
    {
        "name": "NodeChangeEvent",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/NodeChangeEvent.html"
    },
    {
        "name": "NodeChangeListener",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/NodeChangeListener.html"
    },
    {
        "name": "NodeList",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/NodeList.html"
    },
    {
        "name": "NodeSetData",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/NodeSetData.html"
    },
    {
        "name": "NoInitialContextException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NoInitialContextException.html"
    },
    {
        "name": "NON_EXISTENT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/NON_EXISTENT.html"
    },
    {
        "name": "NoninvertibleTransformException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/NoninvertibleTransformException.html"
    },
    {
        "name": "NonReadableChannelException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/NonReadableChannelException.html"
    },
    {
        "name": "NonWritableChannelException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/NonWritableChannelException.html"
    },
    {
        "name": "NoPermissionException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NoPermissionException.html"
    },
    {
        "name": "NormalizedStringAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/NormalizedStringAdapter.html"
    },
    {
        "name": "Normalizer",
        "constructors": [],
        "methods": [],
        "href": "java/text/Normalizer.html"
    },
    {
        "name": "Normalizer.Form",
        "constructors": [],
        "methods": [],
        "href": "java/text/Normalizer.Form.html"
    },
    {
        "name": "NoRouteToHostException",
        "constructors": [],
        "methods": [],
        "href": "java/net/NoRouteToHostException.html"
    },
    {
        "name": "NoServant",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/NoServant.html"
    },
    {
        "name": "NoServantHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/NoServantHelper.html"
    },
    {
        "name": "NoSuchAlgorithmException",
        "constructors": [],
        "methods": [],
        "href": "java/security/NoSuchAlgorithmException.html"
    },
    {
        "name": "NoSuchAttributeException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/NoSuchAttributeException.html"
    },
    {
        "name": "NoSuchElementException",
        "constructors": [],
        "methods": [],
        "href": "java/util/NoSuchElementException.html"
    },
    {
        "name": "NoSuchFieldError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NoSuchFieldError.html"
    },
    {
        "name": "NoSuchFieldException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NoSuchFieldException.html"
    },
    {
        "name": "NoSuchFileException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/NoSuchFileException.html"
    },
    {
        "name": "NoSuchMechanismException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/NoSuchMechanismException.html"
    },
    {
        "name": "NoSuchMethodError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NoSuchMethodError.html"
    },
    {
        "name": "NoSuchMethodException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NoSuchMethodException.html"
    },
    {
        "name": "NoSuchObjectException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/NoSuchObjectException.html"
    },
    {
        "name": "NoSuchPaddingException",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/NoSuchPaddingException.html"
    },
    {
        "name": "NoSuchProviderException",
        "constructors": [],
        "methods": [],
        "href": "java/security/NoSuchProviderException.html"
    },
    {
        "name": "NotActiveException",
        "constructors": [],
        "methods": [],
        "href": "java/io/NotActiveException.html"
    },
    {
        "name": "Notation",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Notation.html"
    },
    {
        "name": "NotationDeclaration",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/NotationDeclaration.html"
    },
    {
        "name": "NotBoundException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/NotBoundException.html"
    },
    {
        "name": "NotCompliantMBeanException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotCompliantMBeanException.html"
    },
    {
        "name": "NotContextException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/NotContextException.html"
    },
    {
        "name": "NotDirectoryException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/NotDirectoryException.html"
    },
    {
        "name": "NotEmpty",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotEmpty.html"
    },
    {
        "name": "NotEmptyHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotEmptyHelper.html"
    },
    {
        "name": "NotEmptyHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotEmptyHolder.html"
    },
    {
        "name": "NotFound",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotFound.html"
    },
    {
        "name": "NotFoundHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotFoundHelper.html"
    },
    {
        "name": "NotFoundHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotFoundHolder.html"
    },
    {
        "name": "NotFoundReason",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotFoundReason.html"
    },
    {
        "name": "NotFoundReasonHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotFoundReasonHelper.html"
    },
    {
        "name": "NotFoundReasonHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextPackage/NotFoundReasonHolder.html"
    },
    {
        "name": "NotIdentifiableEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/NotIdentifiableEvent.html"
    },
    {
        "name": "NotIdentifiableEventImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/helpers/NotIdentifiableEventImpl.html"
    },
    {
        "name": "Notification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/Notification.html"
    },
    {
        "name": "NotificationBroadcaster",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotificationBroadcaster.html"
    },
    {
        "name": "NotificationBroadcasterSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotificationBroadcasterSupport.html"
    },
    {
        "name": "NotificationEmitter",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotificationEmitter.html"
    },
    {
        "name": "NotificationFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotificationFilter.html"
    },
    {
        "name": "NotificationFilterSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotificationFilterSupport.html"
    },
    {
        "name": "NotificationListener",
        "constructors": [],
        "methods": [],
        "href": "javax/management/NotificationListener.html"
    },
    {
        "name": "NotificationResult",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/NotificationResult.html"
    },
    {
        "name": "NotLinkException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/NotLinkException.html"
    },
    {
        "name": "NotOwnerException",
        "constructors": [],
        "methods": [],
        "href": "java/security/acl/NotOwnerException.html"
    },
    {
        "name": "NotSerializableException",
        "constructors": [],
        "methods": [],
        "href": "java/io/NotSerializableException.html"
    },
    {
        "name": "NotYetBoundException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/NotYetBoundException.html"
    },
    {
        "name": "NotYetConnectedException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/NotYetConnectedException.html"
    },
    {
        "name": "NoType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/NoType.html"
    },
    {
        "name": "NullCipher",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/NullCipher.html"
    },
    {
        "name": "NullPointerException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NullPointerException.html"
    },
    {
        "name": "NullType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/NullType.html"
    },
    {
        "name": "Number",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Number.html"
    },
    {
        "name": "NumberFormat",
        "constructors": [],
        "methods": [],
        "href": "java/text/NumberFormat.html"
    },
    {
        "name": "NumberFormat.Field",
        "constructors": [],
        "methods": [],
        "href": "java/text/NumberFormat.Field.html"
    },
    {
        "name": "NumberFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/NumberFormatException.html"
    },
    {
        "name": "NumberFormatProvider",
        "constructors": [],
        "methods": [],
        "href": "java/text/spi/NumberFormatProvider.html"
    },
    {
        "name": "NumberFormatter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/NumberFormatter.html"
    },
    {
        "name": "NumberOfDocuments",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/NumberOfDocuments.html"
    },
    {
        "name": "NumberOfInterveningJobs",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/NumberOfInterveningJobs.html"
    },
    {
        "name": "NumberUp",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/NumberUp.html"
    },
    {
        "name": "NumberUpSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/NumberUpSupported.html"
    },
    {
        "name": "NumericShaper",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/NumericShaper.html"
    },
    {
        "name": "NumericShaper.Range",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/NumericShaper.Range.html"
    },
    {
        "name": "NVList",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/NVList.html"
    },
    {
        "name": "OAEPParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/OAEPParameterSpec.html"
    },
    {
        "name": "OBJ_ADAPTER",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/OBJ_ADAPTER.html"
    },
    {
        "name": "ObjDoubleConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ObjDoubleConsumer.html"
    },
    {
        "name": "Object",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Object.html"
    },
    {
        "name": "Object",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Object.html"
    },
    {
        "name": "OBJECT_NOT_EXIST",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/OBJECT_NOT_EXIST.html"
    },
    {
        "name": "ObjectAlreadyActive",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ObjectAlreadyActive.html"
    },
    {
        "name": "ObjectAlreadyActiveHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ObjectAlreadyActiveHelper.html"
    },
    {
        "name": "ObjectChangeListener",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/event/ObjectChangeListener.html"
    },
    {
        "name": "ObjectFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/ObjectFactory.html"
    },
    {
        "name": "ObjectFactoryBuilder",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/ObjectFactoryBuilder.html"
    },
    {
        "name": "ObjectHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ObjectHelper.html"
    },
    {
        "name": "ObjectHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ObjectHolder.html"
    },
    {
        "name": "ObjectIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectIdHelper.html"
    },
    {
        "name": "ObjectIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfoPackage/ObjectIdHelper.html"
    },
    {
        "name": "ObjectImpl",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ObjectImpl.html"
    },
    {
        "name": "ObjectImpl",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA_2_3/portable/ObjectImpl.html"
    },
    {
        "name": "ObjectInput",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectInput.html"
    },
    {
        "name": "ObjectInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectInputStream.html"
    },
    {
        "name": "ObjectInputStream.GetField",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectInputStream.GetField.html"
    },
    {
        "name": "ObjectInputValidation",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectInputValidation.html"
    },
    {
        "name": "ObjectInstance",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ObjectInstance.html"
    },
    {
        "name": "ObjectName",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ObjectName.html"
    },
    {
        "name": "ObjectNotActive",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ObjectNotActive.html"
    },
    {
        "name": "ObjectNotActiveHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ObjectNotActiveHelper.html"
    },
    {
        "name": "ObjectOutput",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectOutput.html"
    },
    {
        "name": "ObjectOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectOutputStream.html"
    },
    {
        "name": "ObjectOutputStream.PutField",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectOutputStream.PutField.html"
    },
    {
        "name": "ObjectReferenceFactory",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceFactory.html"
    },
    {
        "name": "ObjectReferenceFactoryHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceFactoryHelper.html"
    },
    {
        "name": "ObjectReferenceFactoryHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceFactoryHolder.html"
    },
    {
        "name": "ObjectReferenceTemplate",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceTemplate.html"
    },
    {
        "name": "ObjectReferenceTemplateHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceTemplateHelper.html"
    },
    {
        "name": "ObjectReferenceTemplateHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceTemplateHolder.html"
    },
    {
        "name": "ObjectReferenceTemplateSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceTemplateSeqHelper.html"
    },
    {
        "name": "ObjectReferenceTemplateSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ObjectReferenceTemplateSeqHolder.html"
    },
    {
        "name": "Objects",
        "constructors": [],
        "methods": [],
        "href": "java/util/Objects.html"
    },
    {
        "name": "ObjectStreamClass",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectStreamClass.html"
    },
    {
        "name": "ObjectStreamConstants",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectStreamConstants.html"
    },
    {
        "name": "ObjectStreamException",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectStreamException.html"
    },
    {
        "name": "ObjectStreamField",
        "constructors": [],
        "methods": [],
        "href": "java/io/ObjectStreamField.html"
    },
    {
        "name": "ObjectView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/ObjectView.html"
    },
    {
        "name": "ObjID",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/ObjID.html"
    },
    {
        "name": "ObjIntConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ObjIntConsumer.html"
    },
    {
        "name": "ObjLongConsumer",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ObjLongConsumer.html"
    },
    {
        "name": "Observable",
        "constructors": [],
        "methods": [],
        "href": "java/util/Observable.html"
    },
    {
        "name": "Observer",
        "constructors": [],
        "methods": [],
        "href": "java/util/Observer.html"
    },
    {
        "name": "OceanTheme",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/metal/OceanTheme.html"
    },
    {
        "name": "OctetSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/OctetSeqHelper.html"
    },
    {
        "name": "OctetSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/OctetSeqHolder.html"
    },
    {
        "name": "OctetStreamData",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/OctetStreamData.html"
    },
    {
        "name": "OffsetDateTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/OffsetDateTime.html"
    },
    {
        "name": "OffsetTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/OffsetTime.html"
    },
    {
        "name": "Oid",
        "constructors": [],
        "methods": [],
        "href": "org/ietf/jgss/Oid.html"
    },
    {
        "name": "OMGVMCID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/OMGVMCID.html"
    },
    {
        "name": "Oneway",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/Oneway.html"
    },
    {
        "name": "OpenDataException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenDataException.html"
    },
    {
        "name": "OpenMBeanAttributeInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanAttributeInfo.html"
    },
    {
        "name": "OpenMBeanAttributeInfoSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanAttributeInfoSupport.html"
    },
    {
        "name": "OpenMBeanConstructorInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanConstructorInfo.html"
    },
    {
        "name": "OpenMBeanConstructorInfoSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanConstructorInfoSupport.html"
    },
    {
        "name": "OpenMBeanInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanInfo.html"
    },
    {
        "name": "OpenMBeanInfoSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanInfoSupport.html"
    },
    {
        "name": "OpenMBeanOperationInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanOperationInfo.html"
    },
    {
        "name": "OpenMBeanOperationInfoSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanOperationInfoSupport.html"
    },
    {
        "name": "OpenMBeanParameterInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanParameterInfo.html"
    },
    {
        "name": "OpenMBeanParameterInfoSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenMBeanParameterInfoSupport.html"
    },
    {
        "name": "OpenOption",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/OpenOption.html"
    },
    {
        "name": "OpenType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/OpenType.html"
    },
    {
        "name": "OpenType",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/OpenType.html"
    },
    {
        "name": "OperatingSystemMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/OperatingSystemMXBean.html"
    },
    {
        "name": "Operation",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/Operation.html"
    },
    {
        "name": "OperationNotSupportedException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/OperationNotSupportedException.html"
    },
    {
        "name": "OperationsException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/OperationsException.html"
    },
    {
        "name": "Option",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/Option.html"
    },
    {
        "name": "Optional",
        "constructors": [],
        "methods": [],
        "href": "java/util/Optional.html"
    },
    {
        "name": "OptionalDataException",
        "constructors": [],
        "methods": [],
        "href": "java/io/OptionalDataException.html"
    },
    {
        "name": "OptionalDouble",
        "constructors": [],
        "methods": [],
        "href": "java/util/OptionalDouble.html"
    },
    {
        "name": "OptionalInt",
        "constructors": [],
        "methods": [],
        "href": "java/util/OptionalInt.html"
    },
    {
        "name": "OptionalLong",
        "constructors": [],
        "methods": [],
        "href": "java/util/OptionalLong.html"
    },
    {
        "name": "OptionChecker",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/OptionChecker.html"
    },
    {
        "name": "OptionPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/OptionPaneUI.html"
    },
    {
        "name": "ORB",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ORB.html"
    },
    {
        "name": "ORB",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA_2_3/ORB.html"
    },
    {
        "name": "ORBIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBIdHelper.html"
    },
    {
        "name": "ORBInitializer",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitializer.html"
    },
    {
        "name": "ORBInitializerOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitializerOperations.html"
    },
    {
        "name": "ORBInitInfo",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfo.html"
    },
    {
        "name": "ORBInitInfoOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ORBInitInfoOperations.html"
    },
    {
        "name": "OrientationRequested",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/OrientationRequested.html"
    },
    {
        "name": "OutOfMemoryError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/OutOfMemoryError.html"
    },
    {
        "name": "OutputDeviceAssigned",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/OutputDeviceAssigned.html"
    },
    {
        "name": "OutputKeys",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/OutputKeys.html"
    },
    {
        "name": "OutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/OutputStream.html"
    },
    {
        "name": "OutputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/OutputStream.html"
    },
    {
        "name": "OutputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA_2_3/portable/OutputStream.html"
    },
    {
        "name": "OutputStreamWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/OutputStreamWriter.html"
    },
    {
        "name": "OverlappingFileLockException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/OverlappingFileLockException.html"
    },
    {
        "name": "OverlayLayout",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/OverlayLayout.html"
    },
    {
        "name": "Override",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Override.html"
    },
    {
        "name": "Owner",
        "constructors": [],
        "methods": [],
        "href": "java/security/acl/Owner.html"
    },
    {
        "name": "Pack200",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/Pack200.html"
    },
    {
        "name": "Pack200.Packer",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/Pack200.Packer.html"
    },
    {
        "name": "Pack200.Unpacker",
        "constructors": [],
        "methods": [],
        "href": "java/util/jar/Pack200.Unpacker.html"
    },
    {
        "name": "Package",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Package.html"
    },
    {
        "name": "PackageElement",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/PackageElement.html"
    },
    {
        "name": "PackedColorModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/PackedColorModel.html"
    },
    {
        "name": "Pageable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/Pageable.html"
    },
    {
        "name": "PageAttributes",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PageAttributes.html"
    },
    {
        "name": "PageAttributes.ColorType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PageAttributes.ColorType.html"
    },
    {
        "name": "PageAttributes.MediaType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PageAttributes.MediaType.html"
    },
    {
        "name": "PageAttributes.OrientationRequestedType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PageAttributes.OrientationRequestedType.html"
    },
    {
        "name": "PageAttributes.OriginType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PageAttributes.OriginType.html"
    },
    {
        "name": "PageAttributes.PrintQualityType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PageAttributes.PrintQualityType.html"
    },
    {
        "name": "PagedResultsControl",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/PagedResultsControl.html"
    },
    {
        "name": "PagedResultsResponseControl",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/PagedResultsResponseControl.html"
    },
    {
        "name": "PageFormat",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/PageFormat.html"
    },
    {
        "name": "PageRanges",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PageRanges.html"
    },
    {
        "name": "PagesPerMinute",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PagesPerMinute.html"
    },
    {
        "name": "PagesPerMinuteColor",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PagesPerMinuteColor.html"
    },
    {
        "name": "Paint",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Paint.html"
    },
    {
        "name": "PaintContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PaintContext.html"
    },
    {
        "name": "Painter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Painter.html"
    },
    {
        "name": "PaintEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/PaintEvent.html"
    },
    {
        "name": "Panel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Panel.html"
    },
    {
        "name": "PanelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/PanelUI.html"
    },
    {
        "name": "Paper",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/Paper.html"
    },
    {
        "name": "ParagraphView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/ParagraphView.html"
    },
    {
        "name": "ParagraphView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/ParagraphView.html"
    },
    {
        "name": "Parameter",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Parameter.html"
    },
    {
        "name": "Parameter",
        "constructors": [],
        "methods": [],
        "href": "org/omg/Dynamic/Parameter.html"
    },
    {
        "name": "ParameterBlock",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/ParameterBlock.html"
    },
    {
        "name": "ParameterDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/ParameterDescriptor.html"
    },
    {
        "name": "Parameterizable",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/Parameterizable.html"
    },
    {
        "name": "ParameterizedType",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/ParameterizedType.html"
    },
    {
        "name": "ParameterMetaData",
        "constructors": [],
        "methods": [],
        "href": "java/sql/ParameterMetaData.html"
    },
    {
        "name": "ParameterMode",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ParameterMode.html"
    },
    {
        "name": "ParameterModeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ParameterModeHelper.html"
    },
    {
        "name": "ParameterModeHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ParameterModeHolder.html"
    },
    {
        "name": "ParseConversionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/ParseConversionEvent.html"
    },
    {
        "name": "ParseConversionEventImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/helpers/ParseConversionEventImpl.html"
    },
    {
        "name": "ParseException",
        "constructors": [],
        "methods": [],
        "href": "java/text/ParseException.html"
    },
    {
        "name": "ParsePosition",
        "constructors": [],
        "methods": [],
        "href": "java/text/ParsePosition.html"
    },
    {
        "name": "Parser",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/Parser.html"
    },
    {
        "name": "Parser",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/Parser.html"
    },
    {
        "name": "ParserAdapter",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/ParserAdapter.html"
    },
    {
        "name": "ParserConfigurationException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/parsers/ParserConfigurationException.html"
    },
    {
        "name": "ParserDelegator",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/ParserDelegator.html"
    },
    {
        "name": "ParserFactory",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/ParserFactory.html"
    },
    {
        "name": "PartialResultException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/PartialResultException.html"
    },
    {
        "name": "PasswordAuthentication",
        "constructors": [],
        "methods": [],
        "href": "java/net/PasswordAuthentication.html"
    },
    {
        "name": "PasswordCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/PasswordCallback.html"
    },
    {
        "name": "PasswordView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/PasswordView.html"
    },
    {
        "name": "Patch",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Patch.html"
    },
    {
        "name": "Path",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/Path.html"
    },
    {
        "name": "Path2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Path2D.html"
    },
    {
        "name": "Path2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Path2D.Double.html"
    },
    {
        "name": "Path2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Path2D.Float.html"
    },
    {
        "name": "PathIterator",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/PathIterator.html"
    },
    {
        "name": "PathMatcher",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/PathMatcher.html"
    },
    {
        "name": "Paths",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/Paths.html"
    },
    {
        "name": "Pattern",
        "constructors": [],
        "methods": [],
        "href": "java/util/regex/Pattern.html"
    },
    {
        "name": "PatternSyntaxException",
        "constructors": [],
        "methods": [],
        "href": "java/util/regex/PatternSyntaxException.html"
    },
    {
        "name": "PBEKey",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/interfaces/PBEKey.html"
    },
    {
        "name": "PBEKeySpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/PBEKeySpec.html"
    },
    {
        "name": "PBEParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/PBEParameterSpec.html"
    },
    {
        "name": "PDLOverrideSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PDLOverrideSupported.html"
    },
    {
        "name": "Period",
        "constructors": [],
        "methods": [],
        "href": "java/time/Period.html"
    },
    {
        "name": "Permission",
        "constructors": [],
        "methods": [],
        "href": "java/security/acl/Permission.html"
    },
    {
        "name": "Permission",
        "constructors": [],
        "methods": [],
        "href": "java/security/Permission.html"
    },
    {
        "name": "PermissionCollection",
        "constructors": [],
        "methods": [],
        "href": "java/security/PermissionCollection.html"
    },
    {
        "name": "Permissions",
        "constructors": [],
        "methods": [],
        "href": "java/security/Permissions.html"
    },
    {
        "name": "PERSIST_STORE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PERSIST_STORE.html"
    },
    {
        "name": "PersistenceDelegate",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PersistenceDelegate.html"
    },
    {
        "name": "PersistentMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/PersistentMBean.html"
    },
    {
        "name": "PGPData",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/PGPData.html"
    },
    {
        "name": "PhantomReference",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ref/PhantomReference.html"
    },
    {
        "name": "Phaser",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Phaser.html"
    },
    {
        "name": "Pipe",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/Pipe.html"
    },
    {
        "name": "Pipe.SinkChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/Pipe.SinkChannel.html"
    },
    {
        "name": "Pipe.SourceChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/Pipe.SourceChannel.html"
    },
    {
        "name": "PipedInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/PipedInputStream.html"
    },
    {
        "name": "PipedOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/PipedOutputStream.html"
    },
    {
        "name": "PipedReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/PipedReader.html"
    },
    {
        "name": "PipedWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/PipedWriter.html"
    },
    {
        "name": "PixelGrabber",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/PixelGrabber.html"
    },
    {
        "name": "PixelInterleavedSampleModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/PixelInterleavedSampleModel.html"
    },
    {
        "name": "PKCS12Attribute",
        "constructors": [],
        "methods": [],
        "href": "java/security/PKCS12Attribute.html"
    },
    {
        "name": "PKCS8EncodedKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/PKCS8EncodedKeySpec.html"
    },
    {
        "name": "PKIXBuilderParameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXBuilderParameters.html"
    },
    {
        "name": "PKIXCertPathBuilderResult",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXCertPathBuilderResult.html"
    },
    {
        "name": "PKIXCertPathChecker",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXCertPathChecker.html"
    },
    {
        "name": "PKIXCertPathValidatorResult",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXCertPathValidatorResult.html"
    },
    {
        "name": "PKIXParameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXParameters.html"
    },
    {
        "name": "PKIXReason",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXReason.html"
    },
    {
        "name": "PKIXRevocationChecker",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXRevocationChecker.html"
    },
    {
        "name": "PKIXRevocationChecker.Option",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PKIXRevocationChecker.Option.html"
    },
    {
        "name": "PlainDocument",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/PlainDocument.html"
    },
    {
        "name": "PlainView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/PlainView.html"
    },
    {
        "name": "PlatformLoggingMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/PlatformLoggingMXBean.html"
    },
    {
        "name": "PlatformManagedObject",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/PlatformManagedObject.html"
    },
    {
        "name": "POA",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POA.html"
    },
    {
        "name": "POAHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAHelper.html"
    },
    {
        "name": "POAManager",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAManager.html"
    },
    {
        "name": "POAManagerOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAManagerOperations.html"
    },
    {
        "name": "POAOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAOperations.html"
    },
    {
        "name": "Point",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Point.html"
    },
    {
        "name": "Point2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Point2D.html"
    },
    {
        "name": "Point2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Point2D.Double.html"
    },
    {
        "name": "Point2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Point2D.Float.html"
    },
    {
        "name": "PointerInfo",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PointerInfo.html"
    },
    {
        "name": "Policy",
        "constructors": [],
        "methods": [],
        "href": "java/security/Policy.html"
    },
    {
        "name": "Policy",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/Policy.html"
    },
    {
        "name": "Policy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Policy.html"
    },
    {
        "name": "Policy.Parameters",
        "constructors": [],
        "methods": [],
        "href": "java/security/Policy.Parameters.html"
    },
    {
        "name": "PolicyError",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyError.html"
    },
    {
        "name": "PolicyErrorCodeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyErrorCodeHelper.html"
    },
    {
        "name": "PolicyErrorHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyErrorHelper.html"
    },
    {
        "name": "PolicyErrorHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyErrorHolder.html"
    },
    {
        "name": "PolicyFactory",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/PolicyFactory.html"
    },
    {
        "name": "PolicyFactoryOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/PolicyFactoryOperations.html"
    },
    {
        "name": "PolicyHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyHelper.html"
    },
    {
        "name": "PolicyHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyHolder.html"
    },
    {
        "name": "PolicyListHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyListHelper.html"
    },
    {
        "name": "PolicyListHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyListHolder.html"
    },
    {
        "name": "PolicyNode",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PolicyNode.html"
    },
    {
        "name": "PolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyOperations.html"
    },
    {
        "name": "PolicyQualifierInfo",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/PolicyQualifierInfo.html"
    },
    {
        "name": "PolicySpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/PolicySpi.html"
    },
    {
        "name": "PolicyTypeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PolicyTypeHelper.html"
    },
    {
        "name": "Polygon",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Polygon.html"
    },
    {
        "name": "PooledConnection",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/PooledConnection.html"
    },
    {
        "name": "Popup",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Popup.html"
    },
    {
        "name": "PopupFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/PopupFactory.html"
    },
    {
        "name": "PopupMenu",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PopupMenu.html"
    },
    {
        "name": "PopupMenuEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/PopupMenuEvent.html"
    },
    {
        "name": "PopupMenuListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/PopupMenuListener.html"
    },
    {
        "name": "PopupMenuUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/PopupMenuUI.html"
    },
    {
        "name": "Port",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Port.html"
    },
    {
        "name": "Port.Info",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/Port.Info.html"
    },
    {
        "name": "PortableRemoteObject",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/PortableRemoteObject.html"
    },
    {
        "name": "PortableRemoteObjectDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/PortableRemoteObjectDelegate.html"
    },
    {
        "name": "PortInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/PortInfo.html"
    },
    {
        "name": "PortUnreachableException",
        "constructors": [],
        "methods": [],
        "href": "java/net/PortUnreachableException.html"
    },
    {
        "name": "Position",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Position.html"
    },
    {
        "name": "Position.Bias",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Position.Bias.html"
    },
    {
        "name": "PosixFileAttributes",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/PosixFileAttributes.html"
    },
    {
        "name": "PosixFileAttributeView",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/PosixFileAttributeView.html"
    },
    {
        "name": "PosixFilePermission",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/PosixFilePermission.html"
    },
    {
        "name": "PosixFilePermissions",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/PosixFilePermissions.html"
    },
    {
        "name": "PostConstruct",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/PostConstruct.html"
    },
    {
        "name": "PreDestroy",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/PreDestroy.html"
    },
    {
        "name": "Predicate",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/Predicate.html"
    },
    {
        "name": "Predicate",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/Predicate.html"
    },
    {
        "name": "PreferenceChangeEvent",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/PreferenceChangeEvent.html"
    },
    {
        "name": "PreferenceChangeListener",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/PreferenceChangeListener.html"
    },
    {
        "name": "Preferences",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/Preferences.html"
    },
    {
        "name": "PreferencesFactory",
        "constructors": [],
        "methods": [],
        "href": "java/util/prefs/PreferencesFactory.html"
    },
    {
        "name": "PreparedStatement",
        "constructors": [],
        "methods": [],
        "href": "java/sql/PreparedStatement.html"
    },
    {
        "name": "PresentationDirection",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PresentationDirection.html"
    },
    {
        "name": "PrimitiveIterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/PrimitiveIterator.html"
    },
    {
        "name": "PrimitiveIterator.OfDouble",
        "constructors": [],
        "methods": [],
        "href": "java/util/PrimitiveIterator.OfDouble.html"
    },
    {
        "name": "PrimitiveIterator.OfInt",
        "constructors": [],
        "methods": [],
        "href": "java/util/PrimitiveIterator.OfInt.html"
    },
    {
        "name": "PrimitiveIterator.OfLong",
        "constructors": [],
        "methods": [],
        "href": "java/util/PrimitiveIterator.OfLong.html"
    },
    {
        "name": "PrimitiveType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/PrimitiveType.html"
    },
    {
        "name": "Principal",
        "constructors": [],
        "methods": [],
        "href": "java/security/Principal.html"
    },
    {
        "name": "Principal",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Principal.html"
    },
    {
        "name": "PrincipalHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PrincipalHolder.html"
    },
    {
        "name": "Printable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/Printable.html"
    },
    {
        "name": "PrintConversionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/PrintConversionEvent.html"
    },
    {
        "name": "PrintConversionEventImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/helpers/PrintConversionEventImpl.html"
    },
    {
        "name": "PrinterAbortException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/PrinterAbortException.html"
    },
    {
        "name": "PrinterException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/PrinterException.html"
    },
    {
        "name": "PrinterGraphics",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/PrinterGraphics.html"
    },
    {
        "name": "PrinterInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterInfo.html"
    },
    {
        "name": "PrinterIOException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/PrinterIOException.html"
    },
    {
        "name": "PrinterIsAcceptingJobs",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterIsAcceptingJobs.html"
    },
    {
        "name": "PrinterJob",
        "constructors": [],
        "methods": [],
        "href": "java/awt/print/PrinterJob.html"
    },
    {
        "name": "PrinterLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterLocation.html"
    },
    {
        "name": "PrinterMakeAndModel",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterMakeAndModel.html"
    },
    {
        "name": "PrinterMessageFromOperator",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterMessageFromOperator.html"
    },
    {
        "name": "PrinterMoreInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterMoreInfo.html"
    },
    {
        "name": "PrinterMoreInfoManufacturer",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterMoreInfoManufacturer.html"
    },
    {
        "name": "PrinterName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterName.html"
    },
    {
        "name": "PrinterResolution",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterResolution.html"
    },
    {
        "name": "PrinterState",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterState.html"
    },
    {
        "name": "PrinterStateReason",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterStateReason.html"
    },
    {
        "name": "PrinterStateReasons",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterStateReasons.html"
    },
    {
        "name": "PrinterURI",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrinterURI.html"
    },
    {
        "name": "PrintEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintEvent.html"
    },
    {
        "name": "PrintException",
        "constructors": [],
        "methods": [],
        "href": "javax/print/PrintException.html"
    },
    {
        "name": "PrintGraphics",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PrintGraphics.html"
    },
    {
        "name": "PrintJob",
        "constructors": [],
        "methods": [],
        "href": "java/awt/PrintJob.html"
    },
    {
        "name": "PrintJobAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintJobAdapter.html"
    },
    {
        "name": "PrintJobAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/PrintJobAttribute.html"
    },
    {
        "name": "PrintJobAttributeEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintJobAttributeEvent.html"
    },
    {
        "name": "PrintJobAttributeListener",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintJobAttributeListener.html"
    },
    {
        "name": "PrintJobAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/PrintJobAttributeSet.html"
    },
    {
        "name": "PrintJobEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintJobEvent.html"
    },
    {
        "name": "PrintJobListener",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintJobListener.html"
    },
    {
        "name": "PrintQuality",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/PrintQuality.html"
    },
    {
        "name": "PrintRequestAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/PrintRequestAttribute.html"
    },
    {
        "name": "PrintRequestAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/PrintRequestAttributeSet.html"
    },
    {
        "name": "PrintService",
        "constructors": [],
        "methods": [],
        "href": "javax/print/PrintService.html"
    },
    {
        "name": "PrintServiceAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/PrintServiceAttribute.html"
    },
    {
        "name": "PrintServiceAttributeEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintServiceAttributeEvent.html"
    },
    {
        "name": "PrintServiceAttributeListener",
        "constructors": [],
        "methods": [],
        "href": "javax/print/event/PrintServiceAttributeListener.html"
    },
    {
        "name": "PrintServiceAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/PrintServiceAttributeSet.html"
    },
    {
        "name": "PrintServiceLookup",
        "constructors": [],
        "methods": [],
        "href": "javax/print/PrintServiceLookup.html"
    },
    {
        "name": "PrintStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/PrintStream.html"
    },
    {
        "name": "PrintWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/PrintWriter.html"
    },
    {
        "name": "PriorityBlockingQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/PriorityBlockingQueue.html"
    },
    {
        "name": "PriorityQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/PriorityQueue.html"
    },
    {
        "name": "PRIVATE_MEMBER",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PRIVATE_MEMBER.html"
    },
    {
        "name": "PrivateClassLoader",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/PrivateClassLoader.html"
    },
    {
        "name": "PrivateCredentialPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/PrivateCredentialPermission.html"
    },
    {
        "name": "PrivateKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/PrivateKey.html"
    },
    {
        "name": "PrivateMLet",
        "constructors": [],
        "methods": [],
        "href": "javax/management/loading/PrivateMLet.html"
    },
    {
        "name": "PrivilegedAction",
        "constructors": [],
        "methods": [],
        "href": "java/security/PrivilegedAction.html"
    },
    {
        "name": "PrivilegedActionException",
        "constructors": [],
        "methods": [],
        "href": "java/security/PrivilegedActionException.html"
    },
    {
        "name": "PrivilegedExceptionAction",
        "constructors": [],
        "methods": [],
        "href": "java/security/PrivilegedExceptionAction.html"
    },
    {
        "name": "Process",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Process.html"
    },
    {
        "name": "ProcessBuilder",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ProcessBuilder.html"
    },
    {
        "name": "ProcessBuilder.Redirect",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ProcessBuilder.Redirect.html"
    },
    {
        "name": "ProcessBuilder.Redirect.Type",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ProcessBuilder.Redirect.Type.html"
    },
    {
        "name": "ProcessingEnvironment",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/ProcessingEnvironment.html"
    },
    {
        "name": "ProcessingInstruction",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/ProcessingInstruction.html"
    },
    {
        "name": "ProcessingInstruction",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/ProcessingInstruction.html"
    },
    {
        "name": "Processor",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/Processor.html"
    },
    {
        "name": "ProfileDataException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/color/ProfileDataException.html"
    },
    {
        "name": "ProfileIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ProfileIdHelper.html"
    },
    {
        "name": "ProgressBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ProgressBarUI.html"
    },
    {
        "name": "ProgressMonitor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ProgressMonitor.html"
    },
    {
        "name": "ProgressMonitorInputStream",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ProgressMonitorInputStream.html"
    },
    {
        "name": "Properties",
        "constructors": [],
        "methods": [],
        "href": "java/util/Properties.html"
    },
    {
        "name": "PropertyChangeEvent",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyChangeEvent.html"
    },
    {
        "name": "PropertyChangeListener",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyChangeListener.html"
    },
    {
        "name": "PropertyChangeListenerProxy",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyChangeListenerProxy.html"
    },
    {
        "name": "PropertyChangeSupport",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyChangeSupport.html"
    },
    {
        "name": "PropertyDescriptor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyDescriptor.html"
    },
    {
        "name": "PropertyEditor",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyEditor.html"
    },
    {
        "name": "PropertyEditorManager",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyEditorManager.html"
    },
    {
        "name": "PropertyEditorSupport",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyEditorSupport.html"
    },
    {
        "name": "PropertyException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/PropertyException.html"
    },
    {
        "name": "PropertyPermission",
        "constructors": [],
        "methods": [],
        "href": "java/util/PropertyPermission.html"
    },
    {
        "name": "PropertyResourceBundle",
        "constructors": [],
        "methods": [],
        "href": "java/util/PropertyResourceBundle.html"
    },
    {
        "name": "PropertyVetoException",
        "constructors": [],
        "methods": [],
        "href": "java/beans/PropertyVetoException.html"
    },
    {
        "name": "ProtectionDomain",
        "constructors": [],
        "methods": [],
        "href": "java/security/ProtectionDomain.html"
    },
    {
        "name": "ProtocolException",
        "constructors": [],
        "methods": [],
        "href": "java/net/ProtocolException.html"
    },
    {
        "name": "ProtocolException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/ProtocolException.html"
    },
    {
        "name": "ProtocolFamily",
        "constructors": [],
        "methods": [],
        "href": "java/net/ProtocolFamily.html"
    },
    {
        "name": "Provider",
        "constructors": [],
        "methods": [],
        "href": "java/security/Provider.html"
    },
    {
        "name": "Provider",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Provider.html"
    },
    {
        "name": "Provider",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/Provider.html"
    },
    {
        "name": "Provider.Service",
        "constructors": [],
        "methods": [],
        "href": "java/security/Provider.Service.html"
    },
    {
        "name": "ProviderException",
        "constructors": [],
        "methods": [],
        "href": "java/security/ProviderException.html"
    },
    {
        "name": "ProviderMismatchException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/ProviderMismatchException.html"
    },
    {
        "name": "ProviderNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/ProviderNotFoundException.html"
    },
    {
        "name": "Proxy",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Proxy.html"
    },
    {
        "name": "Proxy",
        "constructors": [],
        "methods": [],
        "href": "java/net/Proxy.html"
    },
    {
        "name": "Proxy.Type",
        "constructors": [],
        "methods": [],
        "href": "java/net/Proxy.Type.html"
    },
    {
        "name": "ProxySelector",
        "constructors": [],
        "methods": [],
        "href": "java/net/ProxySelector.html"
    },
    {
        "name": "PseudoColumnUsage",
        "constructors": [],
        "methods": [],
        "href": "java/sql/PseudoColumnUsage.html"
    },
    {
        "name": "PSource",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/PSource.html"
    },
    {
        "name": "PSource.PSpecified",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/PSource.PSpecified.html"
    },
    {
        "name": "PSSParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/PSSParameterSpec.html"
    },
    {
        "name": "PUBLIC_MEMBER",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/PUBLIC_MEMBER.html"
    },
    {
        "name": "PublicKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/PublicKey.html"
    },
    {
        "name": "PushbackInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/PushbackInputStream.html"
    },
    {
        "name": "PushbackReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/PushbackReader.html"
    },
    {
        "name": "QName",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/namespace/QName.html"
    },
    {
        "name": "QuadCurve2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/QuadCurve2D.html"
    },
    {
        "name": "QuadCurve2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/QuadCurve2D.Double.html"
    },
    {
        "name": "QuadCurve2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/QuadCurve2D.Float.html"
    },
    {
        "name": "QualifiedNameable",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/QualifiedNameable.html"
    },
    {
        "name": "Query",
        "constructors": [],
        "methods": [],
        "href": "javax/management/Query.html"
    },
    {
        "name": "QueryEval",
        "constructors": [],
        "methods": [],
        "href": "javax/management/QueryEval.html"
    },
    {
        "name": "QueryExp",
        "constructors": [],
        "methods": [],
        "href": "javax/management/QueryExp.html"
    },
    {
        "name": "Queue",
        "constructors": [],
        "methods": [],
        "href": "java/util/Queue.html"
    },
    {
        "name": "QueuedJobCount",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/QueuedJobCount.html"
    },
    {
        "name": "RadialGradientPaint",
        "constructors": [],
        "methods": [],
        "href": "java/awt/RadialGradientPaint.html"
    },
    {
        "name": "Random",
        "constructors": [],
        "methods": [],
        "href": "java/util/Random.html"
    },
    {
        "name": "RandomAccess",
        "constructors": [],
        "methods": [],
        "href": "java/util/RandomAccess.html"
    },
    {
        "name": "RandomAccessFile",
        "constructors": [],
        "methods": [],
        "href": "java/io/RandomAccessFile.html"
    },
    {
        "name": "Raster",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/Raster.html"
    },
    {
        "name": "RasterFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/RasterFormatException.html"
    },
    {
        "name": "RasterOp",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/RasterOp.html"
    },
    {
        "name": "RC2ParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/RC2ParameterSpec.html"
    },
    {
        "name": "RC5ParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/RC5ParameterSpec.html"
    },
    {
        "name": "Rdn",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/Rdn.html"
    },
    {
        "name": "Readable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Readable.html"
    },
    {
        "name": "ReadableByteChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ReadableByteChannel.html"
    },
    {
        "name": "Reader",
        "constructors": [],
        "methods": [],
        "href": "java/io/Reader.html"
    },
    {
        "name": "ReadOnlyBufferException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/ReadOnlyBufferException.html"
    },
    {
        "name": "ReadOnlyFileSystemException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/ReadOnlyFileSystemException.html"
    },
    {
        "name": "ReadPendingException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ReadPendingException.html"
    },
    {
        "name": "ReadWriteLock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/ReadWriteLock.html"
    },
    {
        "name": "RealmCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/RealmCallback.html"
    },
    {
        "name": "RealmChoiceCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/RealmChoiceCallback.html"
    },
    {
        "name": "REBIND",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/REBIND.html"
    },
    {
        "name": "Receiver",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Receiver.html"
    },
    {
        "name": "Rectangle",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Rectangle.html"
    },
    {
        "name": "Rectangle2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Rectangle2D.html"
    },
    {
        "name": "Rectangle2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Rectangle2D.Double.html"
    },
    {
        "name": "Rectangle2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/Rectangle2D.Float.html"
    },
    {
        "name": "RectangularShape",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/RectangularShape.html"
    },
    {
        "name": "RecursiveAction",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/RecursiveAction.html"
    },
    {
        "name": "RecursiveTask",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/RecursiveTask.html"
    },
    {
        "name": "ReentrantLock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/ReentrantLock.html"
    },
    {
        "name": "ReentrantReadWriteLock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/ReentrantReadWriteLock.html"
    },
    {
        "name": "ReentrantReadWriteLock.ReadLock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html"
    },
    {
        "name": "ReentrantReadWriteLock.WriteLock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html"
    },
    {
        "name": "Ref",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Ref.html"
    },
    {
        "name": "RefAddr",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/RefAddr.html"
    },
    {
        "name": "Reference",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ref/Reference.html"
    },
    {
        "name": "Reference",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/Reference.html"
    },
    {
        "name": "Reference",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/Reference.html"
    },
    {
        "name": "Referenceable",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/Referenceable.html"
    },
    {
        "name": "ReferenceQueue",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ref/ReferenceQueue.html"
    },
    {
        "name": "ReferenceType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/ReferenceType.html"
    },
    {
        "name": "ReferenceUriSchemesSupported",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/ReferenceUriSchemesSupported.html"
    },
    {
        "name": "ReferralException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ReferralException.html"
    },
    {
        "name": "ReflectionException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ReflectionException.html"
    },
    {
        "name": "ReflectiveOperationException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ReflectiveOperationException.html"
    },
    {
        "name": "ReflectPermission",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/ReflectPermission.html"
    },
    {
        "name": "Refreshable",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/Refreshable.html"
    },
    {
        "name": "RefreshFailedException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/RefreshFailedException.html"
    },
    {
        "name": "Region",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/Region.html"
    },
    {
        "name": "RegisterableService",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/RegisterableService.html"
    },
    {
        "name": "Registry",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/registry/Registry.html"
    },
    {
        "name": "RegistryHandler",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/registry/RegistryHandler.html"
    },
    {
        "name": "RejectedExecutionException",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/RejectedExecutionException.html"
    },
    {
        "name": "RejectedExecutionHandler",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/RejectedExecutionHandler.html"
    },
    {
        "name": "Relation",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/Relation.html"
    },
    {
        "name": "RelationException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationException.html"
    },
    {
        "name": "RelationNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationNotFoundException.html"
    },
    {
        "name": "RelationNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationNotification.html"
    },
    {
        "name": "RelationService",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationService.html"
    },
    {
        "name": "RelationServiceMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationServiceMBean.html"
    },
    {
        "name": "RelationServiceNotRegisteredException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationServiceNotRegisteredException.html"
    },
    {
        "name": "RelationSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationSupport.html"
    },
    {
        "name": "RelationSupportMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationSupportMBean.html"
    },
    {
        "name": "RelationType",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationType.html"
    },
    {
        "name": "RelationTypeNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationTypeNotFoundException.html"
    },
    {
        "name": "RelationTypeSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RelationTypeSupport.html"
    },
    {
        "name": "RemarshalException",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/RemarshalException.html"
    },
    {
        "name": "Remote",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/Remote.html"
    },
    {
        "name": "RemoteCall",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RemoteCall.html"
    },
    {
        "name": "RemoteException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/RemoteException.html"
    },
    {
        "name": "RemoteObject",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RemoteObject.html"
    },
    {
        "name": "RemoteObjectInvocationHandler",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RemoteObjectInvocationHandler.html"
    },
    {
        "name": "RemoteRef",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RemoteRef.html"
    },
    {
        "name": "RemoteServer",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RemoteServer.html"
    },
    {
        "name": "RemoteStub",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RemoteStub.html"
    },
    {
        "name": "RenderableImage",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/RenderableImage.html"
    },
    {
        "name": "RenderableImageOp",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/RenderableImageOp.html"
    },
    {
        "name": "RenderableImageProducer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/RenderableImageProducer.html"
    },
    {
        "name": "RenderContext",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/RenderContext.html"
    },
    {
        "name": "RenderedImage",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/RenderedImage.html"
    },
    {
        "name": "RenderedImageFactory",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/renderable/RenderedImageFactory.html"
    },
    {
        "name": "Renderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Renderer.html"
    },
    {
        "name": "RenderingHints",
        "constructors": [],
        "methods": [],
        "href": "java/awt/RenderingHints.html"
    },
    {
        "name": "RenderingHints.Key",
        "constructors": [],
        "methods": [],
        "href": "java/awt/RenderingHints.Key.html"
    },
    {
        "name": "RepaintManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RepaintManager.html"
    },
    {
        "name": "Repeatable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/Repeatable.html"
    },
    {
        "name": "ReplicateScaleFilter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ReplicateScaleFilter.html"
    },
    {
        "name": "RepositoryIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/RepositoryIdHelper.html"
    },
    {
        "name": "Request",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/Request.html"
    },
    {
        "name": "REQUEST_PROCESSING_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/REQUEST_PROCESSING_POLICY_ID.html"
    },
    {
        "name": "RequestInfo",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/RequestInfo.html"
    },
    {
        "name": "RequestInfoOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/RequestInfoOperations.html"
    },
    {
        "name": "RequestingUserName",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/RequestingUserName.html"
    },
    {
        "name": "RequestProcessingPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/RequestProcessingPolicy.html"
    },
    {
        "name": "RequestProcessingPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/RequestProcessingPolicyOperations.html"
    },
    {
        "name": "RequestProcessingPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/RequestProcessingPolicyValue.html"
    },
    {
        "name": "RequestWrapper",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/RequestWrapper.html"
    },
    {
        "name": "RequiredModelMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/RequiredModelMBean.html"
    },
    {
        "name": "RescaleOp",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/RescaleOp.html"
    },
    {
        "name": "ResolutionSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/ResolutionSyntax.html"
    },
    {
        "name": "Resolver",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/Resolver.html"
    },
    {
        "name": "ResolveResult",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/ResolveResult.html"
    },
    {
        "name": "ResolverStyle",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/ResolverStyle.html"
    },
    {
        "name": "Resource",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/Resource.html"
    },
    {
        "name": "Resource.AuthenticationType",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/Resource.AuthenticationType.html"
    },
    {
        "name": "ResourceBundle",
        "constructors": [],
        "methods": [],
        "href": "java/util/ResourceBundle.html"
    },
    {
        "name": "ResourceBundle.Control",
        "constructors": [],
        "methods": [],
        "href": "java/util/ResourceBundle.Control.html"
    },
    {
        "name": "ResourceBundleControlProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/ResourceBundleControlProvider.html"
    },
    {
        "name": "Resources",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/Resources.html"
    },
    {
        "name": "RespectBinding",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/RespectBinding.html"
    },
    {
        "name": "RespectBindingFeature",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/RespectBindingFeature.html"
    },
    {
        "name": "Response",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Response.html"
    },
    {
        "name": "ResponseCache",
        "constructors": [],
        "methods": [],
        "href": "java/net/ResponseCache.html"
    },
    {
        "name": "ResponseHandler",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ResponseHandler.html"
    },
    {
        "name": "ResponseWrapper",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/ResponseWrapper.html"
    },
    {
        "name": "Result",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/Result.html"
    },
    {
        "name": "ResultSet",
        "constructors": [],
        "methods": [],
        "href": "java/sql/ResultSet.html"
    },
    {
        "name": "ResultSetMetaData",
        "constructors": [],
        "methods": [],
        "href": "java/sql/ResultSetMetaData.html"
    },
    {
        "name": "Retention",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/Retention.html"
    },
    {
        "name": "RetentionPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/RetentionPolicy.html"
    },
    {
        "name": "RetrievalMethod",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/RetrievalMethod.html"
    },
    {
        "name": "ReverbType",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/ReverbType.html"
    },
    {
        "name": "RGBImageFilter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/RGBImageFilter.html"
    },
    {
        "name": "RMIClassLoader",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RMIClassLoader.html"
    },
    {
        "name": "RMIClassLoaderSpi",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RMIClassLoaderSpi.html"
    },
    {
        "name": "RMIClientSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RMIClientSocketFactory.html"
    },
    {
        "name": "RMIConnection",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIConnection.html"
    },
    {
        "name": "RMIConnectionImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIConnectionImpl.html"
    },
    {
        "name": "RMIConnectionImpl_Stub",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIConnectionImpl_Stub.html"
    },
    {
        "name": "RMIConnector",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIConnector.html"
    },
    {
        "name": "RMIConnectorServer",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIConnectorServer.html"
    },
    {
        "name": "RMICustomMaxStreamFormat",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/RMICustomMaxStreamFormat.html"
    },
    {
        "name": "RMIFailureHandler",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RMIFailureHandler.html"
    },
    {
        "name": "RMIIIOPServerImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIIIOPServerImpl.html"
    },
    {
        "name": "RMIJRMPServerImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIJRMPServerImpl.html"
    },
    {
        "name": "RMISecurityException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/RMISecurityException.html"
    },
    {
        "name": "RMISecurityManager",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/RMISecurityManager.html"
    },
    {
        "name": "RMIServer",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIServer.html"
    },
    {
        "name": "RMIServerImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIServerImpl.html"
    },
    {
        "name": "RMIServerImpl_Stub",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/rmi/RMIServerImpl_Stub.html"
    },
    {
        "name": "RMIServerSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RMIServerSocketFactory.html"
    },
    {
        "name": "RMISocketFactory",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/RMISocketFactory.html"
    },
    {
        "name": "Robot",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Robot.html"
    },
    {
        "name": "Role",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/Role.html"
    },
    {
        "name": "RoleInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleInfo.html"
    },
    {
        "name": "RoleInfoNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleInfoNotFoundException.html"
    },
    {
        "name": "RoleList",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleList.html"
    },
    {
        "name": "RoleNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleNotFoundException.html"
    },
    {
        "name": "RoleResult",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleResult.html"
    },
    {
        "name": "RoleStatus",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleStatus.html"
    },
    {
        "name": "RoleUnresolved",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleUnresolved.html"
    },
    {
        "name": "RoleUnresolvedList",
        "constructors": [],
        "methods": [],
        "href": "javax/management/relation/RoleUnresolvedList.html"
    },
    {
        "name": "RootPaneContainer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RootPaneContainer.html"
    },
    {
        "name": "RootPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/RootPaneUI.html"
    },
    {
        "name": "RoundEnvironment",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/RoundEnvironment.html"
    },
    {
        "name": "RoundingMode",
        "constructors": [],
        "methods": [],
        "href": "java/math/RoundingMode.html"
    },
    {
        "name": "RoundRectangle2D",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/RoundRectangle2D.html"
    },
    {
        "name": "RoundRectangle2D.Double",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/RoundRectangle2D.Double.html"
    },
    {
        "name": "RoundRectangle2D.Float",
        "constructors": [],
        "methods": [],
        "href": "java/awt/geom/RoundRectangle2D.Float.html"
    },
    {
        "name": "RowFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RowFilter.html"
    },
    {
        "name": "RowFilter.ComparisonType",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RowFilter.ComparisonType.html"
    },
    {
        "name": "RowFilter.Entry",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RowFilter.Entry.html"
    },
    {
        "name": "RowId",
        "constructors": [],
        "methods": [],
        "href": "java/sql/RowId.html"
    },
    {
        "name": "RowIdLifetime",
        "constructors": [],
        "methods": [],
        "href": "java/sql/RowIdLifetime.html"
    },
    {
        "name": "RowMapper",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/RowMapper.html"
    },
    {
        "name": "RowSet",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSet.html"
    },
    {
        "name": "RowSetEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSetEvent.html"
    },
    {
        "name": "RowSetFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/RowSetFactory.html"
    },
    {
        "name": "RowSetInternal",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSetInternal.html"
    },
    {
        "name": "RowSetListener",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSetListener.html"
    },
    {
        "name": "RowSetMetaData",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSetMetaData.html"
    },
    {
        "name": "RowSetMetaDataImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/RowSetMetaDataImpl.html"
    },
    {
        "name": "RowSetProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/RowSetProvider.html"
    },
    {
        "name": "RowSetReader",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSetReader.html"
    },
    {
        "name": "RowSetWarning",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/RowSetWarning.html"
    },
    {
        "name": "RowSetWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/RowSetWriter.html"
    },
    {
        "name": "RowSorter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RowSorter.html"
    },
    {
        "name": "RowSorter.SortKey",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/RowSorter.SortKey.html"
    },
    {
        "name": "RowSorterEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/RowSorterEvent.html"
    },
    {
        "name": "RowSorterEvent.Type",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/RowSorterEvent.Type.html"
    },
    {
        "name": "RowSorterListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/RowSorterListener.html"
    },
    {
        "name": "RSAKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/RSAKey.html"
    },
    {
        "name": "RSAKeyGenParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/RSAKeyGenParameterSpec.html"
    },
    {
        "name": "RSAMultiPrimePrivateCrtKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/RSAMultiPrimePrivateCrtKey.html"
    },
    {
        "name": "RSAMultiPrimePrivateCrtKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/RSAMultiPrimePrivateCrtKeySpec.html"
    },
    {
        "name": "RSAOtherPrimeInfo",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/RSAOtherPrimeInfo.html"
    },
    {
        "name": "RSAPrivateCrtKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/RSAPrivateCrtKey.html"
    },
    {
        "name": "RSAPrivateCrtKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/RSAPrivateCrtKeySpec.html"
    },
    {
        "name": "RSAPrivateKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/RSAPrivateKey.html"
    },
    {
        "name": "RSAPrivateKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/RSAPrivateKeySpec.html"
    },
    {
        "name": "RSAPublicKey",
        "constructors": [],
        "methods": [],
        "href": "java/security/interfaces/RSAPublicKey.html"
    },
    {
        "name": "RSAPublicKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/RSAPublicKeySpec.html"
    },
    {
        "name": "RTFEditorKit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/rtf/RTFEditorKit.html"
    },
    {
        "name": "RuleBasedCollator",
        "constructors": [],
        "methods": [],
        "href": "java/text/RuleBasedCollator.html"
    },
    {
        "name": "Runnable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Runnable.html"
    },
    {
        "name": "RunnableFuture",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/RunnableFuture.html"
    },
    {
        "name": "RunnableScheduledFuture",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/RunnableScheduledFuture.html"
    },
    {
        "name": "Runtime",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Runtime.html"
    },
    {
        "name": "RunTime",
        "constructors": [],
        "methods": [],
        "href": "org/omg/SendingContext/RunTime.html"
    },
    {
        "name": "RuntimeErrorException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/RuntimeErrorException.html"
    },
    {
        "name": "RuntimeException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/RuntimeException.html"
    },
    {
        "name": "RuntimeMBeanException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/RuntimeMBeanException.html"
    },
    {
        "name": "RuntimeMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/RuntimeMXBean.html"
    },
    {
        "name": "RunTimeOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/SendingContext/RunTimeOperations.html"
    },
    {
        "name": "RuntimeOperationsException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/RuntimeOperationsException.html"
    },
    {
        "name": "RuntimePermission",
        "constructors": [],
        "methods": [],
        "href": "java/lang/RuntimePermission.html"
    },
    {
        "name": "SAAJMetaFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SAAJMetaFactory.html"
    },
    {
        "name": "SAAJResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SAAJResult.html"
    },
    {
        "name": "SafeVarargs",
        "constructors": [],
        "methods": [],
        "href": "java/lang/SafeVarargs.html"
    },
    {
        "name": "SampleModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/SampleModel.html"
    },
    {
        "name": "Sasl",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/Sasl.html"
    },
    {
        "name": "SaslClient",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/SaslClient.html"
    },
    {
        "name": "SaslClientFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/SaslClientFactory.html"
    },
    {
        "name": "SaslException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/SaslException.html"
    },
    {
        "name": "SaslServer",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/SaslServer.html"
    },
    {
        "name": "SaslServerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/security/sasl/SaslServerFactory.html"
    },
    {
        "name": "Savepoint",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Savepoint.html"
    },
    {
        "name": "SAXException",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/SAXException.html"
    },
    {
        "name": "SAXNotRecognizedException",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/SAXNotRecognizedException.html"
    },
    {
        "name": "SAXNotSupportedException",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/SAXNotSupportedException.html"
    },
    {
        "name": "SAXParseException",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/SAXParseException.html"
    },
    {
        "name": "SAXParser",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/parsers/SAXParser.html"
    },
    {
        "name": "SAXParserFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/parsers/SAXParserFactory.html"
    },
    {
        "name": "SAXResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/sax/SAXResult.html"
    },
    {
        "name": "SAXSource",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/sax/SAXSource.html"
    },
    {
        "name": "SAXTransformerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/sax/SAXTransformerFactory.html"
    },
    {
        "name": "Scanner",
        "constructors": [],
        "methods": [],
        "href": "java/util/Scanner.html"
    },
    {
        "name": "ScatteringByteChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ScatteringByteChannel.html"
    },
    {
        "name": "ScheduledExecutorService",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ScheduledExecutorService.html"
    },
    {
        "name": "ScheduledFuture",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ScheduledFuture.html"
    },
    {
        "name": "ScheduledThreadPoolExecutor",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ScheduledThreadPoolExecutor.html"
    },
    {
        "name": "Schema",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/Schema.html"
    },
    {
        "name": "SchemaFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/SchemaFactory.html"
    },
    {
        "name": "SchemaFactoryConfigurationError",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/SchemaFactoryConfigurationError.html"
    },
    {
        "name": "SchemaFactoryLoader",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/SchemaFactoryLoader.html"
    },
    {
        "name": "SchemaOutputResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/SchemaOutputResolver.html"
    },
    {
        "name": "SchemaViolationException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/SchemaViolationException.html"
    },
    {
        "name": "ScriptContext",
        "constructors": [],
        "methods": [],
        "href": "javax/script/ScriptContext.html"
    },
    {
        "name": "ScriptEngine",
        "constructors": [],
        "methods": [],
        "href": "javax/script/ScriptEngine.html"
    },
    {
        "name": "ScriptEngineFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/script/ScriptEngineFactory.html"
    },
    {
        "name": "ScriptEngineManager",
        "constructors": [],
        "methods": [],
        "href": "javax/script/ScriptEngineManager.html"
    },
    {
        "name": "ScriptException",
        "constructors": [],
        "methods": [],
        "href": "javax/script/ScriptException.html"
    },
    {
        "name": "Scrollable",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Scrollable.html"
    },
    {
        "name": "Scrollbar",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Scrollbar.html"
    },
    {
        "name": "ScrollBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ScrollBarUI.html"
    },
    {
        "name": "ScrollPane",
        "constructors": [],
        "methods": [],
        "href": "java/awt/ScrollPane.html"
    },
    {
        "name": "ScrollPaneAdjustable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/ScrollPaneAdjustable.html"
    },
    {
        "name": "ScrollPaneConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ScrollPaneConstants.html"
    },
    {
        "name": "ScrollPaneLayout",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ScrollPaneLayout.html"
    },
    {
        "name": "ScrollPaneLayout.UIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ScrollPaneLayout.UIResource.html"
    },
    {
        "name": "ScrollPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ScrollPaneUI.html"
    },
    {
        "name": "SealedObject",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/SealedObject.html"
    },
    {
        "name": "SearchControls",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/SearchControls.html"
    },
    {
        "name": "SearchResult",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/directory/SearchResult.html"
    },
    {
        "name": "SecondaryLoop",
        "constructors": [],
        "methods": [],
        "href": "java/awt/SecondaryLoop.html"
    },
    {
        "name": "SecretKey",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/SecretKey.html"
    },
    {
        "name": "SecretKeyFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/SecretKeyFactory.html"
    },
    {
        "name": "SecretKeyFactorySpi",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/SecretKeyFactorySpi.html"
    },
    {
        "name": "SecretKeySpec",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/spec/SecretKeySpec.html"
    },
    {
        "name": "SecureCacheResponse",
        "constructors": [],
        "methods": [],
        "href": "java/net/SecureCacheResponse.html"
    },
    {
        "name": "SecureClassLoader",
        "constructors": [],
        "methods": [],
        "href": "java/security/SecureClassLoader.html"
    },
    {
        "name": "SecureDirectoryStream",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/SecureDirectoryStream.html"
    },
    {
        "name": "SecureRandom",
        "constructors": [],
        "methods": [],
        "href": "java/security/SecureRandom.html"
    },
    {
        "name": "SecureRandomSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/SecureRandomSpi.html"
    },
    {
        "name": "Security",
        "constructors": [],
        "methods": [],
        "href": "java/security/Security.html"
    },
    {
        "name": "SecurityException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/SecurityException.html"
    },
    {
        "name": "SecurityManager",
        "constructors": [],
        "methods": [],
        "href": "java/lang/SecurityManager.html"
    },
    {
        "name": "SecurityPermission",
        "constructors": [],
        "methods": [],
        "href": "java/security/SecurityPermission.html"
    },
    {
        "name": "SeekableByteChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/SeekableByteChannel.html"
    },
    {
        "name": "Segment",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Segment.html"
    },
    {
        "name": "SelectableChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/SelectableChannel.html"
    },
    {
        "name": "SelectionKey",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/SelectionKey.html"
    },
    {
        "name": "Selector",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/Selector.html"
    },
    {
        "name": "SelectorProvider",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/spi/SelectorProvider.html"
    },
    {
        "name": "Semaphore",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/Semaphore.html"
    },
    {
        "name": "SeparatorUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/SeparatorUI.html"
    },
    {
        "name": "Sequence",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Sequence.html"
    },
    {
        "name": "SequenceInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/SequenceInputStream.html"
    },
    {
        "name": "Sequencer",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Sequencer.html"
    },
    {
        "name": "Sequencer.SyncMode",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Sequencer.SyncMode.html"
    },
    {
        "name": "SerialArray",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialArray.html"
    },
    {
        "name": "SerialBlob",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialBlob.html"
    },
    {
        "name": "SerialClob",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialClob.html"
    },
    {
        "name": "SerialDatalink",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialDatalink.html"
    },
    {
        "name": "SerialException",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialException.html"
    },
    {
        "name": "Serializable",
        "constructors": [],
        "methods": [],
        "href": "java/io/Serializable.html"
    },
    {
        "name": "SerializablePermission",
        "constructors": [],
        "methods": [],
        "href": "java/io/SerializablePermission.html"
    },
    {
        "name": "SerializedLambda",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/SerializedLambda.html"
    },
    {
        "name": "SerialJavaObject",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialJavaObject.html"
    },
    {
        "name": "SerialRef",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialRef.html"
    },
    {
        "name": "SerialStruct",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SerialStruct.html"
    },
    {
        "name": "Servant",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/Servant.html"
    },
    {
        "name": "SERVANT_RETENTION_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/SERVANT_RETENTION_POLICY_ID.html"
    },
    {
        "name": "ServantActivator",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantActivator.html"
    },
    {
        "name": "ServantActivatorHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantActivatorHelper.html"
    },
    {
        "name": "ServantActivatorOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantActivatorOperations.html"
    },
    {
        "name": "ServantActivatorPOA",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantActivatorPOA.html"
    },
    {
        "name": "ServantAlreadyActive",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ServantAlreadyActive.html"
    },
    {
        "name": "ServantAlreadyActiveHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ServantAlreadyActiveHelper.html"
    },
    {
        "name": "ServantLocator",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantLocator.html"
    },
    {
        "name": "ServantLocatorHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantLocatorHelper.html"
    },
    {
        "name": "ServantLocatorOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantLocatorOperations.html"
    },
    {
        "name": "ServantLocatorPOA",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantLocatorPOA.html"
    },
    {
        "name": "ServantManager",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantManager.html"
    },
    {
        "name": "ServantManagerOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantManagerOperations.html"
    },
    {
        "name": "ServantNotActive",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ServantNotActive.html"
    },
    {
        "name": "ServantNotActiveHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/ServantNotActiveHelper.html"
    },
    {
        "name": "ServantObject",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ServantObject.html"
    },
    {
        "name": "ServantRetentionPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantRetentionPolicy.html"
    },
    {
        "name": "ServantRetentionPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantRetentionPolicyOperations.html"
    },
    {
        "name": "ServantRetentionPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ServantRetentionPolicyValue.html"
    },
    {
        "name": "ServerCloneException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/ServerCloneException.html"
    },
    {
        "name": "ServerError",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/ServerError.html"
    },
    {
        "name": "ServerException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/ServerException.html"
    },
    {
        "name": "ServerIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ServerIdHelper.html"
    },
    {
        "name": "ServerNotActiveException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/ServerNotActiveException.html"
    },
    {
        "name": "ServerRef",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/ServerRef.html"
    },
    {
        "name": "ServerRequest",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ServerRequest.html"
    },
    {
        "name": "ServerRequestInfo",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ServerRequestInfo.html"
    },
    {
        "name": "ServerRequestInfoOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ServerRequestInfoOperations.html"
    },
    {
        "name": "ServerRequestInterceptor",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ServerRequestInterceptor.html"
    },
    {
        "name": "ServerRequestInterceptorOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/ServerRequestInterceptorOperations.html"
    },
    {
        "name": "ServerRuntimeException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/ServerRuntimeException.html"
    },
    {
        "name": "ServerSocket",
        "constructors": [],
        "methods": [],
        "href": "java/net/ServerSocket.html"
    },
    {
        "name": "ServerSocketChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ServerSocketChannel.html"
    },
    {
        "name": "ServerSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ServerSocketFactory.html"
    },
    {
        "name": "Service",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Service.html"
    },
    {
        "name": "Service.Mode",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/Service.Mode.html"
    },
    {
        "name": "ServiceConfigurationError",
        "constructors": [],
        "methods": [],
        "href": "java/util/ServiceConfigurationError.html"
    },
    {
        "name": "ServiceContext",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ServiceContext.html"
    },
    {
        "name": "ServiceContextHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ServiceContextHelper.html"
    },
    {
        "name": "ServiceContextHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ServiceContextHolder.html"
    },
    {
        "name": "ServiceContextListHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ServiceContextListHelper.html"
    },
    {
        "name": "ServiceContextListHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ServiceContextListHolder.html"
    },
    {
        "name": "ServiceDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/ServiceDelegate.html"
    },
    {
        "name": "ServiceDetail",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ServiceDetail.html"
    },
    {
        "name": "ServiceDetailHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ServiceDetailHelper.html"
    },
    {
        "name": "ServiceIdHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/ServiceIdHelper.html"
    },
    {
        "name": "ServiceInformation",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ServiceInformation.html"
    },
    {
        "name": "ServiceInformationHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ServiceInformationHelper.html"
    },
    {
        "name": "ServiceInformationHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ServiceInformationHolder.html"
    },
    {
        "name": "ServiceLoader",
        "constructors": [],
        "methods": [],
        "href": "java/util/ServiceLoader.html"
    },
    {
        "name": "ServiceMode",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/ServiceMode.html"
    },
    {
        "name": "ServiceNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ServiceNotFoundException.html"
    },
    {
        "name": "ServicePermission",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/kerberos/ServicePermission.html"
    },
    {
        "name": "ServiceRegistry",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ServiceRegistry.html"
    },
    {
        "name": "ServiceRegistry.Filter",
        "constructors": [],
        "methods": [],
        "href": "javax/imageio/spi/ServiceRegistry.Filter.html"
    },
    {
        "name": "ServiceUI",
        "constructors": [],
        "methods": [],
        "href": "javax/print/ServiceUI.html"
    },
    {
        "name": "ServiceUIFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/print/ServiceUIFactory.html"
    },
    {
        "name": "ServiceUnavailableException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ServiceUnavailableException.html"
    },
    {
        "name": "Set",
        "constructors": [],
        "methods": [],
        "href": "java/util/Set.html"
    },
    {
        "name": "SetOfIntegerSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/SetOfIntegerSyntax.html"
    },
    {
        "name": "SetOverrideType",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/SetOverrideType.html"
    },
    {
        "name": "SetOverrideTypeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/SetOverrideTypeHelper.html"
    },
    {
        "name": "Severity",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Severity.html"
    },
    {
        "name": "Shape",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Shape.html"
    },
    {
        "name": "ShapeGraphicAttribute",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/ShapeGraphicAttribute.html"
    },
    {
        "name": "SheetCollate",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/SheetCollate.html"
    },
    {
        "name": "Short",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Short.html"
    },
    {
        "name": "ShortBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/nio/ShortBuffer.html"
    },
    {
        "name": "ShortBufferException",
        "constructors": [],
        "methods": [],
        "href": "javax/crypto/ShortBufferException.html"
    },
    {
        "name": "ShortHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ShortHolder.html"
    },
    {
        "name": "ShortLookupTable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/ShortLookupTable.html"
    },
    {
        "name": "ShortMessage",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/ShortMessage.html"
    },
    {
        "name": "ShortSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ShortSeqHelper.html"
    },
    {
        "name": "ShortSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ShortSeqHolder.html"
    },
    {
        "name": "ShutdownChannelGroupException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/ShutdownChannelGroupException.html"
    },
    {
        "name": "Sides",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/standard/Sides.html"
    },
    {
        "name": "Signature",
        "constructors": [],
        "methods": [],
        "href": "java/security/Signature.html"
    },
    {
        "name": "SignatureException",
        "constructors": [],
        "methods": [],
        "href": "java/security/SignatureException.html"
    },
    {
        "name": "SignatureMethod",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/SignatureMethod.html"
    },
    {
        "name": "SignatureMethodParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/SignatureMethodParameterSpec.html"
    },
    {
        "name": "SignatureProperties",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/SignatureProperties.html"
    },
    {
        "name": "SignatureProperty",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/SignatureProperty.html"
    },
    {
        "name": "SignatureSpi",
        "constructors": [],
        "methods": [],
        "href": "java/security/SignatureSpi.html"
    },
    {
        "name": "SignedInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/SignedInfo.html"
    },
    {
        "name": "SignedObject",
        "constructors": [],
        "methods": [],
        "href": "java/security/SignedObject.html"
    },
    {
        "name": "Signer",
        "constructors": [],
        "methods": [],
        "href": "java/security/Signer.html"
    },
    {
        "name": "SignStyle",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/SignStyle.html"
    },
    {
        "name": "SimpleAnnotationValueVisitor6",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleAnnotationValueVisitor6.html"
    },
    {
        "name": "SimpleAnnotationValueVisitor7",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleAnnotationValueVisitor7.html"
    },
    {
        "name": "SimpleAnnotationValueVisitor8",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleAnnotationValueVisitor8.html"
    },
    {
        "name": "SimpleAttributeSet",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/SimpleAttributeSet.html"
    },
    {
        "name": "SimpleBeanInfo",
        "constructors": [],
        "methods": [],
        "href": "java/beans/SimpleBeanInfo.html"
    },
    {
        "name": "SimpleBindings",
        "constructors": [],
        "methods": [],
        "href": "javax/script/SimpleBindings.html"
    },
    {
        "name": "SimpleDateFormat",
        "constructors": [],
        "methods": [],
        "href": "java/text/SimpleDateFormat.html"
    },
    {
        "name": "SimpleDoc",
        "constructors": [],
        "methods": [],
        "href": "javax/print/SimpleDoc.html"
    },
    {
        "name": "SimpleElementVisitor6",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleElementVisitor6.html"
    },
    {
        "name": "SimpleElementVisitor7",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleElementVisitor7.html"
    },
    {
        "name": "SimpleElementVisitor8",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleElementVisitor8.html"
    },
    {
        "name": "SimpleFileVisitor",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/SimpleFileVisitor.html"
    },
    {
        "name": "SimpleFormatter",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/SimpleFormatter.html"
    },
    {
        "name": "SimpleJavaFileObject",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/SimpleJavaFileObject.html"
    },
    {
        "name": "SimpleScriptContext",
        "constructors": [],
        "methods": [],
        "href": "javax/script/SimpleScriptContext.html"
    },
    {
        "name": "SimpleTimeZone",
        "constructors": [],
        "methods": [],
        "href": "java/util/SimpleTimeZone.html"
    },
    {
        "name": "SimpleType",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/SimpleType.html"
    },
    {
        "name": "SimpleTypeVisitor6",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleTypeVisitor6.html"
    },
    {
        "name": "SimpleTypeVisitor7",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleTypeVisitor7.html"
    },
    {
        "name": "SimpleTypeVisitor8",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/SimpleTypeVisitor8.html"
    },
    {
        "name": "SinglePixelPackedSampleModel",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/SinglePixelPackedSampleModel.html"
    },
    {
        "name": "SingleSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SingleSelectionModel.html"
    },
    {
        "name": "Size2DSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/Size2DSyntax.html"
    },
    {
        "name": "SizeLimitExceededException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/SizeLimitExceededException.html"
    },
    {
        "name": "SizeRequirements",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SizeRequirements.html"
    },
    {
        "name": "SizeSequence",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SizeSequence.html"
    },
    {
        "name": "Skeleton",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/Skeleton.html"
    },
    {
        "name": "SkeletonMismatchException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/SkeletonMismatchException.html"
    },
    {
        "name": "SkeletonNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/SkeletonNotFoundException.html"
    },
    {
        "name": "SliderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/SliderUI.html"
    },
    {
        "name": "SNIHostName",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SNIHostName.html"
    },
    {
        "name": "SNIMatcher",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SNIMatcher.html"
    },
    {
        "name": "SNIServerName",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SNIServerName.html"
    },
    {
        "name": "SOAPBinding",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/SOAPBinding.html"
    },
    {
        "name": "SOAPBinding",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/soap/SOAPBinding.html"
    },
    {
        "name": "SOAPBinding.ParameterStyle",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/SOAPBinding.ParameterStyle.html"
    },
    {
        "name": "SOAPBinding.Style",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/SOAPBinding.Style.html"
    },
    {
        "name": "SOAPBinding.Use",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/SOAPBinding.Use.html"
    },
    {
        "name": "SOAPBody",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPBody.html"
    },
    {
        "name": "SOAPBodyElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPBodyElement.html"
    },
    {
        "name": "SOAPConnection",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPConnection.html"
    },
    {
        "name": "SOAPConnectionFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPConnectionFactory.html"
    },
    {
        "name": "SOAPConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPConstants.html"
    },
    {
        "name": "SOAPElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPElement.html"
    },
    {
        "name": "SOAPElementFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPElementFactory.html"
    },
    {
        "name": "SOAPEnvelope",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPEnvelope.html"
    },
    {
        "name": "SOAPException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPException.html"
    },
    {
        "name": "SOAPFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPFactory.html"
    },
    {
        "name": "SOAPFault",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPFault.html"
    },
    {
        "name": "SOAPFaultElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPFaultElement.html"
    },
    {
        "name": "SOAPFaultException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/soap/SOAPFaultException.html"
    },
    {
        "name": "SOAPHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/soap/SOAPHandler.html"
    },
    {
        "name": "SOAPHeader",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPHeader.html"
    },
    {
        "name": "SOAPHeaderElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPHeaderElement.html"
    },
    {
        "name": "SOAPMessage",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPMessage.html"
    },
    {
        "name": "SOAPMessageContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/handler/soap/SOAPMessageContext.html"
    },
    {
        "name": "SOAPMessageHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/SOAPMessageHandler.html"
    },
    {
        "name": "SOAPMessageHandlers",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/soap/SOAPMessageHandlers.html"
    },
    {
        "name": "SOAPPart",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/SOAPPart.html"
    },
    {
        "name": "Socket",
        "constructors": [],
        "methods": [],
        "href": "java/net/Socket.html"
    },
    {
        "name": "SocketAddress",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketAddress.html"
    },
    {
        "name": "SocketChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/SocketChannel.html"
    },
    {
        "name": "SocketException",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketException.html"
    },
    {
        "name": "SocketFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/net/SocketFactory.html"
    },
    {
        "name": "SocketHandler",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/SocketHandler.html"
    },
    {
        "name": "SocketImpl",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketImpl.html"
    },
    {
        "name": "SocketImplFactory",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketImplFactory.html"
    },
    {
        "name": "SocketOption",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketOption.html"
    },
    {
        "name": "SocketOptions",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketOptions.html"
    },
    {
        "name": "SocketPermission",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketPermission.html"
    },
    {
        "name": "SocketSecurityException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/SocketSecurityException.html"
    },
    {
        "name": "SocketTimeoutException",
        "constructors": [],
        "methods": [],
        "href": "java/net/SocketTimeoutException.html"
    },
    {
        "name": "SoftBevelBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/SoftBevelBorder.html"
    },
    {
        "name": "SoftReference",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ref/SoftReference.html"
    },
    {
        "name": "SortControl",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/SortControl.html"
    },
    {
        "name": "SortedMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/SortedMap.html"
    },
    {
        "name": "SortedSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/SortedSet.html"
    },
    {
        "name": "SortingFocusTraversalPolicy",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SortingFocusTraversalPolicy.html"
    },
    {
        "name": "SortKey",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/SortKey.html"
    },
    {
        "name": "SortOrder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SortOrder.html"
    },
    {
        "name": "SortResponseControl",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/SortResponseControl.html"
    },
    {
        "name": "Soundbank",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Soundbank.html"
    },
    {
        "name": "SoundbankReader",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/spi/SoundbankReader.html"
    },
    {
        "name": "SoundbankResource",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/SoundbankResource.html"
    },
    {
        "name": "Source",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/Source.html"
    },
    {
        "name": "SourceDataLine",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/SourceDataLine.html"
    },
    {
        "name": "SourceLocator",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/SourceLocator.html"
    },
    {
        "name": "SourceVersion",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/SourceVersion.html"
    },
    {
        "name": "SpinnerDateModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SpinnerDateModel.html"
    },
    {
        "name": "SpinnerListModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SpinnerListModel.html"
    },
    {
        "name": "SpinnerModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SpinnerModel.html"
    },
    {
        "name": "SpinnerNumberModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SpinnerNumberModel.html"
    },
    {
        "name": "SpinnerUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/SpinnerUI.html"
    },
    {
        "name": "SplashScreen",
        "constructors": [],
        "methods": [],
        "href": "java/awt/SplashScreen.html"
    },
    {
        "name": "Spliterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterator.html"
    },
    {
        "name": "Spliterator.OfDouble",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterator.OfDouble.html"
    },
    {
        "name": "Spliterator.OfInt",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterator.OfInt.html"
    },
    {
        "name": "Spliterator.OfLong",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterator.OfLong.html"
    },
    {
        "name": "Spliterator.OfPrimitive",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterator.OfPrimitive.html"
    },
    {
        "name": "Spliterators",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterators.html"
    },
    {
        "name": "Spliterators.AbstractDoubleSpliterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterators.AbstractDoubleSpliterator.html"
    },
    {
        "name": "Spliterators.AbstractIntSpliterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterators.AbstractIntSpliterator.html"
    },
    {
        "name": "Spliterators.AbstractLongSpliterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterators.AbstractLongSpliterator.html"
    },
    {
        "name": "Spliterators.AbstractSpliterator",
        "constructors": [],
        "methods": [],
        "href": "java/util/Spliterators.AbstractSpliterator.html"
    },
    {
        "name": "SplitPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/SplitPaneUI.html"
    },
    {
        "name": "SplittableRandom",
        "constructors": [],
        "methods": [],
        "href": "java/util/SplittableRandom.html"
    },
    {
        "name": "Spring",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Spring.html"
    },
    {
        "name": "SpringLayout",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SpringLayout.html"
    },
    {
        "name": "SpringLayout.Constraints",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SpringLayout.Constraints.html"
    },
    {
        "name": "SQLClientInfoException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLClientInfoException.html"
    },
    {
        "name": "SQLData",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLData.html"
    },
    {
        "name": "SQLDataException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLDataException.html"
    },
    {
        "name": "SQLException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLException.html"
    },
    {
        "name": "SQLFeatureNotSupportedException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLFeatureNotSupportedException.html"
    },
    {
        "name": "SQLInput",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLInput.html"
    },
    {
        "name": "SQLInputImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SQLInputImpl.html"
    },
    {
        "name": "SQLIntegrityConstraintViolationException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLIntegrityConstraintViolationException.html"
    },
    {
        "name": "SQLInvalidAuthorizationSpecException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLInvalidAuthorizationSpecException.html"
    },
    {
        "name": "SQLNonTransientConnectionException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLNonTransientConnectionException.html"
    },
    {
        "name": "SQLNonTransientException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLNonTransientException.html"
    },
    {
        "name": "SQLOutput",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLOutput.html"
    },
    {
        "name": "SQLOutputImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/serial/SQLOutputImpl.html"
    },
    {
        "name": "SQLPermission",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLPermission.html"
    },
    {
        "name": "SQLRecoverableException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLRecoverableException.html"
    },
    {
        "name": "SQLSyntaxErrorException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLSyntaxErrorException.html"
    },
    {
        "name": "SQLTimeoutException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLTimeoutException.html"
    },
    {
        "name": "SQLTransactionRollbackException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLTransactionRollbackException.html"
    },
    {
        "name": "SQLTransientConnectionException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLTransientConnectionException.html"
    },
    {
        "name": "SQLTransientException",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLTransientException.html"
    },
    {
        "name": "SQLType",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLType.html"
    },
    {
        "name": "SQLWarning",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLWarning.html"
    },
    {
        "name": "SQLXML",
        "constructors": [],
        "methods": [],
        "href": "java/sql/SQLXML.html"
    },
    {
        "name": "SSLContext",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLContext.html"
    },
    {
        "name": "SSLContextSpi",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLContextSpi.html"
    },
    {
        "name": "SSLEngine",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLEngine.html"
    },
    {
        "name": "SSLEngineResult",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLEngineResult.html"
    },
    {
        "name": "SSLEngineResult.HandshakeStatus",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLEngineResult.HandshakeStatus.html"
    },
    {
        "name": "SSLEngineResult.Status",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLEngineResult.Status.html"
    },
    {
        "name": "SSLException",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLException.html"
    },
    {
        "name": "SSLHandshakeException",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLHandshakeException.html"
    },
    {
        "name": "SSLKeyException",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLKeyException.html"
    },
    {
        "name": "SSLParameters",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLParameters.html"
    },
    {
        "name": "SSLPeerUnverifiedException",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLPeerUnverifiedException.html"
    },
    {
        "name": "SSLPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLPermission.html"
    },
    {
        "name": "SSLProtocolException",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLProtocolException.html"
    },
    {
        "name": "SslRMIClientSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/ssl/SslRMIClientSocketFactory.html"
    },
    {
        "name": "SslRMIServerSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/ssl/SslRMIServerSocketFactory.html"
    },
    {
        "name": "SSLServerSocket",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLServerSocket.html"
    },
    {
        "name": "SSLServerSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLServerSocketFactory.html"
    },
    {
        "name": "SSLSession",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLSession.html"
    },
    {
        "name": "SSLSessionBindingEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLSessionBindingEvent.html"
    },
    {
        "name": "SSLSessionBindingListener",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLSessionBindingListener.html"
    },
    {
        "name": "SSLSessionContext",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLSessionContext.html"
    },
    {
        "name": "SSLSocket",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLSocket.html"
    },
    {
        "name": "SSLSocketFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/SSLSocketFactory.html"
    },
    {
        "name": "Stack",
        "constructors": [],
        "methods": [],
        "href": "java/util/Stack.html"
    },
    {
        "name": "StackOverflowError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/StackOverflowError.html"
    },
    {
        "name": "StackTraceElement",
        "constructors": [],
        "methods": [],
        "href": "java/lang/StackTraceElement.html"
    },
    {
        "name": "StampedLock",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/locks/StampedLock.html"
    },
    {
        "name": "StandardCharsets",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/StandardCharsets.html"
    },
    {
        "name": "StandardConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/StandardConstants.html"
    },
    {
        "name": "StandardCopyOption",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/StandardCopyOption.html"
    },
    {
        "name": "StandardEmitterMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/StandardEmitterMBean.html"
    },
    {
        "name": "StandardJavaFileManager",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/StandardJavaFileManager.html"
    },
    {
        "name": "StandardLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/StandardLocation.html"
    },
    {
        "name": "StandardMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/StandardMBean.html"
    },
    {
        "name": "StandardOpenOption",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/StandardOpenOption.html"
    },
    {
        "name": "StandardProtocolFamily",
        "constructors": [],
        "methods": [],
        "href": "java/net/StandardProtocolFamily.html"
    },
    {
        "name": "StandardSocketOptions",
        "constructors": [],
        "methods": [],
        "href": "java/net/StandardSocketOptions.html"
    },
    {
        "name": "StandardWatchEventKinds",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/StandardWatchEventKinds.html"
    },
    {
        "name": "StartDocument",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/StartDocument.html"
    },
    {
        "name": "StartElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/StartElement.html"
    },
    {
        "name": "StartTlsRequest",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/StartTlsRequest.html"
    },
    {
        "name": "StartTlsResponse",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/StartTlsResponse.html"
    },
    {
        "name": "State",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/nimbus/State.html"
    },
    {
        "name": "State",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAManagerPackage/State.html"
    },
    {
        "name": "StateEdit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/StateEdit.html"
    },
    {
        "name": "StateEditable",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/StateEditable.html"
    },
    {
        "name": "StateFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/spi/StateFactory.html"
    },
    {
        "name": "Statement",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Statement.html"
    },
    {
        "name": "Statement",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Statement.html"
    },
    {
        "name": "StatementEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/StatementEvent.html"
    },
    {
        "name": "StatementEventListener",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/StatementEventListener.html"
    },
    {
        "name": "StAXResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/stax/StAXResult.html"
    },
    {
        "name": "StAXSource",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/stax/StAXSource.html"
    },
    {
        "name": "Stream",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/Stream.html"
    },
    {
        "name": "Stream.Builder",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/Stream.Builder.html"
    },
    {
        "name": "Streamable",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/Streamable.html"
    },
    {
        "name": "StreamableValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/StreamableValue.html"
    },
    {
        "name": "StreamCorruptedException",
        "constructors": [],
        "methods": [],
        "href": "java/io/StreamCorruptedException.html"
    },
    {
        "name": "StreamFilter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/StreamFilter.html"
    },
    {
        "name": "StreamHandler",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/StreamHandler.html"
    },
    {
        "name": "StreamPrintService",
        "constructors": [],
        "methods": [],
        "href": "javax/print/StreamPrintService.html"
    },
    {
        "name": "StreamPrintServiceFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/print/StreamPrintServiceFactory.html"
    },
    {
        "name": "StreamReaderDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/util/StreamReaderDelegate.html"
    },
    {
        "name": "StreamResult",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/stream/StreamResult.html"
    },
    {
        "name": "StreamSource",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/stream/StreamSource.html"
    },
    {
        "name": "StreamSupport",
        "constructors": [],
        "methods": [],
        "href": "java/util/stream/StreamSupport.html"
    },
    {
        "name": "StreamTokenizer",
        "constructors": [],
        "methods": [],
        "href": "java/io/StreamTokenizer.html"
    },
    {
        "name": "StrictMath",
        "constructors": [],
        "methods": [],
        "href": "java/lang/StrictMath.html"
    },
    {
        "name": "String",
        "constructors": [],
        "methods": [],
        "href": "java/lang/String.html"
    },
    {
        "name": "StringBuffer",
        "constructors": [],
        "methods": [],
        "href": "java/lang/StringBuffer.html"
    },
    {
        "name": "StringBufferInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/io/StringBufferInputStream.html"
    },
    {
        "name": "StringBuilder",
        "constructors": [],
        "methods": [],
        "href": "java/lang/StringBuilder.html"
    },
    {
        "name": "StringCharacterIterator",
        "constructors": [],
        "methods": [],
        "href": "java/text/StringCharacterIterator.html"
    },
    {
        "name": "StringContent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StringContent.html"
    },
    {
        "name": "StringHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/StringHolder.html"
    },
    {
        "name": "StringIndexOutOfBoundsException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/StringIndexOutOfBoundsException.html"
    },
    {
        "name": "StringJoiner",
        "constructors": [],
        "methods": [],
        "href": "java/util/StringJoiner.html"
    },
    {
        "name": "StringMonitor",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/StringMonitor.html"
    },
    {
        "name": "StringMonitorMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/monitor/StringMonitorMBean.html"
    },
    {
        "name": "StringNameHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtPackage/StringNameHelper.html"
    },
    {
        "name": "StringReader",
        "constructors": [],
        "methods": [],
        "href": "java/io/StringReader.html"
    },
    {
        "name": "StringRefAddr",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/StringRefAddr.html"
    },
    {
        "name": "StringSelection",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/StringSelection.html"
    },
    {
        "name": "StringSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/StringSeqHelper.html"
    },
    {
        "name": "StringSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/StringSeqHolder.html"
    },
    {
        "name": "StringTokenizer",
        "constructors": [],
        "methods": [],
        "href": "java/util/StringTokenizer.html"
    },
    {
        "name": "StringValueExp",
        "constructors": [],
        "methods": [],
        "href": "javax/management/StringValueExp.html"
    },
    {
        "name": "StringValueHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/StringValueHelper.html"
    },
    {
        "name": "StringWriter",
        "constructors": [],
        "methods": [],
        "href": "java/io/StringWriter.html"
    },
    {
        "name": "Stroke",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Stroke.html"
    },
    {
        "name": "StrokeBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/StrokeBorder.html"
    },
    {
        "name": "Struct",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Struct.html"
    },
    {
        "name": "StructMember",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/StructMember.html"
    },
    {
        "name": "StructMemberHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/StructMemberHelper.html"
    },
    {
        "name": "Stub",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/Stub.html"
    },
    {
        "name": "StubDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/StubDelegate.html"
    },
    {
        "name": "StubNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/StubNotFoundException.html"
    },
    {
        "name": "Style",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Style.html"
    },
    {
        "name": "StyleConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyleConstants.html"
    },
    {
        "name": "StyleConstants.CharacterConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyleConstants.CharacterConstants.html"
    },
    {
        "name": "StyleConstants.ColorConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyleConstants.ColorConstants.html"
    },
    {
        "name": "StyleConstants.FontConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyleConstants.FontConstants.html"
    },
    {
        "name": "StyleConstants.ParagraphConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyleConstants.ParagraphConstants.html"
    },
    {
        "name": "StyleContext",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyleContext.html"
    },
    {
        "name": "StyledDocument",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledDocument.html"
    },
    {
        "name": "StyledEditorKit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.html"
    },
    {
        "name": "StyledEditorKit.AlignmentAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.AlignmentAction.html"
    },
    {
        "name": "StyledEditorKit.BoldAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.BoldAction.html"
    },
    {
        "name": "StyledEditorKit.FontFamilyAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.FontFamilyAction.html"
    },
    {
        "name": "StyledEditorKit.FontSizeAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.FontSizeAction.html"
    },
    {
        "name": "StyledEditorKit.ForegroundAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.ForegroundAction.html"
    },
    {
        "name": "StyledEditorKit.ItalicAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.ItalicAction.html"
    },
    {
        "name": "StyledEditorKit.StyledTextAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.StyledTextAction.html"
    },
    {
        "name": "StyledEditorKit.UnderlineAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/StyledEditorKit.UnderlineAction.html"
    },
    {
        "name": "StyleSheet",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/StyleSheet.html"
    },
    {
        "name": "StyleSheet.BoxPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/StyleSheet.BoxPainter.html"
    },
    {
        "name": "StyleSheet.ListPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/StyleSheet.ListPainter.html"
    },
    {
        "name": "Subject",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/Subject.html"
    },
    {
        "name": "SubjectDelegationPermission",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/SubjectDelegationPermission.html"
    },
    {
        "name": "SubjectDomainCombiner",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/SubjectDomainCombiner.html"
    },
    {
        "name": "SUCCESSFUL",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/SUCCESSFUL.html"
    },
    {
        "name": "Supplier",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/Supplier.html"
    },
    {
        "name": "SupportedAnnotationTypes",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/SupportedAnnotationTypes.html"
    },
    {
        "name": "SupportedOptions",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/SupportedOptions.html"
    },
    {
        "name": "SupportedSourceVersion",
        "constructors": [],
        "methods": [],
        "href": "javax/annotation/processing/SupportedSourceVersion.html"
    },
    {
        "name": "SupportedValuesAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/SupportedValuesAttribute.html"
    },
    {
        "name": "SuppressWarnings",
        "constructors": [],
        "methods": [],
        "href": "java/lang/SuppressWarnings.html"
    },
    {
        "name": "SwingConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SwingConstants.html"
    },
    {
        "name": "SwingPropertyChangeSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/SwingPropertyChangeSupport.html"
    },
    {
        "name": "SwingUtilities",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SwingUtilities.html"
    },
    {
        "name": "SwingWorker",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SwingWorker.html"
    },
    {
        "name": "SwingWorker.StateValue",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/SwingWorker.StateValue.html"
    },
    {
        "name": "SwitchPoint",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/SwitchPoint.html"
    },
    {
        "name": "SYNC_WITH_TRANSPORT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/Messaging/SYNC_WITH_TRANSPORT.html"
    },
    {
        "name": "SyncFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/SyncFactory.html"
    },
    {
        "name": "SyncFactoryException",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/SyncFactoryException.html"
    },
    {
        "name": "SyncFailedException",
        "constructors": [],
        "methods": [],
        "href": "java/io/SyncFailedException.html"
    },
    {
        "name": "SynchronousQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/SynchronousQueue.html"
    },
    {
        "name": "SyncProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/SyncProvider.html"
    },
    {
        "name": "SyncProviderException",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/SyncProviderException.html"
    },
    {
        "name": "SyncResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/SyncResolver.html"
    },
    {
        "name": "SyncScopeHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/Messaging/SyncScopeHelper.html"
    },
    {
        "name": "SynthButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthButtonUI.html"
    },
    {
        "name": "SynthCheckBoxMenuItemUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthCheckBoxMenuItemUI.html"
    },
    {
        "name": "SynthCheckBoxUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthCheckBoxUI.html"
    },
    {
        "name": "SynthColorChooserUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthColorChooserUI.html"
    },
    {
        "name": "SynthComboBoxUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthComboBoxUI.html"
    },
    {
        "name": "SynthConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthConstants.html"
    },
    {
        "name": "SynthContext",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthContext.html"
    },
    {
        "name": "SynthDesktopIconUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthDesktopIconUI.html"
    },
    {
        "name": "SynthDesktopPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthDesktopPaneUI.html"
    },
    {
        "name": "SynthEditorPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthEditorPaneUI.html"
    },
    {
        "name": "Synthesizer",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Synthesizer.html"
    },
    {
        "name": "SynthFormattedTextFieldUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthFormattedTextFieldUI.html"
    },
    {
        "name": "SynthGraphicsUtils",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthGraphicsUtils.html"
    },
    {
        "name": "SynthInternalFrameUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthInternalFrameUI.html"
    },
    {
        "name": "SynthLabelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthLabelUI.html"
    },
    {
        "name": "SynthListUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthListUI.html"
    },
    {
        "name": "SynthLookAndFeel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthLookAndFeel.html"
    },
    {
        "name": "SynthMenuBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthMenuBarUI.html"
    },
    {
        "name": "SynthMenuItemUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthMenuItemUI.html"
    },
    {
        "name": "SynthMenuUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthMenuUI.html"
    },
    {
        "name": "SynthOptionPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthOptionPaneUI.html"
    },
    {
        "name": "SynthPainter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthPainter.html"
    },
    {
        "name": "SynthPanelUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthPanelUI.html"
    },
    {
        "name": "SynthPasswordFieldUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthPasswordFieldUI.html"
    },
    {
        "name": "SynthPopupMenuUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthPopupMenuUI.html"
    },
    {
        "name": "SynthProgressBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthProgressBarUI.html"
    },
    {
        "name": "SynthRadioButtonMenuItemUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthRadioButtonMenuItemUI.html"
    },
    {
        "name": "SynthRadioButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthRadioButtonUI.html"
    },
    {
        "name": "SynthRootPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthRootPaneUI.html"
    },
    {
        "name": "SynthScrollBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthScrollBarUI.html"
    },
    {
        "name": "SynthScrollPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthScrollPaneUI.html"
    },
    {
        "name": "SynthSeparatorUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthSeparatorUI.html"
    },
    {
        "name": "SynthSliderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthSliderUI.html"
    },
    {
        "name": "SynthSpinnerUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthSpinnerUI.html"
    },
    {
        "name": "SynthSplitPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthSplitPaneUI.html"
    },
    {
        "name": "SynthStyle",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthStyle.html"
    },
    {
        "name": "SynthStyleFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthStyleFactory.html"
    },
    {
        "name": "SynthTabbedPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTabbedPaneUI.html"
    },
    {
        "name": "SynthTableHeaderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTableHeaderUI.html"
    },
    {
        "name": "SynthTableUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTableUI.html"
    },
    {
        "name": "SynthTextAreaUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTextAreaUI.html"
    },
    {
        "name": "SynthTextFieldUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTextFieldUI.html"
    },
    {
        "name": "SynthTextPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTextPaneUI.html"
    },
    {
        "name": "SynthToggleButtonUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthToggleButtonUI.html"
    },
    {
        "name": "SynthToolBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthToolBarUI.html"
    },
    {
        "name": "SynthToolTipUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthToolTipUI.html"
    },
    {
        "name": "SynthTreeUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthTreeUI.html"
    },
    {
        "name": "SynthUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthUI.html"
    },
    {
        "name": "SynthViewportUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/synth/SynthViewportUI.html"
    },
    {
        "name": "SysexMessage",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/SysexMessage.html"
    },
    {
        "name": "System",
        "constructors": [],
        "methods": [],
        "href": "java/lang/System.html"
    },
    {
        "name": "SYSTEM_EXCEPTION",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/SYSTEM_EXCEPTION.html"
    },
    {
        "name": "SystemColor",
        "constructors": [],
        "methods": [],
        "href": "java/awt/SystemColor.html"
    },
    {
        "name": "SystemException",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/SystemException.html"
    },
    {
        "name": "SystemFlavorMap",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/SystemFlavorMap.html"
    },
    {
        "name": "SystemTray",
        "constructors": [],
        "methods": [],
        "href": "java/awt/SystemTray.html"
    },
    {
        "name": "TabableView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/TabableView.html"
    },
    {
        "name": "TabbedPaneUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/TabbedPaneUI.html"
    },
    {
        "name": "TabExpander",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/TabExpander.html"
    },
    {
        "name": "TableCellEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableCellEditor.html"
    },
    {
        "name": "TableCellRenderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableCellRenderer.html"
    },
    {
        "name": "TableColumn",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableColumn.html"
    },
    {
        "name": "TableColumnModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableColumnModel.html"
    },
    {
        "name": "TableColumnModelEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TableColumnModelEvent.html"
    },
    {
        "name": "TableColumnModelListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TableColumnModelListener.html"
    },
    {
        "name": "TableHeaderUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/TableHeaderUI.html"
    },
    {
        "name": "TableModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableModel.html"
    },
    {
        "name": "TableModelEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TableModelEvent.html"
    },
    {
        "name": "TableModelListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TableModelListener.html"
    },
    {
        "name": "TableRowSorter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableRowSorter.html"
    },
    {
        "name": "TableStringConverter",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/table/TableStringConverter.html"
    },
    {
        "name": "TableUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/TableUI.html"
    },
    {
        "name": "TableView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/TableView.html"
    },
    {
        "name": "TabSet",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/TabSet.html"
    },
    {
        "name": "TabStop",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/TabStop.html"
    },
    {
        "name": "TabularData",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/TabularData.html"
    },
    {
        "name": "TabularDataSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/TabularDataSupport.html"
    },
    {
        "name": "TabularType",
        "constructors": [],
        "methods": [],
        "href": "javax/management/openmbean/TabularType.html"
    },
    {
        "name": "TAG_ALTERNATE_IIOP_ADDRESS",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_ALTERNATE_IIOP_ADDRESS.html"
    },
    {
        "name": "TAG_CODE_SETS",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_CODE_SETS.html"
    },
    {
        "name": "TAG_INTERNET_IOP",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_INTERNET_IOP.html"
    },
    {
        "name": "TAG_JAVA_CODEBASE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_JAVA_CODEBASE.html"
    },
    {
        "name": "TAG_MULTIPLE_COMPONENTS",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_MULTIPLE_COMPONENTS.html"
    },
    {
        "name": "TAG_ORB_TYPE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_ORB_TYPE.html"
    },
    {
        "name": "TAG_POLICIES",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_POLICIES.html"
    },
    {
        "name": "TAG_RMI_CUSTOM_MAX_STREAM_FORMAT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TAG_RMI_CUSTOM_MAX_STREAM_FORMAT.html"
    },
    {
        "name": "TagElement",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/html/parser/TagElement.html"
    },
    {
        "name": "TaggedComponent",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TaggedComponent.html"
    },
    {
        "name": "TaggedComponentHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TaggedComponentHelper.html"
    },
    {
        "name": "TaggedComponentHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TaggedComponentHolder.html"
    },
    {
        "name": "TaggedProfile",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TaggedProfile.html"
    },
    {
        "name": "TaggedProfileHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TaggedProfileHelper.html"
    },
    {
        "name": "TaggedProfileHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TaggedProfileHolder.html"
    },
    {
        "name": "Target",
        "constructors": [],
        "methods": [],
        "href": "java/lang/annotation/Target.html"
    },
    {
        "name": "TargetDataLine",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/TargetDataLine.html"
    },
    {
        "name": "TargetedNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/remote/TargetedNotification.html"
    },
    {
        "name": "TCKind",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TCKind.html"
    },
    {
        "name": "Templates",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/Templates.html"
    },
    {
        "name": "TemplatesHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/sax/TemplatesHandler.html"
    },
    {
        "name": "Temporal",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/Temporal.html"
    },
    {
        "name": "TemporalAccessor",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalAccessor.html"
    },
    {
        "name": "TemporalAdjuster",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalAdjuster.html"
    },
    {
        "name": "TemporalAdjusters",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalAdjusters.html"
    },
    {
        "name": "TemporalAmount",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalAmount.html"
    },
    {
        "name": "TemporalField",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalField.html"
    },
    {
        "name": "TemporalQueries",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalQueries.html"
    },
    {
        "name": "TemporalQuery",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalQuery.html"
    },
    {
        "name": "TemporalUnit",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/TemporalUnit.html"
    },
    {
        "name": "Text",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/soap/Text.html"
    },
    {
        "name": "Text",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/Text.html"
    },
    {
        "name": "TextAction",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/TextAction.html"
    },
    {
        "name": "TextArea",
        "constructors": [],
        "methods": [],
        "href": "java/awt/TextArea.html"
    },
    {
        "name": "TextAttribute",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/TextAttribute.html"
    },
    {
        "name": "TextComponent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/TextComponent.html"
    },
    {
        "name": "TextEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/TextEvent.html"
    },
    {
        "name": "TextField",
        "constructors": [],
        "methods": [],
        "href": "java/awt/TextField.html"
    },
    {
        "name": "TextHitInfo",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/TextHitInfo.html"
    },
    {
        "name": "TextInputCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/TextInputCallback.html"
    },
    {
        "name": "TextLayout",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/TextLayout.html"
    },
    {
        "name": "TextLayout.CaretPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/TextLayout.CaretPolicy.html"
    },
    {
        "name": "TextListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/TextListener.html"
    },
    {
        "name": "TextMeasurer",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/TextMeasurer.html"
    },
    {
        "name": "TextOutputCallback",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/TextOutputCallback.html"
    },
    {
        "name": "TextStyle",
        "constructors": [],
        "methods": [],
        "href": "java/time/format/TextStyle.html"
    },
    {
        "name": "TextSyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/TextSyntax.html"
    },
    {
        "name": "TextUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/TextUI.html"
    },
    {
        "name": "TexturePaint",
        "constructors": [],
        "methods": [],
        "href": "java/awt/TexturePaint.html"
    },
    {
        "name": "ThaiBuddhistChronology",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ThaiBuddhistChronology.html"
    },
    {
        "name": "ThaiBuddhistDate",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ThaiBuddhistDate.html"
    },
    {
        "name": "ThaiBuddhistEra",
        "constructors": [],
        "methods": [],
        "href": "java/time/chrono/ThaiBuddhistEra.html"
    },
    {
        "name": "Thread",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Thread.html"
    },
    {
        "name": "Thread.State",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Thread.State.html"
    },
    {
        "name": "Thread.UncaughtExceptionHandler",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Thread.UncaughtExceptionHandler.html"
    },
    {
        "name": "THREAD_POLICY_ID",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/THREAD_POLICY_ID.html"
    },
    {
        "name": "ThreadDeath",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ThreadDeath.html"
    },
    {
        "name": "ThreadFactory",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadFactory.html"
    },
    {
        "name": "ThreadGroup",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ThreadGroup.html"
    },
    {
        "name": "ThreadInfo",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/ThreadInfo.html"
    },
    {
        "name": "ThreadLocal",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ThreadLocal.html"
    },
    {
        "name": "ThreadLocalRandom",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadLocalRandom.html"
    },
    {
        "name": "ThreadMXBean",
        "constructors": [],
        "methods": [],
        "href": "java/lang/management/ThreadMXBean.html"
    },
    {
        "name": "ThreadPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ThreadPolicy.html"
    },
    {
        "name": "ThreadPolicyOperations",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ThreadPolicyOperations.html"
    },
    {
        "name": "ThreadPolicyValue",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/ThreadPolicyValue.html"
    },
    {
        "name": "ThreadPoolExecutor",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadPoolExecutor.html"
    },
    {
        "name": "ThreadPoolExecutor.AbortPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html"
    },
    {
        "name": "ThreadPoolExecutor.CallerRunsPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html"
    },
    {
        "name": "ThreadPoolExecutor.DiscardOldestPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html"
    },
    {
        "name": "ThreadPoolExecutor.DiscardPolicy",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html"
    },
    {
        "name": "Throwable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Throwable.html"
    },
    {
        "name": "Tie",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/Tie.html"
    },
    {
        "name": "TileObserver",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/TileObserver.html"
    },
    {
        "name": "Time",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Time.html"
    },
    {
        "name": "TimeLimitExceededException",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/TimeLimitExceededException.html"
    },
    {
        "name": "TIMEOUT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TIMEOUT.html"
    },
    {
        "name": "TimeoutException",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/TimeoutException.html"
    },
    {
        "name": "Timer",
        "constructors": [],
        "methods": [],
        "href": "java/util/Timer.html"
    },
    {
        "name": "Timer",
        "constructors": [],
        "methods": [],
        "href": "javax/management/timer/Timer.html"
    },
    {
        "name": "Timer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/Timer.html"
    },
    {
        "name": "TimerMBean",
        "constructors": [],
        "methods": [],
        "href": "javax/management/timer/TimerMBean.html"
    },
    {
        "name": "TimerNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/management/timer/TimerNotification.html"
    },
    {
        "name": "TimerTask",
        "constructors": [],
        "methods": [],
        "href": "java/util/TimerTask.html"
    },
    {
        "name": "Timestamp",
        "constructors": [],
        "methods": [],
        "href": "java/security/Timestamp.html"
    },
    {
        "name": "Timestamp",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Timestamp.html"
    },
    {
        "name": "TimeUnit",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/TimeUnit.html"
    },
    {
        "name": "TimeZone",
        "constructors": [],
        "methods": [],
        "href": "java/util/TimeZone.html"
    },
    {
        "name": "TimeZoneNameProvider",
        "constructors": [],
        "methods": [],
        "href": "java/util/spi/TimeZoneNameProvider.html"
    },
    {
        "name": "TitledBorder",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/border/TitledBorder.html"
    },
    {
        "name": "ToDoubleBiFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ToDoubleBiFunction.html"
    },
    {
        "name": "ToDoubleFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ToDoubleFunction.html"
    },
    {
        "name": "ToIntBiFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ToIntBiFunction.html"
    },
    {
        "name": "ToIntFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ToIntFunction.html"
    },
    {
        "name": "ToLongBiFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ToLongBiFunction.html"
    },
    {
        "name": "ToLongFunction",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/ToLongFunction.html"
    },
    {
        "name": "Tool",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/Tool.html"
    },
    {
        "name": "ToolBarUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ToolBarUI.html"
    },
    {
        "name": "Toolkit",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Toolkit.html"
    },
    {
        "name": "ToolProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/tools/ToolProvider.html"
    },
    {
        "name": "ToolTipManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ToolTipManager.html"
    },
    {
        "name": "ToolTipUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ToolTipUI.html"
    },
    {
        "name": "TooManyListenersException",
        "constructors": [],
        "methods": [],
        "href": "java/util/TooManyListenersException.html"
    },
    {
        "name": "Track",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Track.html"
    },
    {
        "name": "TRANSACTION_MODE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TRANSACTION_MODE.html"
    },
    {
        "name": "TRANSACTION_REQUIRED",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TRANSACTION_REQUIRED.html"
    },
    {
        "name": "TRANSACTION_ROLLEDBACK",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TRANSACTION_ROLLEDBACK.html"
    },
    {
        "name": "TRANSACTION_UNAVAILABLE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TRANSACTION_UNAVAILABLE.html"
    },
    {
        "name": "TransactionalWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/TransactionalWriter.html"
    },
    {
        "name": "TransactionRequiredException",
        "constructors": [],
        "methods": [],
        "href": "javax/transaction/TransactionRequiredException.html"
    },
    {
        "name": "TransactionRolledbackException",
        "constructors": [],
        "methods": [],
        "href": "javax/transaction/TransactionRolledbackException.html"
    },
    {
        "name": "TransactionService",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/TransactionService.html"
    },
    {
        "name": "Transferable",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/Transferable.html"
    },
    {
        "name": "TransferHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/TransferHandler.html"
    },
    {
        "name": "TransferHandler.DropLocation",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/TransferHandler.DropLocation.html"
    },
    {
        "name": "TransferHandler.TransferSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/TransferHandler.TransferSupport.html"
    },
    {
        "name": "TransferQueue",
        "constructors": [],
        "methods": [],
        "href": "java/util/concurrent/TransferQueue.html"
    },
    {
        "name": "Transform",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/Transform.html"
    },
    {
        "name": "TransformAttribute",
        "constructors": [],
        "methods": [],
        "href": "java/awt/font/TransformAttribute.html"
    },
    {
        "name": "Transformer",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/Transformer.html"
    },
    {
        "name": "TransformerConfigurationException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/TransformerConfigurationException.html"
    },
    {
        "name": "TransformerException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/TransformerException.html"
    },
    {
        "name": "TransformerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/TransformerFactory.html"
    },
    {
        "name": "TransformerFactoryConfigurationError",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/TransformerFactoryConfigurationError.html"
    },
    {
        "name": "TransformerHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/sax/TransformerHandler.html"
    },
    {
        "name": "TransformException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/TransformException.html"
    },
    {
        "name": "TransformParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/TransformParameterSpec.html"
    },
    {
        "name": "TransformService",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/TransformService.html"
    },
    {
        "name": "Transient",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Transient.html"
    },
    {
        "name": "TRANSIENT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TRANSIENT.html"
    },
    {
        "name": "Transmitter",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/Transmitter.html"
    },
    {
        "name": "Transparency",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Transparency.html"
    },
    {
        "name": "TRANSPORT_RETRY",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/TRANSPORT_RETRY.html"
    },
    {
        "name": "TrayIcon",
        "constructors": [],
        "methods": [],
        "href": "java/awt/TrayIcon.html"
    },
    {
        "name": "TrayIcon.MessageType",
        "constructors": [],
        "methods": [],
        "href": "java/awt/TrayIcon.MessageType.html"
    },
    {
        "name": "TreeCellEditor",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/TreeCellEditor.html"
    },
    {
        "name": "TreeCellRenderer",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/TreeCellRenderer.html"
    },
    {
        "name": "TreeExpansionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeExpansionEvent.html"
    },
    {
        "name": "TreeExpansionListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeExpansionListener.html"
    },
    {
        "name": "TreeMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/TreeMap.html"
    },
    {
        "name": "TreeModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/TreeModel.html"
    },
    {
        "name": "TreeModelEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeModelEvent.html"
    },
    {
        "name": "TreeModelListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeModelListener.html"
    },
    {
        "name": "TreeNode",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/TreeNode.html"
    },
    {
        "name": "TreePath",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/TreePath.html"
    },
    {
        "name": "TreeSelectionEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeSelectionEvent.html"
    },
    {
        "name": "TreeSelectionListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeSelectionListener.html"
    },
    {
        "name": "TreeSelectionModel",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/TreeSelectionModel.html"
    },
    {
        "name": "TreeSet",
        "constructors": [],
        "methods": [],
        "href": "java/util/TreeSet.html"
    },
    {
        "name": "TreeUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/TreeUI.html"
    },
    {
        "name": "TreeWillExpandListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/TreeWillExpandListener.html"
    },
    {
        "name": "TrustAnchor",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/TrustAnchor.html"
    },
    {
        "name": "TrustManager",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/TrustManager.html"
    },
    {
        "name": "TrustManagerFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/TrustManagerFactory.html"
    },
    {
        "name": "TrustManagerFactorySpi",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/TrustManagerFactorySpi.html"
    },
    {
        "name": "Type",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/Type.html"
    },
    {
        "name": "TypeCode",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TypeCode.html"
    },
    {
        "name": "TypeCodeHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/TypeCodeHolder.html"
    },
    {
        "name": "TypeConstraintException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/TypeConstraintException.html"
    },
    {
        "name": "TypeElement",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/TypeElement.html"
    },
    {
        "name": "TypeInfo",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/TypeInfo.html"
    },
    {
        "name": "TypeInfoProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/TypeInfoProvider.html"
    },
    {
        "name": "TypeKind",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/TypeKind.html"
    },
    {
        "name": "TypeKindVisitor6",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/TypeKindVisitor6.html"
    },
    {
        "name": "TypeKindVisitor7",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/TypeKindVisitor7.html"
    },
    {
        "name": "TypeKindVisitor8",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/TypeKindVisitor8.html"
    },
    {
        "name": "TypeMirror",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/TypeMirror.html"
    },
    {
        "name": "TypeMismatch",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/DynAnyPackage/TypeMismatch.html"
    },
    {
        "name": "TypeMismatch",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyPackage/TypeMismatch.html"
    },
    {
        "name": "TypeMismatch",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecPackage/TypeMismatch.html"
    },
    {
        "name": "TypeMismatchHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/DynAnyPackage/TypeMismatchHelper.html"
    },
    {
        "name": "TypeMismatchHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecPackage/TypeMismatchHelper.html"
    },
    {
        "name": "TypeNotPresentException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/TypeNotPresentException.html"
    },
    {
        "name": "TypeParameterElement",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/TypeParameterElement.html"
    },
    {
        "name": "Types",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Types.html"
    },
    {
        "name": "Types",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/util/Types.html"
    },
    {
        "name": "TypeVariable",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/TypeVariable.html"
    },
    {
        "name": "TypeVariable",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/TypeVariable.html"
    },
    {
        "name": "TypeVisitor",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/TypeVisitor.html"
    },
    {
        "name": "UID",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/UID.html"
    },
    {
        "name": "UIDefaults",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIDefaults.html"
    },
    {
        "name": "UIDefaults.ActiveValue",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIDefaults.ActiveValue.html"
    },
    {
        "name": "UIDefaults.LazyInputMap",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIDefaults.LazyInputMap.html"
    },
    {
        "name": "UIDefaults.LazyValue",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIDefaults.LazyValue.html"
    },
    {
        "name": "UIDefaults.ProxyLazyValue",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIDefaults.ProxyLazyValue.html"
    },
    {
        "name": "UIEvent",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/events/UIEvent.html"
    },
    {
        "name": "UIManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIManager.html"
    },
    {
        "name": "UIManager.LookAndFeelInfo",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UIManager.LookAndFeelInfo.html"
    },
    {
        "name": "UIResource",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/UIResource.html"
    },
    {
        "name": "ULongLongSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ULongLongSeqHelper.html"
    },
    {
        "name": "ULongLongSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ULongLongSeqHolder.html"
    },
    {
        "name": "ULongSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ULongSeqHelper.html"
    },
    {
        "name": "ULongSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ULongSeqHolder.html"
    },
    {
        "name": "UnaryOperator",
        "constructors": [],
        "methods": [],
        "href": "java/util/function/UnaryOperator.html"
    },
    {
        "name": "UncheckedIOException",
        "constructors": [],
        "methods": [],
        "href": "java/io/UncheckedIOException.html"
    },
    {
        "name": "UndeclaredThrowableException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/UndeclaredThrowableException.html"
    },
    {
        "name": "UndoableEdit",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/UndoableEdit.html"
    },
    {
        "name": "UndoableEditEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/UndoableEditEvent.html"
    },
    {
        "name": "UndoableEditListener",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/event/UndoableEditListener.html"
    },
    {
        "name": "UndoableEditSupport",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/UndoableEditSupport.html"
    },
    {
        "name": "UndoManager",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/undo/UndoManager.html"
    },
    {
        "name": "UnexpectedException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/UnexpectedException.html"
    },
    {
        "name": "UnicastRemoteObject",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/UnicastRemoteObject.html"
    },
    {
        "name": "UnionMember",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UnionMember.html"
    },
    {
        "name": "UnionMemberHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UnionMemberHelper.html"
    },
    {
        "name": "UnionType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/UnionType.html"
    },
    {
        "name": "UNKNOWN",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UNKNOWN.html"
    },
    {
        "name": "UNKNOWN",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/UNKNOWN.html"
    },
    {
        "name": "UnknownAnnotationValueException",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/UnknownAnnotationValueException.html"
    },
    {
        "name": "UnknownElementException",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/UnknownElementException.html"
    },
    {
        "name": "UnknownEncoding",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecFactoryPackage/UnknownEncoding.html"
    },
    {
        "name": "UnknownEncodingHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/IOP/CodecFactoryPackage/UnknownEncodingHelper.html"
    },
    {
        "name": "UnknownEntityException",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/UnknownEntityException.html"
    },
    {
        "name": "UnknownError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/UnknownError.html"
    },
    {
        "name": "UnknownException",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/UnknownException.html"
    },
    {
        "name": "UnknownFormatConversionException",
        "constructors": [],
        "methods": [],
        "href": "java/util/UnknownFormatConversionException.html"
    },
    {
        "name": "UnknownFormatFlagsException",
        "constructors": [],
        "methods": [],
        "href": "java/util/UnknownFormatFlagsException.html"
    },
    {
        "name": "UnknownGroupException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/activation/UnknownGroupException.html"
    },
    {
        "name": "UnknownHostException",
        "constructors": [],
        "methods": [],
        "href": "java/net/UnknownHostException.html"
    },
    {
        "name": "UnknownHostException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/UnknownHostException.html"
    },
    {
        "name": "UnknownObjectException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/activation/UnknownObjectException.html"
    },
    {
        "name": "UnknownServiceException",
        "constructors": [],
        "methods": [],
        "href": "java/net/UnknownServiceException.html"
    },
    {
        "name": "UnknownTypeException",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/UnknownTypeException.html"
    },
    {
        "name": "UnknownUserException",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UnknownUserException.html"
    },
    {
        "name": "UnknownUserExceptionHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UnknownUserExceptionHelper.html"
    },
    {
        "name": "UnknownUserExceptionHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UnknownUserExceptionHolder.html"
    },
    {
        "name": "UnmappableCharacterException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/UnmappableCharacterException.html"
    },
    {
        "name": "UnmarshalException",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/UnmarshalException.html"
    },
    {
        "name": "UnmarshalException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/UnmarshalException.html"
    },
    {
        "name": "Unmarshaller",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/Unmarshaller.html"
    },
    {
        "name": "Unmarshaller.Listener",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/Unmarshaller.Listener.html"
    },
    {
        "name": "UnmarshallerHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/UnmarshallerHandler.html"
    },
    {
        "name": "UnmodifiableClassException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/instrument/UnmodifiableClassException.html"
    },
    {
        "name": "UnmodifiableSetException",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/UnmodifiableSetException.html"
    },
    {
        "name": "UnrecoverableEntryException",
        "constructors": [],
        "methods": [],
        "href": "java/security/UnrecoverableEntryException.html"
    },
    {
        "name": "UnrecoverableKeyException",
        "constructors": [],
        "methods": [],
        "href": "java/security/UnrecoverableKeyException.html"
    },
    {
        "name": "Unreferenced",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/server/Unreferenced.html"
    },
    {
        "name": "UnresolvedAddressException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/UnresolvedAddressException.html"
    },
    {
        "name": "UnresolvedPermission",
        "constructors": [],
        "methods": [],
        "href": "java/security/UnresolvedPermission.html"
    },
    {
        "name": "UnsatisfiedLinkError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/UnsatisfiedLinkError.html"
    },
    {
        "name": "UnsolicitedNotification",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/UnsolicitedNotification.html"
    },
    {
        "name": "UnsolicitedNotificationEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/UnsolicitedNotificationEvent.html"
    },
    {
        "name": "UnsolicitedNotificationListener",
        "constructors": [],
        "methods": [],
        "href": "javax/naming/ldap/UnsolicitedNotificationListener.html"
    },
    {
        "name": "UNSUPPORTED_POLICY",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UNSUPPORTED_POLICY.html"
    },
    {
        "name": "UNSUPPORTED_POLICY_VALUE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UNSUPPORTED_POLICY_VALUE.html"
    },
    {
        "name": "UnsupportedAddressTypeException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/UnsupportedAddressTypeException.html"
    },
    {
        "name": "UnsupportedAudioFileException",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/sampled/UnsupportedAudioFileException.html"
    },
    {
        "name": "UnsupportedCallbackException",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/callback/UnsupportedCallbackException.html"
    },
    {
        "name": "UnsupportedCharsetException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/charset/UnsupportedCharsetException.html"
    },
    {
        "name": "UnsupportedClassVersionError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/UnsupportedClassVersionError.html"
    },
    {
        "name": "UnsupportedDataTypeException",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/UnsupportedDataTypeException.html"
    },
    {
        "name": "UnsupportedEncodingException",
        "constructors": [],
        "methods": [],
        "href": "java/io/UnsupportedEncodingException.html"
    },
    {
        "name": "UnsupportedFlavorException",
        "constructors": [],
        "methods": [],
        "href": "java/awt/datatransfer/UnsupportedFlavorException.html"
    },
    {
        "name": "UnsupportedLookAndFeelException",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/UnsupportedLookAndFeelException.html"
    },
    {
        "name": "UnsupportedOperationException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/UnsupportedOperationException.html"
    },
    {
        "name": "UnsupportedTemporalTypeException",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/UnsupportedTemporalTypeException.html"
    },
    {
        "name": "URI",
        "constructors": [],
        "methods": [],
        "href": "java/net/URI.html"
    },
    {
        "name": "URIDereferencer",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/URIDereferencer.html"
    },
    {
        "name": "URIException",
        "constructors": [],
        "methods": [],
        "href": "javax/print/URIException.html"
    },
    {
        "name": "URIParameter",
        "constructors": [],
        "methods": [],
        "href": "java/security/URIParameter.html"
    },
    {
        "name": "URIReference",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/URIReference.html"
    },
    {
        "name": "URIReferenceException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/URIReferenceException.html"
    },
    {
        "name": "URIResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/transform/URIResolver.html"
    },
    {
        "name": "URISyntax",
        "constructors": [],
        "methods": [],
        "href": "javax/print/attribute/URISyntax.html"
    },
    {
        "name": "URISyntaxException",
        "constructors": [],
        "methods": [],
        "href": "java/net/URISyntaxException.html"
    },
    {
        "name": "URL",
        "constructors": [],
        "methods": [],
        "href": "java/net/URL.html"
    },
    {
        "name": "URLClassLoader",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLClassLoader.html"
    },
    {
        "name": "URLConnection",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLConnection.html"
    },
    {
        "name": "URLDataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/activation/URLDataSource.html"
    },
    {
        "name": "URLDecoder",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLDecoder.html"
    },
    {
        "name": "URLEncoder",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLEncoder.html"
    },
    {
        "name": "URLPermission",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLPermission.html"
    },
    {
        "name": "URLStreamHandler",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLStreamHandler.html"
    },
    {
        "name": "URLStreamHandlerFactory",
        "constructors": [],
        "methods": [],
        "href": "java/net/URLStreamHandlerFactory.html"
    },
    {
        "name": "URLStringHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/NamingContextExtPackage/URLStringHelper.html"
    },
    {
        "name": "USER_EXCEPTION",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableInterceptor/USER_EXCEPTION.html"
    },
    {
        "name": "UserDataHandler",
        "constructors": [],
        "methods": [],
        "href": "org/w3c/dom/UserDataHandler.html"
    },
    {
        "name": "UserDefinedFileAttributeView",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/UserDefinedFileAttributeView.html"
    },
    {
        "name": "UserException",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UserException.html"
    },
    {
        "name": "UserPrincipal",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/UserPrincipal.html"
    },
    {
        "name": "UserPrincipalLookupService",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/UserPrincipalLookupService.html"
    },
    {
        "name": "UserPrincipalNotFoundException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/attribute/UserPrincipalNotFoundException.html"
    },
    {
        "name": "UShortSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UShortSeqHelper.html"
    },
    {
        "name": "UShortSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/UShortSeqHolder.html"
    },
    {
        "name": "UTFDataFormatException",
        "constructors": [],
        "methods": [],
        "href": "java/io/UTFDataFormatException.html"
    },
    {
        "name": "Util",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/Util.html"
    },
    {
        "name": "UtilDelegate",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/UtilDelegate.html"
    },
    {
        "name": "Utilities",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/Utilities.html"
    },
    {
        "name": "UUID",
        "constructors": [],
        "methods": [],
        "href": "java/util/UUID.html"
    },
    {
        "name": "ValidationEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/ValidationEvent.html"
    },
    {
        "name": "ValidationEventCollector",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/util/ValidationEventCollector.html"
    },
    {
        "name": "ValidationEventHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/ValidationEventHandler.html"
    },
    {
        "name": "ValidationEventImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/helpers/ValidationEventImpl.html"
    },
    {
        "name": "ValidationEventLocator",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/ValidationEventLocator.html"
    },
    {
        "name": "ValidationEventLocatorImpl",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/helpers/ValidationEventLocatorImpl.html"
    },
    {
        "name": "ValidationException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/ValidationException.html"
    },
    {
        "name": "Validator",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/Validator.html"
    },
    {
        "name": "Validator",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/Validator.html"
    },
    {
        "name": "ValidatorHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/validation/ValidatorHandler.html"
    },
    {
        "name": "ValueBase",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ValueBase.html"
    },
    {
        "name": "ValueBaseHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ValueBaseHelper.html"
    },
    {
        "name": "ValueBaseHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ValueBaseHolder.html"
    },
    {
        "name": "ValueExp",
        "constructors": [],
        "methods": [],
        "href": "javax/management/ValueExp.html"
    },
    {
        "name": "ValueFactory",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ValueFactory.html"
    },
    {
        "name": "ValueHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/ValueHandler.html"
    },
    {
        "name": "ValueHandlerMultiFormat",
        "constructors": [],
        "methods": [],
        "href": "javax/rmi/CORBA/ValueHandlerMultiFormat.html"
    },
    {
        "name": "ValueInputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ValueInputStream.html"
    },
    {
        "name": "ValueMember",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ValueMember.html"
    },
    {
        "name": "ValueMemberHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/ValueMemberHelper.html"
    },
    {
        "name": "ValueOutputStream",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/portable/ValueOutputStream.html"
    },
    {
        "name": "ValueRange",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/ValueRange.html"
    },
    {
        "name": "VariableElement",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/element/VariableElement.html"
    },
    {
        "name": "VariableHeightLayoutCache",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/tree/VariableHeightLayoutCache.html"
    },
    {
        "name": "Vector",
        "constructors": [],
        "methods": [],
        "href": "java/util/Vector.html"
    },
    {
        "name": "VerifyError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/VerifyError.html"
    },
    {
        "name": "VersionSpecHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/VersionSpecHelper.html"
    },
    {
        "name": "VetoableChangeListener",
        "constructors": [],
        "methods": [],
        "href": "java/beans/VetoableChangeListener.html"
    },
    {
        "name": "VetoableChangeListenerProxy",
        "constructors": [],
        "methods": [],
        "href": "java/beans/VetoableChangeListenerProxy.html"
    },
    {
        "name": "VetoableChangeSupport",
        "constructors": [],
        "methods": [],
        "href": "java/beans/VetoableChangeSupport.html"
    },
    {
        "name": "View",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/View.html"
    },
    {
        "name": "ViewFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/ViewFactory.html"
    },
    {
        "name": "ViewportLayout",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/ViewportLayout.html"
    },
    {
        "name": "ViewportUI",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/plaf/ViewportUI.html"
    },
    {
        "name": "VirtualMachineError",
        "constructors": [],
        "methods": [],
        "href": "java/lang/VirtualMachineError.html"
    },
    {
        "name": "Visibility",
        "constructors": [],
        "methods": [],
        "href": "java/beans/Visibility.html"
    },
    {
        "name": "VisibilityHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/VisibilityHelper.html"
    },
    {
        "name": "VM_ABSTRACT",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/VM_ABSTRACT.html"
    },
    {
        "name": "VM_CUSTOM",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/VM_CUSTOM.html"
    },
    {
        "name": "VM_NONE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/VM_NONE.html"
    },
    {
        "name": "VM_TRUNCATABLE",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/VM_TRUNCATABLE.html"
    },
    {
        "name": "VMID",
        "constructors": [],
        "methods": [],
        "href": "java/rmi/dgc/VMID.html"
    },
    {
        "name": "VoiceStatus",
        "constructors": [],
        "methods": [],
        "href": "javax/sound/midi/VoiceStatus.html"
    },
    {
        "name": "Void",
        "constructors": [],
        "methods": [],
        "href": "java/lang/Void.html"
    },
    {
        "name": "VolatileCallSite",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/VolatileCallSite.html"
    },
    {
        "name": "VolatileImage",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/VolatileImage.html"
    },
    {
        "name": "W3CDomHandler",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/W3CDomHandler.html"
    },
    {
        "name": "W3CEndpointReference",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/wsaddressing/W3CEndpointReference.html"
    },
    {
        "name": "W3CEndpointReferenceBuilder",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/wsaddressing/W3CEndpointReferenceBuilder.html"
    },
    {
        "name": "Watchable",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/Watchable.html"
    },
    {
        "name": "WatchEvent",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/WatchEvent.html"
    },
    {
        "name": "WatchEvent.Kind",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/WatchEvent.Kind.html"
    },
    {
        "name": "WatchEvent.Modifier",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/WatchEvent.Modifier.html"
    },
    {
        "name": "WatchKey",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/WatchKey.html"
    },
    {
        "name": "WatchService",
        "constructors": [],
        "methods": [],
        "href": "java/nio/file/WatchService.html"
    },
    {
        "name": "WCharSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WCharSeqHelper.html"
    },
    {
        "name": "WCharSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WCharSeqHolder.html"
    },
    {
        "name": "WeakHashMap",
        "constructors": [],
        "methods": [],
        "href": "java/util/WeakHashMap.html"
    },
    {
        "name": "WeakReference",
        "constructors": [],
        "methods": [],
        "href": "java/lang/ref/WeakReference.html"
    },
    {
        "name": "WebEndpoint",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebEndpoint.html"
    },
    {
        "name": "WebFault",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebFault.html"
    },
    {
        "name": "WebMethod",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/WebMethod.html"
    },
    {
        "name": "WebParam",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/WebParam.html"
    },
    {
        "name": "WebParam.Mode",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/WebParam.Mode.html"
    },
    {
        "name": "WebResult",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/WebResult.html"
    },
    {
        "name": "WebRowSet",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/WebRowSet.html"
    },
    {
        "name": "WebService",
        "constructors": [],
        "methods": [],
        "href": "javax/jws/WebService.html"
    },
    {
        "name": "WebServiceClient",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceClient.html"
    },
    {
        "name": "WebServiceContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceContext.html"
    },
    {
        "name": "WebServiceException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceException.html"
    },
    {
        "name": "WebServiceFeature",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceFeature.html"
    },
    {
        "name": "WebServiceFeatureAnnotation",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/spi/WebServiceFeatureAnnotation.html"
    },
    {
        "name": "WebServicePermission",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServicePermission.html"
    },
    {
        "name": "WebServiceProvider",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceProvider.html"
    },
    {
        "name": "WebServiceRef",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceRef.html"
    },
    {
        "name": "WebServiceRefs",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/ws/WebServiceRefs.html"
    },
    {
        "name": "WeekFields",
        "constructors": [],
        "methods": [],
        "href": "java/time/temporal/WeekFields.html"
    },
    {
        "name": "WildcardType",
        "constructors": [],
        "methods": [],
        "href": "java/lang/reflect/WildcardType.html"
    },
    {
        "name": "WildcardType",
        "constructors": [],
        "methods": [],
        "href": "javax/lang/model/type/WildcardType.html"
    },
    {
        "name": "Window",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Window.html"
    },
    {
        "name": "Window.Type",
        "constructors": [],
        "methods": [],
        "href": "java/awt/Window.Type.html"
    },
    {
        "name": "WindowAdapter",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/WindowAdapter.html"
    },
    {
        "name": "WindowConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/WindowConstants.html"
    },
    {
        "name": "WindowEvent",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/WindowEvent.html"
    },
    {
        "name": "WindowFocusListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/WindowFocusListener.html"
    },
    {
        "name": "WindowListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/WindowListener.html"
    },
    {
        "name": "WindowStateListener",
        "constructors": [],
        "methods": [],
        "href": "java/awt/event/WindowStateListener.html"
    },
    {
        "name": "WrappedPlainView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/WrappedPlainView.html"
    },
    {
        "name": "Wrapper",
        "constructors": [],
        "methods": [],
        "href": "java/sql/Wrapper.html"
    },
    {
        "name": "WritableByteChannel",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/WritableByteChannel.html"
    },
    {
        "name": "WritableRaster",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/WritableRaster.html"
    },
    {
        "name": "WritableRenderedImage",
        "constructors": [],
        "methods": [],
        "href": "java/awt/image/WritableRenderedImage.html"
    },
    {
        "name": "WriteAbortedException",
        "constructors": [],
        "methods": [],
        "href": "java/io/WriteAbortedException.html"
    },
    {
        "name": "WritePendingException",
        "constructors": [],
        "methods": [],
        "href": "java/nio/channels/WritePendingException.html"
    },
    {
        "name": "Writer",
        "constructors": [],
        "methods": [],
        "href": "java/io/Writer.html"
    },
    {
        "name": "WrongAdapter",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/WrongAdapter.html"
    },
    {
        "name": "WrongAdapterHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/WrongAdapterHelper.html"
    },
    {
        "name": "WrongMethodTypeException",
        "constructors": [],
        "methods": [],
        "href": "java/lang/invoke/WrongMethodTypeException.html"
    },
    {
        "name": "WrongPolicy",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/WrongPolicy.html"
    },
    {
        "name": "WrongPolicyHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/POAPackage/WrongPolicyHelper.html"
    },
    {
        "name": "WrongTransaction",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WrongTransaction.html"
    },
    {
        "name": "WrongTransactionHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WrongTransactionHelper.html"
    },
    {
        "name": "WrongTransactionHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WrongTransactionHolder.html"
    },
    {
        "name": "WStringSeqHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WStringSeqHelper.html"
    },
    {
        "name": "WStringSeqHolder",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WStringSeqHolder.html"
    },
    {
        "name": "WStringValueHelper",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/WStringValueHelper.html"
    },
    {
        "name": "X500Principal",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/x500/X500Principal.html"
    },
    {
        "name": "X500PrivateCredential",
        "constructors": [],
        "methods": [],
        "href": "javax/security/auth/x500/X500PrivateCredential.html"
    },
    {
        "name": "X509Certificate",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/X509Certificate.html"
    },
    {
        "name": "X509Certificate",
        "constructors": [],
        "methods": [],
        "href": "javax/security/cert/X509Certificate.html"
    },
    {
        "name": "X509CertSelector",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/X509CertSelector.html"
    },
    {
        "name": "X509CRL",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/X509CRL.html"
    },
    {
        "name": "X509CRLEntry",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/X509CRLEntry.html"
    },
    {
        "name": "X509CRLSelector",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/X509CRLSelector.html"
    },
    {
        "name": "X509Data",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/X509Data.html"
    },
    {
        "name": "X509EncodedKeySpec",
        "constructors": [],
        "methods": [],
        "href": "java/security/spec/X509EncodedKeySpec.html"
    },
    {
        "name": "X509ExtendedKeyManager",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/X509ExtendedKeyManager.html"
    },
    {
        "name": "X509ExtendedTrustManager",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/X509ExtendedTrustManager.html"
    },
    {
        "name": "X509Extension",
        "constructors": [],
        "methods": [],
        "href": "java/security/cert/X509Extension.html"
    },
    {
        "name": "X509IssuerSerial",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/keyinfo/X509IssuerSerial.html"
    },
    {
        "name": "X509KeyManager",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/X509KeyManager.html"
    },
    {
        "name": "X509TrustManager",
        "constructors": [],
        "methods": [],
        "href": "javax/net/ssl/X509TrustManager.html"
    },
    {
        "name": "XAConnection",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/XAConnection.html"
    },
    {
        "name": "XADataSource",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/XADataSource.html"
    },
    {
        "name": "XAException",
        "constructors": [],
        "methods": [],
        "href": "javax/transaction/xa/XAException.html"
    },
    {
        "name": "XAResource",
        "constructors": [],
        "methods": [],
        "href": "javax/transaction/xa/XAResource.html"
    },
    {
        "name": "Xid",
        "constructors": [],
        "methods": [],
        "href": "javax/transaction/xa/Xid.html"
    },
    {
        "name": "XmlAccessOrder",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAccessOrder.html"
    },
    {
        "name": "XmlAccessorOrder",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAccessorOrder.html"
    },
    {
        "name": "XmlAccessorType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAccessorType.html"
    },
    {
        "name": "XmlAccessType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAccessType.html"
    },
    {
        "name": "XmlAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/XmlAdapter.html"
    },
    {
        "name": "XmlAnyAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAnyAttribute.html"
    },
    {
        "name": "XmlAnyElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAnyElement.html"
    },
    {
        "name": "XmlAttachmentRef",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAttachmentRef.html"
    },
    {
        "name": "XmlAttribute",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlAttribute.html"
    },
    {
        "name": "XMLConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/XMLConstants.html"
    },
    {
        "name": "XMLCryptoContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/XMLCryptoContext.html"
    },
    {
        "name": "XMLDecoder",
        "constructors": [],
        "methods": [],
        "href": "java/beans/XMLDecoder.html"
    },
    {
        "name": "XmlElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElement.html"
    },
    {
        "name": "XmlElement.DEFAULT",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElement.DEFAULT.html"
    },
    {
        "name": "XmlElementDecl",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElementDecl.html"
    },
    {
        "name": "XmlElementDecl.GLOBAL",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElementDecl.GLOBAL.html"
    },
    {
        "name": "XmlElementRef",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElementRef.html"
    },
    {
        "name": "XmlElementRef.DEFAULT",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElementRef.DEFAULT.html"
    },
    {
        "name": "XmlElementRefs",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElementRefs.html"
    },
    {
        "name": "XmlElements",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElements.html"
    },
    {
        "name": "XmlElementWrapper",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlElementWrapper.html"
    },
    {
        "name": "XMLEncoder",
        "constructors": [],
        "methods": [],
        "href": "java/beans/XMLEncoder.html"
    },
    {
        "name": "XmlEnum",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlEnum.html"
    },
    {
        "name": "XmlEnumValue",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlEnumValue.html"
    },
    {
        "name": "XMLEvent",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/events/XMLEvent.html"
    },
    {
        "name": "XMLEventAllocator",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/util/XMLEventAllocator.html"
    },
    {
        "name": "XMLEventConsumer",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/util/XMLEventConsumer.html"
    },
    {
        "name": "XMLEventFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLEventFactory.html"
    },
    {
        "name": "XMLEventReader",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLEventReader.html"
    },
    {
        "name": "XMLEventWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLEventWriter.html"
    },
    {
        "name": "XMLFilter",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/XMLFilter.html"
    },
    {
        "name": "XMLFilterImpl",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/XMLFilterImpl.html"
    },
    {
        "name": "XMLFormatter",
        "constructors": [],
        "methods": [],
        "href": "java/util/logging/XMLFormatter.html"
    },
    {
        "name": "XMLGregorianCalendar",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/datatype/XMLGregorianCalendar.html"
    },
    {
        "name": "XmlID",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlID.html"
    },
    {
        "name": "XmlIDREF",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlIDREF.html"
    },
    {
        "name": "XmlInlineBinaryData",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlInlineBinaryData.html"
    },
    {
        "name": "XMLInputFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLInputFactory.html"
    },
    {
        "name": "XmlJavaTypeAdapter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/XmlJavaTypeAdapter.html"
    },
    {
        "name": "XmlJavaTypeAdapter.DEFAULT",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/XmlJavaTypeAdapter.DEFAULT.html"
    },
    {
        "name": "XmlJavaTypeAdapters",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/adapters/XmlJavaTypeAdapters.html"
    },
    {
        "name": "XmlList",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlList.html"
    },
    {
        "name": "XmlMimeType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlMimeType.html"
    },
    {
        "name": "XmlMixed",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlMixed.html"
    },
    {
        "name": "XmlNs",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlNs.html"
    },
    {
        "name": "XmlNsForm",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlNsForm.html"
    },
    {
        "name": "XMLObject",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLObject.html"
    },
    {
        "name": "XMLOutputFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLOutputFactory.html"
    },
    {
        "name": "XMLParseException",
        "constructors": [],
        "methods": [],
        "href": "javax/management/modelmbean/XMLParseException.html"
    },
    {
        "name": "XmlReader",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/XmlReader.html"
    },
    {
        "name": "XMLReader",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/XMLReader.html"
    },
    {
        "name": "XMLReaderAdapter",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/XMLReaderAdapter.html"
    },
    {
        "name": "XMLReaderFactory",
        "constructors": [],
        "methods": [],
        "href": "org/xml/sax/helpers/XMLReaderFactory.html"
    },
    {
        "name": "XmlRegistry",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlRegistry.html"
    },
    {
        "name": "XMLReporter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLReporter.html"
    },
    {
        "name": "XMLResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLResolver.html"
    },
    {
        "name": "XmlRootElement",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlRootElement.html"
    },
    {
        "name": "XmlSchema",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlSchema.html"
    },
    {
        "name": "XmlSchemaType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlSchemaType.html"
    },
    {
        "name": "XmlSchemaType.DEFAULT",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlSchemaType.DEFAULT.html"
    },
    {
        "name": "XmlSchemaTypes",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlSchemaTypes.html"
    },
    {
        "name": "XmlSeeAlso",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlSeeAlso.html"
    },
    {
        "name": "XMLSignature",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLSignature.html"
    },
    {
        "name": "XMLSignature.SignatureValue",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLSignature.SignatureValue.html"
    },
    {
        "name": "XMLSignatureException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLSignatureException.html"
    },
    {
        "name": "XMLSignatureFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLSignatureFactory.html"
    },
    {
        "name": "XMLSignContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLSignContext.html"
    },
    {
        "name": "XMLStreamConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLStreamConstants.html"
    },
    {
        "name": "XMLStreamException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLStreamException.html"
    },
    {
        "name": "XMLStreamReader",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLStreamReader.html"
    },
    {
        "name": "XMLStreamWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/stream/XMLStreamWriter.html"
    },
    {
        "name": "XMLStructure",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/XMLStructure.html"
    },
    {
        "name": "XmlTransient",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlTransient.html"
    },
    {
        "name": "XmlType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlType.html"
    },
    {
        "name": "XmlType.DEFAULT",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlType.DEFAULT.html"
    },
    {
        "name": "XMLValidateContext",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/XMLValidateContext.html"
    },
    {
        "name": "XmlValue",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/bind/annotation/XmlValue.html"
    },
    {
        "name": "XmlWriter",
        "constructors": [],
        "methods": [],
        "href": "javax/sql/rowset/spi/XmlWriter.html"
    },
    {
        "name": "XPath",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPath.html"
    },
    {
        "name": "XPathConstants",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathConstants.html"
    },
    {
        "name": "XPathException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathException.html"
    },
    {
        "name": "XPathExpression",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathExpression.html"
    },
    {
        "name": "XPathExpressionException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathExpressionException.html"
    },
    {
        "name": "XPathFactory",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathFactory.html"
    },
    {
        "name": "XPathFactoryConfigurationException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathFactoryConfigurationException.html"
    },
    {
        "name": "XPathFilter2ParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/XPathFilter2ParameterSpec.html"
    },
    {
        "name": "XPathFilterParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/XPathFilterParameterSpec.html"
    },
    {
        "name": "XPathFunction",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathFunction.html"
    },
    {
        "name": "XPathFunctionException",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathFunctionException.html"
    },
    {
        "name": "XPathFunctionResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathFunctionResolver.html"
    },
    {
        "name": "XPathType",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/XPathType.html"
    },
    {
        "name": "XPathType.Filter",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/XPathType.Filter.html"
    },
    {
        "name": "XPathVariableResolver",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/xpath/XPathVariableResolver.html"
    },
    {
        "name": "XSLTTransformParameterSpec",
        "constructors": [],
        "methods": [],
        "href": "javax/xml/crypto/dsig/spec/XSLTTransformParameterSpec.html"
    },
    {
        "name": "Year",
        "constructors": [],
        "methods": [],
        "href": "java/time/Year.html"
    },
    {
        "name": "YearMonth",
        "constructors": [],
        "methods": [],
        "href": "java/time/YearMonth.html"
    },
    {
        "name": "ZipEntry",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/ZipEntry.html"
    },
    {
        "name": "ZipError",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/ZipError.html"
    },
    {
        "name": "ZipException",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/ZipException.html"
    },
    {
        "name": "ZipFile",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/ZipFile.html"
    },
    {
        "name": "ZipInputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/ZipInputStream.html"
    },
    {
        "name": "ZipOutputStream",
        "constructors": [],
        "methods": [],
        "href": "java/util/zip/ZipOutputStream.html"
    },
    {
        "name": "ZonedDateTime",
        "constructors": [],
        "methods": [],
        "href": "java/time/ZonedDateTime.html"
    },
    {
        "name": "ZoneId",
        "constructors": [],
        "methods": [],
        "href": "java/time/ZoneId.html"
    },
    {
        "name": "ZoneOffset",
        "constructors": [],
        "methods": [],
        "href": "java/time/ZoneOffset.html"
    },
    {
        "name": "ZoneOffsetTransition",
        "constructors": [],
        "methods": [],
        "href": "java/time/zone/ZoneOffsetTransition.html"
    },
    {
        "name": "ZoneOffsetTransitionRule",
        "constructors": [],
        "methods": [],
        "href": "java/time/zone/ZoneOffsetTransitionRule.html"
    },
    {
        "name": "ZoneOffsetTransitionRule.TimeDefinition",
        "constructors": [],
        "methods": [],
        "href": "java/time/zone/ZoneOffsetTransitionRule.TimeDefinition.html"
    },
    {
        "name": "ZoneRules",
        "constructors": [],
        "methods": [],
        "href": "java/time/zone/ZoneRules.html"
    },
    {
        "name": "ZoneRulesException",
        "constructors": [],
        "methods": [],
        "href": "java/time/zone/ZoneRulesException.html"
    },
    {
        "name": "ZoneRulesProvider",
        "constructors": [],
        "methods": [],
        "href": "java/time/zone/ZoneRulesProvider.html"
    },
    {
        "name": "ZoneView",
        "constructors": [],
        "methods": [],
        "href": "javax/swing/text/ZoneView.html"
    },
    {
        "name": "_BindingIteratorImplBase",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/_BindingIteratorImplBase.html"
    },
    {
        "name": "_BindingIteratorStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/_BindingIteratorStub.html"
    },
    {
        "name": "_DynAnyFactoryStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynAnyFactoryStub.html"
    },
    {
        "name": "_DynAnyStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynAnyStub.html"
    },
    {
        "name": "_DynArrayStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynArrayStub.html"
    },
    {
        "name": "_DynEnumStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynEnumStub.html"
    },
    {
        "name": "_DynFixedStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynFixedStub.html"
    },
    {
        "name": "_DynSequenceStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynSequenceStub.html"
    },
    {
        "name": "_DynStructStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynStructStub.html"
    },
    {
        "name": "_DynUnionStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynUnionStub.html"
    },
    {
        "name": "_DynValueStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/DynamicAny/_DynValueStub.html"
    },
    {
        "name": "_IDLTypeStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/_IDLTypeStub.html"
    },
    {
        "name": "_NamingContextExtStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/_NamingContextExtStub.html"
    },
    {
        "name": "_NamingContextImplBase",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/_NamingContextImplBase.html"
    },
    {
        "name": "_NamingContextStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CosNaming/_NamingContextStub.html"
    },
    {
        "name": "_PolicyStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/CORBA/_PolicyStub.html"
    },
    {
        "name": "_Remote_Stub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/stub/java/rmi/_Remote_Stub.html"
    },
    {
        "name": "_ServantActivatorStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/_ServantActivatorStub.html"
    },
    {
        "name": "_ServantLocatorStub",
        "constructors": [],
        "methods": [],
        "href": "org/omg/PortableServer/_ServantLocatorStub.html"
    }
]